ADDCARD  TITLE 'ADD CARD(S) TO CURRENT CARD DECLARATION FILE'
         PRINT OFF
         COPY  JOLCOM
         PRINT ON,GEN,DATA
* JUNE 15,1977. C.V.CLARKE
* THIS MODULE WILL ADD   CARD (OR CARDS) TO THE CURRENT CARD
*  FILE DESCRIBED BY A PREVIOUS'DECLARE NAME *' INSTRUCTION.
*
*SYNTAX :
*
*        ADDCARD   'CARD1','CARD2',...   <OPTIONS>
*        ADDCARDS
*
*   WHERE OPTIONS ARE:-
*
*        1.    LEN(NN)  LEN   LENGTH DEFAULTS TO 80, UNLESS THE
*                             'ASM' OR 'CONTROL' OPTION IS USED, IN
*                             WHICH CASE THE LENGTH DEFAULTS TO 71.
*        2.    ASM -->1       WHEN A CARD TO BE OUTPUT IS GREATER
*        3.    CONTROL1       THAN THE LENGTH SPECIFIED (OR DEFAULTED),
*        4.    TSO->1 1       IT IS SPLIT INTO AS MANY CARDS AS ARE
*                   1 1       NECESSARY TO CONTAIN THE DATA.
*                   1 1>ASM    IF THE ASM OR CONTROL OPTION IS
*                   1 1>CONT  SPECIFIED, THE CARD WILL BE SPLIT AT THE
*                   1         NEAREST COMMA FOUND BEFORE COLUMN 71, AND
*                   1         AN ASTERISK PLACED IN COLUMN 72, AND THE
*                   1         CONTINUATION CARD WILL COMMENCE IN COLUMN
*                   1         16.
*                   1-->TSO    IF THE TSO OPTION IS SPECIFIED, THE CARD
*                             DATA WILL HALT AT THE LENGTH-1, AND A
*                             HYPHEN WILL BE PLACED IN THE LAST COLUMN.
*                             THE FOLLOWING DATA WILL RE-COMMENCE IN
*                             COLUMN 1 OF NEXT CARD
*
*                              IF NONE OF THE ABOVE OPTIONS ARE
*                             SPECIFIED, THE CARD WILL BE SPLIT INTO AS
*                             MANY CARDS AS ARE NECESSARY TO CONTAIN *
*                             THE DATA, UNLESS THE DATA WILL FIT INTO
*                             THE CARD.
*                              THE CARD DATA WILL HALT AFTER THE
*                             COLUMN INDICATED BY LENGTH, AND COMMENCE
*                             IN COLUMN 1 OF THE FOLLOWING CARD(S).
*                     NOSPLIT  IF 'NOSPLIT' IS SPECIFIED (SEE BELOW)
*                             THEN DATA MAY BE LOST AS NO CONTINUATION
*                             CARDS WILL BE PRODUCED.
*
*        5.    NOSPLIT -----> SPECIFIES THAT IF A CARD IS GREATER THAN
*              NOMSG   ----1  THE LENGTH SPECIFIED OR DEFAULTED TO,
*                          1  THEN NO CONTINUATION CARDS ARE TO BE
*                          1  PRODUCED.
*                          U
*                          1->SPECIFIES THAT NO MESSAGE IS TO BE
*                             PRODUCED INDICATING THAT DATA WAS LOST
*                             BY THE USE OF 'NOSPLIT'.
*
*
*
* USES:-
*
* AMONG THE MANY POSSIBLE USES ARE:-
*
*        IF %SSI>='' THEN ADDCARD ' SSI %SSI';
* WHICH IS OBVIOUSLY MUCH EASIER THAN TRYING TO BUILD UP CARD
* FILES FROM SYMBOLICS.
*
* ANOTHER USE IS THAT JOL COMMANDS MAY BE BUILT UP TO BUILD A CARD
*  FILE. USING EARL  EASYTRIEVE ETC.
* EG, EARL STATEMENT'PRINT' CAN BE CODED IN JOL, AND CONVERTED TO CARD
*  FORMAT FOR EARL.
*       EG  PRINT A,B; CAN THEN BECOME  ADDCARD 'PRINT A,B';
*
* PL1 AS WELL ? WHY NOT...
*
*
UJP40DST DSECT
         DS    18F
UJP40LEN DS    H              0 OR LEN SPEC OR DEFAULT (LATER)
UJP40ASM DS    C              ' ' OR NOT IF ASM
UJP40CNT DS    C              ' ' OR NOT IF CONTROL
UJP40TSO DS    C              ' ' OR NOT IF TSO
UJP40NSP DS    C              ' ' OR NOT IF NOSPLIT
UJP40NMS DS    C              ' ' OR NOT IF NOMSG
UJP40LDS EQU   *-UJP40DST
UJP40ADD JOLSAVE SIZE=UJP40LDS
         USING UJP40DST,R13
* STEP1: ANALYSE AND SET UP OPTIONS (IF CODED)
* STEP2: APPLY DEFAULTS AS NECESSARY
* STEP3: VALIDATE
* STEP4: PROCESS ALL TOKENS WITH QUOTES.
*
*
         LA    R5,2           PREPARE TO START AT 2ND TOKEN
         CLEAR UJP40LEN,UJP40ASM,UJP40CNT,UJP40TSO,UJP40NSP,UJP40NMS
P40LOOP1 GETTKN (R5)          GET NEXT TOKEN
         CLI   TKN,C' '       IS IT BLANK ?
         BE    P40END1        YES, -> END EXAMINATION OF PARAMETERS
         LR    R5,R1          SET R5 TO POINT AT NEXT TOKEN
         CLI   TKN,C''''      IS THIS TOKEN A PARAMETER OPTION, OR
*                             DATA FOR A CARD ?
         BE    P40LOOP1       DATA, IGNORE FOR NOW.
* THIS IS SUPPOSED TO BE AN OPTION OF SOME DESCRIPTION, SO NOW
*  WE SHALL EXAMINE THE TABLE OF KEYWORDS FOR THIS INSTRUCTION AND SEE.
         LM    R7,R9.P40KEYS  LOAD ADDRESS CONSTANTS
P40TKEY  CLC   TKN(8),0(R7)   IS KEYWORD= ?
         BE    P40GOTVK       YES,GO TO GOT VALID KEY ROUTINE
         BXLE  R7,R8,P40TKEY
* WELL, NOT VALID HERE, ISSUE DIAGNOSTIC
         JOLERR 301,'INVALID OPTION ''',#TKN,''' IGNORED'
         B     P40LOOP1
         SPACE 3
P40GOTVK EQU   *
* NOW GIVE CONTROL TO PROCESSING ROUTINE.
         L     R15,8(R7)      GET PROCESSING ROUTINE ADDRESS
         BR    R15            BRANCH TO IT
         SPACE 3
P40LEN   GETTRN (R5)          GET TOKEN FOLLOWING LENGTH KEYWORD
         LR    R5,R1          RESET CURRENT TOKEN REGISTER
         CLI   TKN,C'='       '=' SYMBOL ?
         BE    P40LEN         YES, SO SKIP IT
         CLI   TKN,C'('       '(' SYMBOL ?
         BE    P40LEN         YES, SKIP IT TOO
         SPACE 1
         TNUM  #TKN           CONVERT NUMBER TO NUMERIC
         LTR   R15,R15        DID IT CONVERT ?
         BZ    P40LOK1        YES ->
P40LERR1 JOLERR 302,'LENGTH OPTION INVALID AT ''',#TKN,''' DEFAULT TO B*
               E USED'
         B     P40ELEN        GO TO END LENGTH ROUTINE
         SPACE 2
P40LOK1  CH    R1,=H'80'      IS LENGTH > 80 ?
         BH    P40LERR1       YES-> INVALID
         STH   R1,UJP40LEN    SAVE IT
P40ELEN  GETTKN (R5)          GET NEXT TOKEN
         CLI   TKN,C')'       END OF PARAMETER ?
         BNE   P40LOOP1       NO, MUST BE NEXT KEYWORD OR SOMETHING.
         LR    R5,R1          RESET CURRENT REGISTER FOR TOKENS
         B     P40LOOP1
         SPACE 3
P40ASM   MVI   UJP40ASM,C'1'  SET ASM NON-BLANK
         B     P40LOOP1
         SPACE 3
P40CNTL  MVI   UJP40CNT,C'1'  SET CONTROL INDICATOR NON-BLANK
         B     P40LOOP1
         SPACE 3
P40TSO   MVI   UJP40TSO,C'1'  SET TSO INDICATOR NON BLANK
         B     P40LOOP1
         SPACE 3
P40NSPLT MVI   UJP40NSP,C'1'  SET NON-SPLIT INDICATOR NON-BLANK
         B     P40LOOP1
         SPACE 3
P40NOMSG MVI   UJP40NMS,C'1'  SET NON-MSG INDICATOR NON-BLANK
         B     P40LOOP1
         SPACE 3
* STEPS 2 & 3 ARE COMBINED FOR SIMPLICITY.
* TEST ASM,CNTL ETC OPTIONS INITIALLY.
         IFVALUE UJP40ASM,UJP40CNT,UJP40TSO,P40ERR3
         IFVALUE UJP40ASM,UJP40CNT,P40ERR4
         IFVALUE UJP40ASM,UJP40TSO,P40ERR5
         IFVALUE UJP40CNT,UJP40TSO,P40ERR6
* OK, NONE DUPLICATELY CODED
         SPACE 2
P40TLENX IFVALUE UJP40LEN,P40LENST
* HERE, WE MUST SET UP A DEFAULT LENGTH.
         MVC   UJP40LEN,=H'80' SET 80 INITIALLY.
         IFNULL UJP40ASM,UJP40CNT,P40TTSO
         MVC   UJP40LEN,=H'71'
         B     P40LENOK
         SPACE 1
P40TTSO  IFNULL UJP40TSO,P40LENOK
         MVC   UJP40LEN,=H'79'
         B     P40LENOK
         SPACE 1
P40LENST EQU   *
* HERE LENGTH IS SET UP. LETS CHECK WITH OTHER OPTIONS, OR AT LEAST
*  TSO, COS WE NEED A BYTE AT THE END TO PUT THE '-' IN IF A
*  CONTINUATION IS REQUIRED.
* IF ASM, ETC IS CODED AND AN INVALID LENGTH SET, WE WILL DO AS
*  REQUESTED.
         IFNULL UJP40TSO,P40NTSO1
         CLC   UJP40LEN,=H'80'
         BL    P40LENOK
         MVC   UJP40LEN,=H'79'
         B     P40LENOK
         SPACE 3
P40ERR3  JOLERR 403,'ASM,CONTROL AND TSO ALL SPECIFIED:- TERMINATED'
P40RET16 JOLRETN RC=16
P40ERR4  JOLERR 104,'ASM AND CONTROL SPECIFIED:- SIMILIAR FUNCTIONS ACCY
               EPTED AS CODED'
         CLEAR UJP40CNT
         B     P40TLENX
         SPACE 1
P40ERR5  JOLERR 405,'ASM AND TSO SPECIFIED:- TERMINATED'
         B     P40RET16
P40ERR6  JOLERR 406,'CONTROL AND TSO SPECIFIED:- TERMINATED'
         B     P40RET16
         SPACE 3
P40LENOK EQU   *
* NOW WE MUST CHECK TO SEE IF WE HAVE HAD AT LEAST ONE DCL NAME *
*  BECAUSE OTHERWISE THE CARDS WE ARE ADDING TO THE FILE WILL NOT
*  HAVE A FILE TO ADD THEM TOO.
         SPACE
         CLC   DATAMEM+2(4),BLANKS
         BNE   P40START
         JOLERR 407,'NO DECLARE <NAME> PRECEDES THE ADDCARD STATEMENT:-
               TERMINATED WITH NO ACTION'
         B     P40RET16
         EJECT
P40START EQU   *
         LA    R5,2           PREPARE TO START AT TOKEN 2 AGAIN.
P40LOOP2 GETTKN (R5)          GET A TOKEN
         LR    R5,R1          RESET CURRENT TOKEN REGISTER TO POINT
*                              TO THE NEXT ITEM.
         CLI   TKN,C' '       IS IT A BLANK ?
         BE    P40END         YES -> END
         CLI   TKN,C''''      IS IS DATA WITHIN QUOTES ?
         BNE   P40LOOP2       NOPE, SO IGNORE IT (OPTION- ALREADY
*                              DEALT WITH EARLIER)
         SPACE 2
* WE HAVE DATA TO GO OUT.
*
* LETS REMOVE QUOTES FROM THE END OF THE STRING, AND CHECK FOR
*  DOUBLE QUOTES THAT MAY HAVE TO BE MADE SINGLE QUOTES IN THE MIDDLE
*  OF THE DATA.
         LH    R6,HTKN        LOAD LENGTH OF THE STRING.
         SH    R6,=H'2'       -2 FOR NEW LENGTH
         BNP   P40LOOP2       NOT POSITIVE MEANS 0, IE NULL (EMPTY)
*                              STRING, WE DONT PUT OUT A CARD FOR NULLS
*                              BUT IF THERE IS A BLANK ONE, WE MIGHT??
         LR    R7,R6          SAVE REAL NEW LENGTH
         BCTR  R6,0           -1 FROM R6 FOR EX MVC.
         EX    R6,P40MVC1     SHIFT BACK 1 BYTE
         LA    R8,TKN+1(R6)   CALC SPOT WHERE WE MUST BLANK OUT
         MVC   0(2,R8),BLANKS SHIFT 2 BLANKS
         STH   R7,#TKN        RESET LENGTH OF STRING
* NOW SCAN LOOKING FOR DOUBLE QUOTES
         SPACE 1
         LR    R6,R7          LOAD LENGTH TO R6
         LA    R1,TKN         SET R1 TO START ADDRESS OF DATA STRING
         LA    R14,1          SET R14 TO INCREMENT (1)
         LA    R15,TKN-1(R6)  POINT TO LAST(-1) VALID CHAR IN DATA
P40QULUP CLC   =C'''''',0(R1) CHECK IF DOUBLE QUOTES.
         BE    P40GOTDB       OK, GOT DOUBLE QUOTES,-> REMOVE THEM.
         BXLE  R1,R14,P40QULUP LOOK FOR MORE.
         STH   R6,#TKN        RESET LENGTH
         B     P40OUT         -> OUTPUT CARD ETC
         SPACE 3
P40GOTDB EQU   *
* HERE WE MUST REMOVE DOUBLE QUOTES
*  CALCULATE LENGTH TO SHIFT
         LR    R9,R15         LOAD END OF STRING POINTER TO R9
         SR    R9,R1          - CURRENT BYTE POINTER = LENGTH
         EX    R9,P40MVC2     SHIFT BACK A BYTE
         S     R6,ONE         -1 FROM R6
         BP    P40QULUP       >0 BACK
         STH   R6,#TKN        =0, HHMM.
         B     P40LOOP2       GET NEXT TOKEN THEN
         SPACE 3
P40OUT   EQU   *
         CLC   #TKN,ZERO      >0 HOPEFULLY
         BNH   P40LOOP2       NO, BACK TO NEXT ITEM THEN
         SPACE 1
* NOW CHECK HOW THIS CARD IS TO GO OUT.
         MVC   WORK(80),BLANKS CLEAR INITIALLY
         CLC   #TKN,UJP40LEN  IS LENGTH OF DATA TO GO OUT > LENGTH
         BNH   P40SIMPL       SIMPLE OUTPUT BECAUSE NO SPLITTING
*                             IS REQUIRED.
         SPACE 1
* THE DATA MUST BE SPLIT BECAUSE IT IS LONGER THAN THE DATA IS ALLOWED
*  TO BE ON ONE CARD.
         SPACE 1
* IF ASM OR CONTROL TYPE OF DATA SET, WE MUST FIND A CONVENIENT COMMA
*  AND SPLIT THE DATA THERE. SO INITIALLY, WE WILL DO THE SIMPLE CASES
*  OF TSO OR *NONE*
         SPACE 1
         IFVALUE UJP40ASM,P40OPASM COMPLEX SPLIT -> GO
         IFVALUE UJP40CNT,P40OPCNT COMPLEX SPLIT -> GO
* HERE IS SIMPLE SPLIT
         LH    R15,UJP40LEN   LOAD MAX LENGTH ALLOWED OUT
         LNR   R14,R15        SAVE IN R14 AS WELL (NEGATIVE LOAD)
         BCTR  R15,0          -1 FOR R15 TO BE USED AS EX MVC
         EXR15,P40MVC3        SHIFT DATA FROM TKN TO WORK
         LA    R15,TKN+1(R15) POINT PAST LAST BYTE COPIED
         LH    R1,#TKN        PICK UP CURRENT LENGTH OF TOKEN
         AR    R1,R14         R1 NOW EQUALS NEW LENGTH
         STH   R1,#TKN        RESET #TKN NOW
         BCTR  R1,0           -1 FOR EXECUTED MOVE
         EX    R1,P40MVC4     RESET DATA IN STRING
         IFNULL UJP40TSO,P40PUT1
           MVI WORK+79,C -'
P40PUT1  PUT   DATA,WORK      OUTPUT DATA
         SPACE 3
         LH    R1,TOTCRDS     RESET TOTAL CARDS
         LA    R1,1(R1)       ADD 1
         STH   R1,TOTCRDS     RESET
         SPACE 3
         B     P40OUT         GO TEST IF MORE TO GO OUT (S/B).
         SPACE 3
P40OPASM EQU   *
P40OPCNT EQU   *
* HERE WE MUST FIND A CONVENIENT COMMA, AND OUTPUT FROM THAT AREA.
         MVC   WORK(72),TKN   MOVE 72 CHARACTERS INITIALLY.
P40OPAS2 LA    R7,WORK+71     PREPARE TO SCAN BACKWARDS
         LA    R15,WORK       END OF STRING
         LH    R14,=H'-1'     NEGATIVE INCREMENT FOR BXH
         CLI   O(R7),C','     FIND THE FIRST COMMA GOING BACKWARDS
         BE    P40GOTC1       GOT A COMMA
         BXH   R7,R14,*-8     LOOP, LOOKING FOR A COMMA.
* NO COMMA FOUND AT ALL, SO SET R7 TO END OF STRING
         LA    R7,WORK+71
P4OGOTC1 MVC   1(71,R7),BLANKS SHIFT BLANKS OVER-WRITING INFORMATION
*                             FOLLOWING THE COMMA.
         SPACE 1
* NOW CALCULATE THE LENGTH THAT WE CAN OUTPUT,SO THAT WE CAN CHOP
*  OFF THE BEGINNING OF THE DATA STRING.
         SR    R7,R15         CALCULATE LENGTH LEFT.
         LA    R8,TKN+1(R7)   POINT TO ORIGINAL STRING, AT POSITION
*                             AFTER THE COMMA.
         LH    R1,#TKN        GET ORIGINAL LENGTH
         SR    R1,R7          LENGTH OF NEW STRING
         EX    R1,P40MVC5     SHIFT STRING
         STH   R1,#TKN        RESET STRING LENGTH
         PUT   DATA,WORK      OUTPUT FIRST LINE
* NOW WE MUST REPEAT THE PROCESS, BUT START IN COLUMN 16.
         COMMA ABOVE IN COL 71
         MVC   WORK(16),BLANKS
         MVC   WORK+16(80-16),TKN
         B     P40OPAS2
         SPACE 3
P40SIMPL PUT   DATA,TKN
         B     P40LOOP2
P40KEYS  DC    A(*+12,12,P40KEYE-12)
         DC    CL8'LEN',A(P40LEN)
         DC    CL8'L  ',A(P40LEN)
         DC    CL8'LENGTH',A(P40LEN)
         DC    CL8'ASM',A(P40ASM)
         DC    CL8'CNTL',A(P40CNTL)
         DC    CL8'CONTROL',A(P40CNTL)
         DC    CL8'TSO',A(P40TSO)
         DC    CL8'NOSPLIT',A(P40NSPLT)
         DC    CL8'NOMSG',A(P40NOMSG)
         DC    CL8' ',A(P40LOOP1)
P40KEYE  EQU   *
P40MVC1  MVC   TKN(*-*),TKN+1
P40MVC2  MVC   O(*-*,R1),1(R1)
P40MVC3  MVC   WORK(*-*),TKN  SHIFT PART TO WORK
P40MVC4  MVC   TKN(*-*),O(R15) SHIFT DOWN TKN,SO REDUCING STRING
P40MVC5  MVC   TKN(*-*),O(R8)  AS ABOVE
