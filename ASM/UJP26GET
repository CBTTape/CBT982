          TITLE 'JOL GET FILE ROUTINE'
           PRINT OFF
         COPY  JOLCOM
           PRINT ON,GEN
P26SAVE  DSECT
         DS    18F
LP26BUF  DS    A              L'BUFFER FOR FREEMAIN AT END OF FILE
AP26BUF  DS    A              A(BUFFER) FOR FILE
P26BLKSI   DS  H               BLOCKSIZE
P26CURRA   DS  A               ADDRESS OF CURRENT RECORD
P26SAVEL EQU   *-P26SAVE
         PRINT NOGEN
         DCBD  DSORG=PS,DEVD=DA
         PRINT GEN,DATA
         PRINT GEN
         JOLSAVE CSECT=UJP26GET,SIZE=P26SAVEL
          USING TKNX,R3
         USING JOLCOM,R2
         USING P26SAVE,R13
* THIS ROUTINE IS PART OF THE JOL COMPILER,AND IS THE 'GET' INSTRUCTION
*
***** NEW:- APRIL 12,1975
* COPYRIGHT CLARKE COMPUTER SOFTWARE.
*
* THE FORMAT OF THE GET IS:-
*
*          GET  <FILE> <OPTIONS>
*  WHERE <FILE> ::- FILENAME (DDNAME) WITH OPTIONAL MEMBER NAME,
*          EG GET FILE1(MEMBER2)
*
*  WHERE <OPTIONS> MAY BE :DATA
*                         :KEY(S) KEYLEN,KEYPOSN FOLLOWED BY A NAME
*                                 LIST WHICH SPECIFY THE EXPECTED
*                                 KEYS TO BE FOUND ON INPUT
*  IF NO OPTIONS ARE SPECIFIED,CARD(1)-CARD(N) WILL BE USED
*  THE INSTRUCTION IS TERMINATED ON END OF FILE
*
*  AS USUAL IN JOL, R2->JOLCOM,R3->TKNX AND R11 IS OUR BASE REGISTER
*  WHICH LEAVES ALL THE OTHER REGISTERS (APART FROM 13) TO PLAY WITH
         SPACE 3
* THE FOLLOWING MUST BE DONE:-
*  1. VALIDATE THE INSTRUCTION
*  2. OPEN FILE
*  3. CLEAR(NULLIFY) ANY EXISTING NAMES
*  4. PERFORM THE GET.
*
* BSAM/BPAM WILL BE USED FOR THE I/O ROUTINE, AND ONLY 1 BUFFER
*  FOR SIMPLICITY. THIS SHOULDN'T BE TOO INEFFICENT, AS WE ONLY
*  EXPECT TO READ A MAXIMUM OF SAY 50 RECORDS (USUALLY 10,I THINK)
*  IF AN EXTREMELY LARGE FILE IS USED,IT WILL FILL UP THE
*  SYMBOLIC PARAMETER TABLE, AND WON'T BE MUCH GOOD TO ANYONE,ANYWAY.
*
*  SET UP A CONSTANT TO MAKE THE 'ASSIGNMENT' HANDLING ROUTINE
*  THINK THIS IS THE MACRO PROCESSOR, AS IT DOESN'T DO NEARLY
*  AS MUCH WORK WHEN IT KNOWS THAT IT IS PROCESSING SOMETHING
*  FROM THERE, IE IT DOESN'T TRY AND DO ARITHMETIC ON THE
*  ITEM ITS STORING.
         MVC ICOMMAND,=CL8'MACRO'
         SPACE
         LA    R4,P26DCB
         USING IHADCB,R4
* NOW SET UP THE DDNAME
         GETTKN 2            GET 2ND TOKEN
         CLI   TKN,C' ' ANY DATA THERE?
         BNE   P26GO1
         JOLERR   301,'GET HAS NO FILE NAME'
         JOLRETN              RC=16
P26GO1   EQU   *
         CLI TKN,C''''       DSNAME TYPE SPECIFIED ?
         BNE P26MVCDD        NOPE
           JOLERR 413,'GET ''DSNAME'' NOT SUPPORTED - MVS ONLY'
         JOLRETN RC=16
P26MVCDD MVC DCBDDNAM,TKN    SET UP DDNAME NOW
         SPACE
* NOW WE WANT R5=TOKEN NUMBER OF THE OPTIONAL MEMBER NAME,OR 0,
*  AND R6 TO POINT TO THE NEXT VALID TOKEN AFTER THE MEMBER NAME,
*  EG,KEY |DATA ETC
         SR R5,R5            SET R5=0 INITIALLY
         LR R6,R1            SET R6=TOKEN AFTER FILE NAME(INITIALLY)
         GETTKN (R1)         R1=3 AT THE MOMENT,COS WE LAST DID A
*                            GETTKN 2, AND GETTKN ALWAYS RETURNS A
*                            NUMBER (IN R1) 1 HIGHER THAN IT WAS
*                            CALLED WITH
         CLI TKN,C'('        IS THERE A MEMBER NAME SPECIFIED ?
         BNE P26R6OK         NOPE
         LR  R5,R1           SET R5=TOKEN NUMBER OF MEMBER NAME
         LA  R1,1(R1)        ADD 1 TO R1 TO SKIP MEMBER NAME
         LR  R6,R1           IN CASE THERE IS NO ')'
         GETTKN (R1)
         CLI TKN,C')'        ')' ?
         BNE P26R6OK         NO -> DON'T WORRY ABOUT IT THOUGH
         LR  R6,R1           SET R6 TO -> AFTER ')'
         SPACE
P26R6OK  EQU *
         SPACE
* NOW R6 -> NEXT KEYWORD, AND R5=TKN NUMBER OF <MEMBER> | 0
         SPACE
         GETTKN (R6)         GET THE NEXT KEYWORD THEN
         CLC =C'KEY ',TKN    KEY ?
         BE  P26KEY
         CLC =C'KEYS ',TKN   KEYS ?
         BE  P26KEY
         CLI TKN,C' '        ' ' (IE READ FILE-ALL)
         BE  P26ALL
         CLC =C'DATA ',TKN
         BE  P26DATA
           CLC =C'LIST ',TKN   GET LIST ?
           BE  P26LIST
P26LIST   EQU  *   **************------------------
         JOLERR 408,'''',#TKN,''' IS NOT SUPPORTED'
         JOLRETN RC=16
         EJECT
P26KEY   EQU *
* NOW WE WANT TO SET R6=KEYLENGTH AND R7=KEYPOSN
         SR R6,R6            INITIALISE TO 0 (KEYLEN)
         SR R7,R7            INITIALISE TO 0 (KEYPOSN)
         SPACE
P26GTNXT GETTKN (R1)         GET TOKEN AFTER 'KEY' KEYWORD.      C DASD
         CLI   TKN,C'='                IF GET KEY= THEN GO GET   A DASD
         BE    P26GTNXT                   THE NEXT TOKEN         A DASD
         LR R8,R1            SAVE NEXT POSN
         TNUM #TKN           TEST IT TO BE NUMERIC
           LTR R6,R1           LOAD R6 WITH KEYLENGTH
           BZ  *+6             =0 ?, DON'T SUBTRACT
           BCTR R6,0           -1 FOR EX MOVE
         LTR R15,R15         IS IT ?
           BZ  P26KEYLO K      YES
         JOLERR 402,'KEY LENGTH ''',#TKN,''' IS NOT NUMERIC' ERROR MSSG
         JOLRETN RC=16
P26KEYLO GETTKN (R8)
         CLI TKN,C','        ',' AFTER LENGTH ?
         BNE P26NOPOS        NO.POSITION SPECIFIED,ASSUMME 1.
         GETTKN (R1)         GET THE POSITION THEN
         LR    R8,R1         GET NEXT
         TNUM #TKN           CONVERT TO NUMERIC
         LTR  R15,R15
           BNZ P26KPER         NOT NUMERIC ERROR
           LTR R7,R1           TEST NUMERIC THEN
         BNM  P26MINUS       -1 COS USER WILL SPECIFY POSN 1,WHICH IS 0
         BZ   P26WARN        =0,OK,GIVE WARNING BUT...
P26KPER    EQU *
         JOLERR 403,'KEY POSITION ''',#TKN,''' IS NOT NUMERIC' ERROR
         JOLRETN RC=16
P26MINUS   BCTR R7,0
         B    P26GOTPS
P26WARN  JOLERR 204,'KEY POSITION SPECIFIED WAS ZERO,ONE ASSUMED'
P26GOTPS EQU *
P26NOPOS EQU *
*
* R6,R7 ARE NOW SET CORRECTLY.
* R8-> NEXT TOKEN NUMBER AFTER THE KEY LENGTH AND/OR POSITION.
*
* SIMILAR TO UJP25ED, WE MUST NULLIFY ALL THE NAMES IN THE LIST
*  BEFORE WE GET GOING. THIS IS IN CASE THE NAMES HAVE ALREADY
*  BEEN DECLARED AND HAVE VALUES IN THEM.
*
         MVC #WORK,ZERO      ZERO LENGTH MEANS:-%A=''; IE NULLIFY
         LR  R9,R8           KEEP A POINTER TO THE START OF THE
*                            NAME LIST.
P26LUP1  GETTKN (R8)         RET FIRST (OR NEXT) 'NAME'
         LR R8,R1            KEEP THE POINTER TO THE NEXT ITEM
         CLI   TKNTYPE,0      NUMERIC?
         BE    P26KEYN
         CLI TKNTYPE,2       <IDENTIFIER> ? (COULD BE A ' ' TOO)
         BNE P26TCOMM        NO, TEST FOR A ',' ETC
         CLI TKN,C' '        END OF NAME LIST ?
         BE  P26END1         YES -> ON TO NEXT PROCESSING
P26KEYN  EQU  *
         LA    R15,1(R6)      SET R15=R6+1
         CH  R15,#TKN         IS THIS NAME>KEYLENGTH SPECIFIED ?
         BNL  P26LENOK        NO,SO ITS OK
         JOLERR 305,'KEY NAME OF ''',#TKN,''' IS LONGER THAN THE KEYLEN*
               GTH YOU SPECIFIED'
         JOLRETN RC=16
P26LENOK MVC SYMBOLIC,TKN         SHIFT NAME TO SYMBOLIC
        $CALL UJP85ASN      $CALL ASSIGN ROUTINE TO CLEAR NAME IF
*                            ALREADY SET UP, OR DCL IT IF IT HASN'T
*                            BEEN SET UP.
         B  P26LUP1          AND ROUND THE LOOP
         SPACE 3
P26TCOMM CLI TKN,C','        ',' ?
         BE  P26LUP1         YEP, IGNORE IT
         CLI TKN,C'('
         BE  P26LUP1
         CLI TKN,C')'
         BE  P26LUP1
         JOLERR 406,'''',#TKN,''' IS INVALID IN A KEYNAME LIST'
         JOLRETN RC=16
         SPACE 3
P26END1  LA  R7,WORK(R7)     SET R7=ACTUAL ADDRESS OF THE POSITION
*                            IN THE RECORD THAT WE WILL BE LOOKING
*                            AT FOR THE KEY (R7 USED TO CONTAIN THE
*                            RELATIVE POSITION)
*   R6 CAN BE USED NOW TO EXECUTE A CLC INSTRUCTION
         SPACE
           SPACE 3
           LR R8,R9          RESET R8 TO START OF NAME STRING
* NOW, WE ARE READY TO OPEN FILE AND GET CRACKING
         SPACE
         BAL R12,P26OPEN     OPEN FILE,IF IT CAN'T WILL PRINT ERROR
*                            AND RETURN
P26LUP2  BAL R12,P26GETRC    GET A RECORD (ALWAYS GOES TO #WORK)
* NOW WE HAVE TO SCAN THE NAME LIST AND SEE IF THE KEY ON THE
*  RECORD MATCHES ONE WE'VE GOT
         LR  R1,R9           PICK UP THE FIRST TOKEN NUMBER OF
*                            THE NAME LIST
P26LUP3  GETTKN (R1)         GET IT
         CLI   TKNTYPE,0      <NUMBER>
         BE    P26DOCOM       DO THE COMPARISON FOR A NUMBER
         CLI TKNTYPE,2       IS IT AN <IDENTIFIER>
         BNE P26LUP3         NO, IGNORE IT (REMEMBER THE NAME LIST WAS
*                            FULLY EDITED BEFORE, SO HERE WE CAN SIMPLY
*                            IGNORE ANY ITEM WE DON'T WANT)
         CLI TKN,C' '        END OF NAME LIST ?
         BNE P26DOCOM        NO,DO THE COMPARISON THEN.
* HERE WE DIDN'T FIND A MATCH FOR THE RECORD READ, OR IT IS DUPLICATED
* (SEE NOTES ON DUPLICATION BELOW, AND THE 'FUNNY' PULLED TO DETECT
*  THEM).
         CLC #WORK,=H'80'    IS RECORD LENGTH>80 ?
         BNH P26LEAV1        NO
         MVC #WORK,=H'80'    YES,SET TO 80
P26LEAV1 EQU   *
         EX  R6,P26MVC2      SHIFT THE OFFENDING KEY TO TKN
         LA  R1,1(R6)        AND SET
         STH R1,#TKN         - UP ITS LENGTH
         JOLERR 107,'KEY ''',#TKN,''' FOUND IN RECORD ''',#WORK,''' WAS*
                NOT SPECIFIED IN YOUR KEY LIST,OR THE RECORD IS DUPLICA*
               TED'
         B  P26LUP2          GET NEXT RECORD,ETC
         SPACE 3
P26DOCOM EQU *
* #WORK CONTAIN THE RECORD, AND #TKN A KEY, LETS SEE IF THEY MATCH
         EX R6,P26CLC1       MATCH ON KEYS ?
         BNE P26LUP3         NOPE, GET ANOTHER KEY THEN MATE...
* WELL,ALL WE HAVE TO DO IS STORE THE RECORD, THEN DO A
*  'FUNNY' SO THAT WE WON'T GET THIS KEY AGAIN.
         LR  R8,R1            SAVE POINTER TO NEXT KEY IN NAME LIST
* R8 USED 3  INSTRUCTIONS BELOW FOR THE 'FUNNY'.
         MVC SYMBOLIC,TKN         SET UP THE KEYNAME FOR THE ASSIGN RTN
        $CALL UJP85ASN       UJP85ASN STORES THE RECORD UNDER THE
*                            APPROPRIATE % NAME
         LR R1,R8            RESET R1 BECAUSE IT WOULD HAVE BEEN DESTR-
*                            OYED IN 'UJP85ASN'
* NOW YOU WILL HAVE NOTICED EARLIER IN THE CODE LABELLED 'P26LUP3'
*   THAT WE GET A TKN, AND CHECK TO SEE IF IT IS A TYPE 2, OR 0, IE
*   AN <IDENTIFIER>,AND IF IT IS NOT, WE IGNORE IT, BECAUSE WE SAID
*   THAT THE NAME LIST HAD ALREADY BEEN PRETTY WELL VALIDATED, AND
*   SO WE CAN IGNORE  ANY ITEMS THAT WEREN'T <IDENTIFIERS>.
* WELL, HAVING USED THIS KEY, NOW WE ARE GOING TO MAKE IT
*   LOOK LIKE ITS NOT AN <IDENTIFIER> WITH A BIT OF A FIDDLE.
*        SLL R8,2            *(R8) BY 4
*        LA  R8,TKNDESC-8+1(R8) GET A(DESC BYTE) WHICH DESCRIBES 'TKN'
******** UNFORTUNATELY, THE ABOVE 2 INSTRUCTIONS WILL GIVE AN
******** ASSEMBLY ERROR:TKNDESC-8 IS NOT ADDRESSABLE
******** THEREFORE:-
         S   R8,ONE          -1
         SLL R8,2            MULT BY 4
         LA  R8,TKNDESC-4+1(R8)
         MVI 0(R8),1         SHIFT X'1' INTO TKNTYPE INDICATOR
         B   P26LUP2         GET NEXT RECORD
         SPACE 3
***********************************************************************
*                 END OF GET EDIT WITH KEY... HURRAY....
         EJECT
P26ALL   EQU *
* THIS SECTION OF CODE WILL READ THE ENTIRE FILE INTO SYMBOLIC
*  LOCATIONS CALLED CARD(1)-CARD(N)
* IT IS MUCH EASIER THAN THE GET WITH KEYS.
         BAL R12,P26OPEN     OPEN FILE
         ZAP P53NO,=P'0'     SET A WORK LOCATION TO P'0'
         MVC SYMBOLIC(4),=CL4'CARD' SET NAME UP AS CARD
P26LUP4  BAL R12,P26GETRC    READ A RECORD TO #WORK
         AP  P53NO,=P'1'     ADD 1 TO COUNTER
         UNPK SYMBOLIC+4(4),P53NO UNPACK NO.
         OI  SYMBOLIC+7,C'0'      CONVERT TO PROPER EBCIDIC.
        $CALL UJP85ASN       SHIFT TO SYMBOLIC TABLE.
         B   P26LUP4
******  END, GET FILE
P26DATA  EQU  *
         B   P26LIST   *******************
* YES, GET DATA CAN WAIT FOR ANOTHER DAY PEOPLES
           EJECT
P26OPEN  EQU *
* THIS SMALL ROUTINE IS BAL'D TO ON R12 AND OPENS THE INPUT FILE,
*   WHOSE DCB IS A (R4).
* R5 CAN BE ZERO, IN WHICH CASE WE AREN'T AFTER A MEMBER NAME,
*   OR IT WILL CONTAIN A NUMBER SUCH THAT IF WE DO A GETTKN, THEN
*   TKN WILL HAVE THE MEMBER NAME WE WANT.
*
* BEFORE WE OPEN THE FILE, WE MUST CHECK IF WE
* HAVE A JES INPUT FILE, AND IF SO, WE MUST SET
* THE DSORG FIELD TO SEQUENTIAL, OTHERWISE WE
* WILL ABEND S013.
*
* THE DEVTYPE MACRO WILL TELL US WHAT WE HAVE.
*
         DEVTYPE DCBDDNAM,CALLAREA
         LTR   R15,R15
         BNZ   P26NOFIL
         CLC =X'00000102',CALLAREA JES INPUT/OUTPUT DEVICE?
         BNE   P26CKPS
         MVI   DCBMACR1,DCBMRRD SHUT OFF POINT LEAVE READ ON       DASD
P26MAKPS MVI   DCBDSORG,DCBDSGPS   MAKE SEQUENTIAL                 DASD
         B     P26OPN2                                             DASD
P26CKPS  LTR   R5,R5       GOT A MEMBER NAME ?                     DASD
         BZ    P26MAKPS    IF NOT, SET DCB TO PS                   DASD
P26OPN2  EQU   *
         MVI   CALLAREA,X'80'   SET LIST END FOR OPEN             76200
         OPEN  ((R4),INPUT),MF=(E,CALLAREA)
         TM    DCBOFLGS,DCBOFOPN   OPEN ?
         BO    P26FILOK
P26NOFIL JOLERR 411,'FILE SPECIFIED CANNOT BE OPENED'
         JOLRETN RC=16
P26FILOK LTR   R5,R5          WAS A MEMBER SPECIFIED ?
         BZ    P26NOME2       NO ->
         GETTKN (R5)
         FIND  (R4),TKN,D
         LTR   R15,R15
         BZ    P26MEMO2
         JOLERR 409,'MEMBER ''',#TKN,''' CANNOT BE FOUND'
           B   P26CLOSF        CLOSE FILE, RETURN
         SPACE 3
P26NOME2 EQU   *
P26MEMO2 EQU   *
           SPACE 1
* CHECK IF FB AND LRECL>200, ERROR (DO SAME VB, BUT ONLY AS
*                              RECORDS BEING READ, COS LRECL
*                              FOR VB IS MAX ONE ONLY).
           TM  DCBRECFM,X'50'  VB ?
           BO  P26VB03
           CLC DCBLRECL,=H'200'
           BNH P26LROK1
           JOLERR 310,'RECORDS TOO LARGE, MAX IS 200'
           B   P26CLOSF        CLOSE FILE, RETURN
P26LROK1   EQU *
P26VB03    EQU *
         LH    R0,DCBBLKSI    GET SIZE OF BUFFER REQD
         ST    R0,LP26BUF     SAVE FOR FREEMAIN
         GETMAIN R,LV=(0)     GET THE BUFFER SPACE
         LR    R10,R1              BUFFER ADDRESS
*        MVC   A26CURRO,ZERO  CLEAR CURRENT OFFSET IN BLOCK
         ST    R10,AP26BUF    SAVE POSITION OF BUFFER
         READ  CALLAREA,SF,(4),(10),MF=(E,CALLAREA)
         CHECK CALLAREA
         CLI   CALLAREA,X'7F'
           BNE P26CHK41        CHECK EOF THEN (ON FIRST READ)
           SPACE 1
* CALC LENGTH OF BLOCK JUST READ
           L   R1,CALLAREA+16  ADDRESS OF IOB
           LH  R14,DCBBLKSI    GET NUMBER OF BYTES REQUESTED IN 'READ'
           SH  R14,14(R1)      -RESIDUAL COUNT= BYTES REALLY READ
           STH R14,P26BLKSI    SAVED
* NOW STORE ADDRESS OF FIRST RECORD
           ST  R10,P26CURRA    FINE FOR FB, BUT VB S/B +4
           TM  DCBRECFM,X'80'  VB ?
           BO  0(R12)          NOPE, BACK TO CALLER
           LA  R1,4(R10)       +4 FOR VB BLOCK OVERHEADS
           ST  R1,P26CURRA     STORE
           BR  R12             BACK TO CALLER
           SPACE 2
P26CHK41   EQU *
         CLI   CALLAREA,X'41'      EOF ON FIRST READ
         BNE   P26ERR11
         SPACE 1
P26FREEB JOLERR 012,'NO DATA IN FILE'
P26EOF     EQU *
         LH    R0,DCBBLKSI
         L     R1,AP26BUF
         FREEMAIN R,LV=(0),A=(1)   FREE THE BUFFER
P26CLOSF   MVI  CALLAREA,X'80'  SET END
           CLOSE ((R4)),MF=(E,CALLAREA)
         JOLRETN RC=0              NULL DATA SET, JUST RETURN
P26ERR11 JOLERR 414,'I/O ERROR -CHECK FAILED'
           B   P26EOF          FREE BUFFER,CLOSE FILE, RETURN
         SPACE 3
P26GETRC EQU   *
* THIS ROUTINE IS BALD TO ON R12 TO GET THE NEXT RECORD FROM THE
*  FILE
           L   R1,P26CURRA     LOAD ADDRESS OF CURRENT RECORD IN BLOCK
         TM    DCBRECFM,X'40' VB | FB
         BO    P26VB02
* HERE FIXED FILE
           LR  R14,R10         LOAD R14=A(BLOCK,BUFFER)
           AH  R14,P26BLKSI    + CURRENT BLOCKSIZE
           CR  R1,R14          DO WE NEED A NEW BLOCK ?
           BNL P26NEWBL        YES, GO GET IT
           LH  R15,DCBLRECL    GET CURRENT LRECL
           STH R15,#WORK       SET #WORK WITH RECORD LENGTH
           BCTR R15,0          -1 FOR EXECUTED MOVE
           EX  R15,P26FBMVC    SHIFT THE RECORD
           AH  R1,DCBLRECL     PREPARE TO RESET CURRENT RECORD PNTR
           ST  R1,P26CURRA     RESET IT
           BR  R12             RETURN TO CALLER
           SPACE 3
P26VB02    EQU *
* HERE A VB TYPE FILE (V ANYWAY)
*    R1 -> CURRENT RECORD
*    R10-> BUFFER
*    R4 -> DCB
           MVC #WORK,0(R1)     SHIFT RECORD LENGTH TO #WORK
           MVC DCBLRECL,0(R1)
           CLI #WORK,X'7F'     NEW BLOCK REQD INDICATOR
           BE  P26NEWBL        =,YES, GET NEW BLOCK THEN
* NOW SHIFT THE RECORD, AND RESET 'P26CURRA'
           LH  R15,#WORK
           SH  R15,=H'5'       -4 FOR VB OVERHEAD,-1 FOR EX MVC
           EX  R15,P26VBMVC    SHIFT RECORD TO WORK
         LA    R15,1(R15)     ADD 1
         STH   R15,#WORK
* NOW RESET 'P26CURRA'
           LR  R15,R1          SAVE OLD CURRENT RECORD ADDRESS
           AH  R1,DCBLRECL     + L'CURRENT RECORD=A(NEXT REC)
           LR  R14,R10         A(BUFFER)
           AH  R14,0(R10)      R14=END ADDRESS OF BLOCK
*                              R1=ADDRESS OF NEXT RECORD
           SPACE 1
           CR  R1,R14          WAS RECORD JUST MOVED LAST IN BLOCK ?
           BL  P26VB04         NO
* SET INDICATOR SO WE KNOW TO READ A NEW BLOCK NEXT TIME WE ARE
*    CALLED
           MVI 0(R15),X'7F'
           BR  R12             BACK TO CALLER
           SPACE 1
P26VB04    ST  R1,P26CURRA
           BR  R12
P26NEWBL L     R10,AP26BUF
         READ  CALLAREA,SF,(4),(10),MF=(E,CALLAREA)
         CHECK CALLAREA
         CLI   CALLAREA,X'7F' COMPLETE NORMALLY ?
           BE  P26NEWRS        RESET THINGS A BIT
* CHECK EOF THEN
           CLI CALLAREA,X'41'  EOF ?
           BNE P26ERR11        ERROR
           B   P26EOF          EOF
           SPACE 3
P26NEWRS   L   R1,CALLAREA+16  IOB
           LH  R14,DCBBLKSI    NUMBER OF BYTES REQUESTED IN READ
           SH  R14,14(R1)      -RESIDUAL COUNT
           STH R14,P26BLKSI    =NO. BYTES REALLY READ
* SET P26CURRA NOW
           ST  R10,P26CURRA
           TM  DCBRECFM,X'80'  VB OR FB
           BO  P26GETRC        FB, GO GET RECORD NOW
           LA  R1,4(R10)       SET VB
           ST  R1,P26CURRA
           B   P26GETRC        GO GET RECORD
           PRINT NOGEN
P26DCB     DCB DDNAME=X,MACRF=R,DSORG=PO,EODAD=P26EOF              DASD
           PRINT GEN
P26MVC2    MVC   TKN(*-*),0(R7)   SHIFT BAD KEY TO TKN
P26CLC1    CLC   TKN(*-*),0(R7)   COMPARE KEYS
P26FBMVC   MVC   WORK(*-*),0(R1)  GET FB RECORD
P26VBMVC   MVC   WORK(*-*),4(R1)  GET VB RECORD
         LTORG
           DC  S(*,*,*,*,*,*,*,*,*,*,*,*)
           DC  S(*,*,*,*,*,*,*,*,*,*,*,*)
           DC  S(*,*,*,*,*,*,*,*,*,*,*,*)
           DC  S(*,*,*,*,*,*,*,*,*,*,*,*)
           DC  S(*,*,*,*,*,*,*,*,*,*,*,*)
           DC  S(*,*,*,*,*,*,*,*,*,*,*,*)
           DC  S(*,*,*,*,*,*,*,*,*,*,*,*)
           DC  S(*,*,*,*,*,*,*,*,*,*,*,*)
           DC  S(*,*,*,*,*,*,*,*,*,*,*,*)
           DC  S(*,*,*,*,*,*,*,*,*,*,*,*)
           DC  S(*,*,*,*,*,*,*,*,*,*,*,*)
           END
