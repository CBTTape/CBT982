           TITLE 'JOL PREPROCESSOR MAIN LINE'
* JOL COPYRIGHT CLARKE COMPUTER SOFTWARE 1971,1972,1973,1974
* JOL COPYRIGHT CLARKE COMPUTER SOFTWARE 1976
* JOL COPYRIGHT CLARKE COMPUTER SOFTWARE 1980
* JOL COPYRIGHT CLARKE COMPUTER SOFTWARE 1981
* JOL COPYRIGHT CLARKE COMPUTER SOFTWARE 1982
* REFER TO INSTRUCTIONS ON COPYRIGHT NOTICE FORM NO CCS-C001.
           SPACE 3
*                   J             000000            L
*                   J            0      0           L
*                   J           0        0          L
*                   J          0          0         L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*        J          J         0            0        L
*         J        J           0          0         L
*          J      J             0        0          L
*           J    J               0      0           L
*            JJJJ                 000000            LLLLLLLLLLL
         SPACE 3
* NEW CODE IS INTRODUCED FOR VERSION 3.2. BASICALLY, THE CODE     76200
*  MERELY COPIES ANY JCL STRAIGHT THROUGH TO THE JCL FILE         76200
*  IF THE CLASS ON THE JOB CARD IS NOT THE SAME AS THAT           76200
*  SPECIFIED IN THE JOLGEN.                                       76200
*                                                                 76200
* THIS MEANS THAT JOL CAN BE USED :-                              76200
*  1. AS A HASP/JES2 EXECUTOR                                     76200
*  2. AS A STARTED TASK READING DIRECTLY FROM A CARD READER       76200
*  3. AS A STARTED TASK READING AS AN INITIATOR                   76200
*CHANGES AFFECT UJP52CHR AND ARE CALLED CHNG30200 FOR CLARITY     76200
* OTHER CHANGES HAVE ALSO BEEN MADE IN THE MAIN JOL ROUTINE.      76200
* IT WILL:-                                                       76200
*  1. ATTEMPT TO READ PAST EOF ON SYSIN IF REQUESTED              76200
*  2. CLOSE THE PRINTER (CLOSE=FREE ON JCL) SO THAT THE           76200
*     PRINTS OF ANY JOL JOB WILL BE DONE EVEN IF JOL              76200
*     NEVER ENDS                                                  76200
         EJECT                                                    76200
           SPACE 3
         PRINT DATA                                               75128
           JOLSAVE CSECT=UJP00MN
           $CALL   UJP00MN2
           LR      R5,R15
           $CALL   UJP15DAL
           LR      R15,R5
           JOLRETN RC=(15)
           JOLSAVE CSECT=UJP00MN2
* THIS IS THE MAIN CONTROLLING MODULE OF THE PREPROCESSOR STAGE OF JOL
           USING JOLCOM,R2
* NOW WE MUST INITIALISE THE ODD VARIABLE OR TWO
         MVC   LINECNT,=X'7FFF' SET LINE-COUNT HIGH FOR PRINT RTN 75128
         L  R1,AP52DCBS
         USING P52DCBS,R1
         L     R14,ASYSIN     LOAD ADDRESS OF SYSIN DCB           75128
           ST  R14,CURRDCB
           CLEAR SAVECARD,FILENO,CURRBLKS,ACURREC                 74303
           L R1,ASYMTBL
           XC 0(12,R1),0(R1)  CLEAR FIRST TABLE ENTRY     75003
           DROP R1
           SPACE 3
           L   R3,ATKN1                        ADDRESS TOKEN1
           USING TKNX,R3
         L     R1,AJOLGEN                                         75128
         USING GENDETS,R1                                         75128
      CLEAR LEVEL,NEST,NOSYMS,RORGSYMT,TOTSYMS,PARMSRCH,COND,     75311*
               MACACCES,TOTCRDS,SYSINMDE,P50SAVEF,STMT,           75128*
               INCHAR,INLINENO,PRINTIND,ISMACRO,#STRING,STRING    75128
         MVI   COND,C'T'
         MVC   DEFAULTS(255),DEFCOPY SHIFT COPY OF DEFAULTS       75311
         MVC  DEFAULTS+255(LDEFAULT-255),DEFCOPY+255              75311
*                             BACK TO MAIN DEFAULT AREA AS THEY   75128
*                             MAY HAVE BEEN CHANGED BY * JOL      75128
         SPACE 1
* NOW WE SHALL SOME ADDRESS CONSTANTS SO THAT DYNAMICALLY         75128
*  LOADED ROUTINES CAN GET A VARIOUS MODULES WITHOUT THEM HAVING  75128
*  TO BE LINKED IN                                                75128
         SPACE 1                                                  75128
         MVC   AUJP02,=V(UJP02DCL)                                75128
         MVC   AUJP85,=V(UJP85ASN)                                75128
         MVC   AUJP98,=V(UJP98OP)                                 75128
         MVC   AUJS21,=V(UJS21FNC)                                75128
      WXTRN  UJS21FNC                                             76200
         MVC   AUJP90,=V(UJP90OP)                                 75128
         MVC   AUJS20,=V(UJS20REP)                                75128
           $LINK UJP93DTE    SET UP %DATE ETC                     75128
         SPACE 1                                                  75128
           L   R1,APARM       LOAD POINTER TO JOL'S PARM        80290
           L   R1,0(R1)       LOAD THE ADDRESS OF JOL'S PARM    80290
           LA  R1,0(R1)       DROP HIGH ORDER BITS              80290
           LR  R0,R1          PUT IT IN R0                      80290
           LA  R1,#TKNSTRG    ADDRESS TO MOVE IT TOO            80290
           BAL R14,MOVEDATA   SHIFT IT TO TKNSTRG               80290
         $LINK UJP95INI       SET UP OPTIONS FROM PARM FIELD      75128
*                              AND FIX UP SYMBOLIC PARAMETERS
           $LINK  UJP94INI       SET UP %SYSTEM ETC
           B   P00DCDPM
P00EOF   JOLERR 401,'NO STATEMENTS FOUND TO EXECUTE'
P00RETNF   EQU *
*
* CRITICAL ERROR HAS OCCURRED SOMEWHERE :- SKIP TILL EOF | * JOL;
*
*
         L     R1,AP52DCBS                                  FIX-X-76200
         USING P52DCBS,R1                                   FIX-X-76200
         L     R14,ASYSIN     LOAD SYSIN DCB                FIX-X-76200
         ST    R1,CURRDCB     STORE IN CURRENT DCB          FIX-X-76200
         MVI   CP,X'7F'       SET CURRENT CHAR POINTER      FIX-X-76200
*                             VERY HIGH (GET NEW CARD)      FIX-X-76200
         SPACE 2                                            FIX-X-76200
* NOW ENTER SKIP LOOP.                                      FIX-X-76200
         DROP  R1                                           FIX-X-76200
P00SKIPZ $CALL UJP50RD                                      FIX-X-76200
         B     *+4(R15)                                     FIX-X-76200
         B     P00SKIPZ       ORDINARY STMT READ            FIX-X-76200
         B     P00SKIPZ       SYSIN                         FIX-X-76200
         B     P00GOBAK      * JOL                          FIX-X-76200
         B     P00GOBAK       EOF;                          FIX-X-76200
         B     P00SKIPZ       ANOTHER ERROR                 FIX-X-76200
         SPACE 2                                            FIX-X-76200
P00GOBAK EQU   *                                            FIX-X-76200
         SPACE 3                                            FIX-X-76200
 JOLRETN RC=16
P00DCDPM   EQU *
* NOW WITH GREAT FORTITUDE AND AN EQUAL AMOUNT OF GUSTO GET THE VERY
*    FIRST STATEMENT OF THE POOR GUYS JOB (WHY POOR?ANYONE SO LUCKY
*    TO BE USING JOL IS INDEED LUCKY)
           IFVALUE CARD,P002
           MVI CP,X'7F'
           $CALL UJP50RD          READ CARD 1
         CH  R15,=H'8'                                            75311
         BNE P00GOTIN                                             75311
         $CALL UJP50RD        SKIP RC=8                           75311
P002     EQU   *
         L     R1,APRINTLN
         MVC   5(80,R1),CARD  * OPTIONS CARD                      75128
         MVC   0(4,R1),=AL2(84,0)                                 75128
         MVI   4(R1),C'0'     SKIP LINE BEFORE PRINTING           75128
         JOLPRINT                                                 75128
         L     R1,APRINTLN    RELOAD ADDRESS OF PRINT BUFFER      75128
         MVI   1(R1),9        SET RECORD LENGTH TO 9              75128
         JOLPRINT             OUTPUT BLANK LINE                   75128
           MVC TITLE1,CARD
         $CALL UJP50RD        SET UP *JOL STMT
         LR    R0,R2     TELLS UJP95INI NOT TO CLEAR WORK LOCNS   75128
         $LINK UJP95INI       SET UP OPTIONS FROM * JOL CARD      75128
           $LINK  UJP94INI   RESET %SYSTEM ETC AGAIN IF NEC       75128
           B P00MAIN                                              75311
* THIS IS THE MAIN LINE FOR THE PRE-PROCESSOR OF JOL
P00SPLIT  $CALL UJSPLIT        SPLIT INTO TOKENS                  74303
           B  P00DECOD
           SPACE 3
***********************************************************************
*
* A DESCRIPTION OF THE IF,ELSE ETC FOLLOWS:-
*
*P00CLRC:                     /*AFTER ANY INSRUCTION              76200
*                               OTHER THAN DO,END,MACRO */        76200
*                                                                 76200
*          READ NEXT INSTRUCTION;                                 76200
*          IF  RC(15)>=0, GO TO NON-ZERO PROCESSING;              76200
*          IF  ELSE, DO;                                          76200
********                                                          76200
*      *                                                          76200
* ELSE *                                                          76200
*  (1) *                                                          76200
********                                                          76200
*              IF ? LOOP, OP ELSE, GO TO CLEAR-COND;              76200
*              ELSE GO TO CLEAR COND                              76200
*                                                                 76200
*         END;                                                    76200
**************                                                    76200
*             *                                                   76200
* CLEAR COND *                                                    76200
*            *                                                    76200
**************                                                    76200
*          CLEAR 0(R4) (COND)                                     76200
*          GO TO P00GOTIN;                                        76200
*                              /* 'COND' CONTAINS A SERIES OF
*                              ENTRIES INDICATING THE STATUS OF
*                              THE INSTRUCTIONS.
*                              0(R4)='T' IF LAST IF WAS TRUE
*                              0(R4)='?' IF LAST INSTRUCTION (AND IF)
*                               WAS AN EXECUTE TIME IF
*
*P00MAIN:
*P00READ:  READ NEXT INSTRUCTION.
*P00GOTIN:                                                        76200
*          SET R4=((LEVEL*8)+NEST) CALC LAST COND ENTRY ADDRESS.
*******                            SO WE CAN MARK 'T' | 'Q'
*  IF *    IF PROCESSING ....
*******
*          IF FOUND.
*
*          CALL IF_PROCESSOR
*              IF TRUE ? YES, 0(R4)='T', GO TO P00READ;
*
*              IF FALSE ? YES,IF 0(R4)='?', OUTPUT 'END' TO COMPILER.
*                  CLEAR 0(R4)
*                  GO TO P00READ
*
*              IF'?' ?, YES, SET 0(R4)='?', GO TO P00READ.
*
***********
*         *
* NOT IF  *
*         *
***********
*
*          ARE THERE ANY '?' IN THIS LEVEL OF 'COND' ?
*              YES -> P00THISQ  /* IF A=0 THEN RUN TYPE STATEMENT */
*
*          IS IT AN 'ELSE' , NO -> P00TDO  /* TEST IF 'DO' */
*
********
*      *
* ELSE *
*      *
********
*
*          IF COND (0(R4))='T', CLEAR IT
*          IF  0(R4)='T' |' ' THEN CLEAR 0(R4), GO TO SKIP_TILL_'END'
*          SIGNAL ERROR, -> P00MAIN
*
************
*          *
* NOT ELSE *   GO TO P00TDO    /* TEST IF 'D0', ETC */
*          *
************
*
*P00THISQ:     /* THIS IS IN A '?' LOOP, IE AFTER EXECUTION 'IF' */
*
*          IS THIS A JOL INSTRUCTION ?
*          NO: FIND MACRO, -> P00MAIN
*          YES:
*
*P00ISJOL: OUTPUT TO NEXT PHASE;
*
*P00TDO:   IS THIS A 'D0' ? YES, ADD 1 TO NEST,-> P00READ
* (2)  *                                                          76200
*          NO,-> P00TFALS
*
*          YES, END...
*******
*     *
* END *
*     *
*******
*
*          SET NEST=NEST-1;
*          IF NEST>0, CLEAR -1(R4), GO TO P00READ
*    /* END MACRO */
*          RESET NEST
*          CLEAR -1(R4)
*          REORG SYMBOLIC NAME TABLE
*          OUTPUT END STATEMENT TO COMPILER
*          GO TO P00READ (MAIN-LINE)
*
***********
*         *
* NOT END *
*         *
***********
*
*          ANY IN THIS LEVEL=?, YES GO TO P00CLRC (INSTRUCTION ALREADY
*                                              OUTPUT TO NEXT PHASE)
*
*          PERFORM INSTRUCTION
*          GO TO P00CLRC
*
*
***********************************************************************
P00CLRC  EQU   *                                                  75128
         SPACE 2                                         JOL30021 76200
         $CALL UJP50RD        GET NEXT STATEMENT         JOL30021 76200
         LTR   R15,R15        GET IT OK ?                JOL30021 76200
         BNZ   P00R1(R15)     IF NOT, BRANCH TO RTN      JOL30021 76200
         CLC   =C'ELSE ',TKN  ELSE ?                     JOL30021 76200
         BNE   P00CLRCD       NOPE, CLEAR CODE           JOL30021 76200
* CHECK IF WE ARE IN A 'Q' LOOP THEN                     JOL30021 76200
         LR    R15,R4         SET R15 TO STOP ADDRESS    JOL30021 76200
         LA    R14,1          SET R14 TO 1               JOL30021 76200
         LH    R7,LEVEL       R7=LEVEL                   JOL30021 76200
         SLL   R7,3           MULT BY 8                  JOL30021 76200
         LA    R7,COND(R7)                               JOL30021 76200
         CLI   0(R7),C'?'     ?                          JOL30021 76200
         BE    P00QELSO       YES                        JOL30021 76200
         BXLE  R7,R14,*-8     ROUND LOOP                 JOL30021 76200
         B     P00CLRCD       NO '?'-> CLEAR COND        JOL30021 76200
         SPACE 1                                         JOL30021 76200
* OUTPUT 'ELSE' TO NEXT PHASE THEN                       JOL30021 76200
P00QELSO     EQU  *
         $CALL UJP90OP        0P                         JOL30021 76200
         B     P00MAIN        GO TO GET NEXT INSTRUCTION JOL30021 76200
         SPACE 2                                         JOL30021 76200
P00CLRCD MVI   0(R4),C' '     CLEAR COND                 JOL30021 76200
         B     P00DECOD       DECODE STATEMENT AS USUAL  JOL30021 76200
         SPACE 2                                         JOL30021 76200
P00MAIN  EQU   *                                                  75128
P00READ    EQU  *
        $CALL  UJP50RD        READ NEXT STATEMENT                 75128
P00GOTIN EQU   *                                                  75128
           B   P00R1(R15)
P00R1      B   P00DECOD        ORDINARY RETURN,GO PROCESS IT MAN
           B   P00SYSDT        SYSIN DATA FOUNDGO PROCESS IT MAN
           B   P00RETN0        NEW JOB
           B   P00RETN0        EOF
            B P00READ   ********* SKIP IT ERROR ****              76200
           B   P00RETNF        ERROR SOMEWHERE LOWER DOWN,SO I'LL SEND
*                              THE 16 BACK ON UP THE LINE AND THIS
*                              GUYS JOB WILL BE TERMINATED RATHER
*                              ABRUPTLY,I THINK
P00RETN0   EQU *
         IFNULL LEVEL,NEST,P00RETNX                               75128
         JOLERR 409,'INSUFFICENT END STATEMENTS FOUND'            75128
         SPACE 3                                                  75128
P00RETNX MVC   #TKN,=H'-1'    MUST WRITE OUT LAST BUFFER,SET REC-V75128
         L     R0,APRCNTL     ** SO, GET ADDRESS CONTROL AREA     75128
         LA    R1,#TKN        ** AND THE RECORD WITH -VE LENGTH   75128
        $CALL  UJS30OP        ** CALL OP ROUTINE                  75128
         SPACE 3                                                  75128
           JOLRETN
           SPACE 3
P00SYSDT   EQU *
* THE DECLARE STATEMENT PROCESS SHOULD HAVE DEALT WITH THIS AND SO
*    I GUESS THIS DATA IS INVALID (IN FACT I'M SURE IT IS)
         JOLERR 302,'INVALID SYSIN FOUND'
* NOTE: THIS CODE WILL NOT BE ENTERED IF THE OPTION TO USE BLANKS 74303
*          IN COLUMNS 1 & 2 IS USED. IF AN INVALID DATA SET (SYSIN74303
*          ) IS FOUND,IT WILL COME UP AS A NUMBER OF ERRORS       74303
*          BECAUSE JOL WILL NOT RECOGNISE THE STATEMENT,OR IT WILL74303
*          BE TOO LONG ETC                                        74303
P00SKIPL   XC CP,CP
          $CALL UJP52CRD
           CH  R15,=H'4'       SYSIN DATA STILL ?
           BE  P00SKIPL
           B   P00R1(R15)
P00DECOD   EQU *
* WELL EVERYBODY FINALLY THERE IS A STATEMENT HERE FOR EVERYONE ELSE
*    TO HAVE A LOOK AT.
           LH  R4,LEVEL        LEVEL INDICATOR
           SLL R4,3            *8 (WE ALLOW 8 NESTS PER LEVEL)
           AH  R4,NEST
           LA R4,COND(R4)
           CLC =C'IF ',TKN     IS IT AN 'IF'?
         BNE   P00TOTHR       NO,SEE WHAT IT IS                   75128
          $CALL UJP04IF
           B  P00IFRT(R15)
P00IFRT    B   P00IFTRU
           B   P00IFALS
           B   P00IFQU
           B   P00IFERR
           B   P00IFERR
           B   P00IFERR
P00IFTRU    EQU  *
              MVI  0(R4),C'T'   SET TRUE                          75128
           B  P00READ          GO READ NEW STATEMENT
           SPACE
*                                                                 75128
* THIS NEXT LUMP OF CODE HANDLES IF STATEMENTS, AND TRUE ELSES.   75128
*   NOTE:- WHEN THE READ MODULE FINDS AN 'ELSE', IT ONLY TRANFERS 75128
*        THE ELSE, AND LEAVES THE REST OF THE STATEMENT           75128
*        TO BE READ THE NEXT TIME THE READ MODULE IS CALLED.      75128
*                                                                 75128
* NOW THE CODE BASICALLY GOES LIKE THIS:-                         75128
* P00FALS:     HAVE WE BEEN OUTPUTTING A '?' IF ?                 75128
*              YES, OP DUMMY ';' FOR NEXT PHASE                   75128
*                                                                 75128
* P00IFRD1:    READ NEXT INSTRUCTION                              75128
*              IS IT ANOTHER 'IF' ? YES -> P00IFRD1 (READ NEXT)   75128
*              IS IT A 'D0' ?                                     75128
*                   YES, GO INTO SKIP PHASE TILL MATCHING 'END'   75128
*  /* NOW AT THIS STAGE WE HAVE THE NEXT INSTRUCTION, AND         75128
*        REMEMBER THAT THIS IS A FALSE IF. SO, WE MUST SKIP
*        THIS INSTRUCTION, BUT WE WANT TO SEE IF THE NEXT         75128
*        ONE IS AN ELSE */                                        75128
*                                                                 75128
* P00IFRD3:    READ NEXT;                                         75128
*                                                                 75128
*              IS IT 'ELSE' ?  YES, MUST BE TRUE, GO TO P00MAIN,  75128
*                   WHICH WILL GET THE FOLLOWING INSTRUCTION, AND 75128
*                   ACT ON IT                                     75128
*              NOT ELSE, GO TO P00DECOD (DECODE, ACT ON STATEMENT)75128
*                                                                 75128
*                                                                 75128
* SO WE HAVE DONE A BIT OF THE IF. BUT WHAT IF THE  INSTRUCTION   75128
*        IS NOT AN 'IF'                                           75128
* OK....                                                          75128
*                                                                 75128
*                                                                 75128
* P00TOTHR:    ARE WE IN A '?' LOOP (IE IF EXECUTION LOGIC?)
*                   NO ->  IS IT ELSE ?
*                             YES, MUST BE FALSE, GO TO P00IFRD1,
*                                  WHICH SKIPS NEXT INSTRUCTION
*                                  OR GROUP OF INSTRUCTIONS
*                   YES, CHECK IF %X =, AND GIVE ERROR
*                   CHECK IF MACRO, AND GIVE CONTROL,
*                        OTHERWISE, IF PREPROCESSOR STATEMENT,
*                             DO IT NOW,
*                        OTHERWISE, MUST BE COMPILER STATEMENT,
*                             SO KICK IT OUT FOR NEXT PHASE.
*
* SO...
*  ON WITH IT
*
*
P00IFALS   EQU *
P00IFERR   EQU *
           CLI 0(R4),C'?'  HAVE WE BEEN OUTPUTTING SO FAR AND NOW
*                          HIT A FALSE ? IF SO OUTPUT A NULL
           BNE P00IFRD1                                           75128
           MVC #TKNSTRG,=H'1'
           MVI TKNSTRG,C';'
          $CALL UJP90OP
P00IFRD1  $CALL UJP50RD
           LTR R15,R15
           BNZ P00R1(R15)      FIX EOF ETC
* TEST IF THIS IS AN IF THEN,IF THEN SITUATION
           CLC =C'IF ',ICOMMAND
           BE  P00IFRD1
         BAL   R10,P00TSYS    TEST IF DCL SYSIN
         LTR   R15,R15
         BZ    P00TDO01
*OK WE HAVE SYSIN HERE.
         XC    CP,CP
P00CSKC1 $CALL UJP52CRD       READ A SYSIN CARD
         CH    R15,=H'4'      CARD STILL?
         BE    P00CSKC1
*SKIPPED ALL THE CARDS THEN
         B     P00TELSE
P00TDO01 CLC =C'DO ',ICOMMAND
         BNE   P00TELSE                                           75128
         BAL   R10,P00TKN2    TEST IF NEXT TOKEN ' ' / ISSUE ERR  75128
* HERE IT IS A DO,AND WE MUST SKIP UNTIL A MATCHING END HAS BEEN
*     FOUND
P00SKIPF EQU   *                                                  75128
           LA  R4,1            NUMBER OF OUTSTANDING ENDS
P00IFRD2  $CALL UJP50RD        READ NEXT STATEMENT
         LTR   R15,R15                                            75311
         BNZ   P00R1(R15)                                         75311
         BAL   R10,P00TSYS    TEST IF SYSIN DCL
         LTR   R15,R15
         BNZ   P00CSKC2
           CH  R15,=H'4'       SYSIN ?
           BNE P00IFT15
P00CSKC2   XC  CP,CP
P00IFSKP  $CALL UJP52CRD       READ THE CARD
           CH  R15,=H'4'       STILL SYSIN ?
           BE  P00IFSKP
P00IFT15   LTR R15,R15
           BNZ P00R1(R15)
* NORMAL INSTRUCTION HERE
           CLC =C'END ',ICOMMAND
           BNE P00TDO2
         BAL   R10,P00TKN2    TEST IF NEXT TOKEN ' ' / ISSUE ERR  75128
           SH  R4,=H'1'        MATCHED ALL THE 'ENDS' ?
         BZ    P00TELSE                                           75128
P00TDO2    EQU *
           CLC =C'DO ',ICOMMAND
           BNE P00IFRD2
           LA  R4,1(R4)
           B   P00IFRD2
           SPACE 3
P00TELSE   EQU  *
        $CALL  UJP50RD        READ NEXT INSTRUCTION               75128
         LTR   R15,R15        GET IT OK ?                         75128
         BNZ   P00R1(R15)     NOPE,BRANCH ON R15                  75128
           CLC =C'ELSE ',TKN
         BNE   P00DECOD       NO,GO DECODE IT                     75128
* HERE THE ELSE HAS JUST GO TO BE TRUE, SO GO READ NEXT           75128
*  STATEMENT AND ACT ON IT.                                       75128
         B     P00MAIN                                            75128
         SPACE 3                                                  75128
P00IFQU  MVI   0(R4),C'?'     SET UP '?' INDICATOR                75128
         $CALL UJP90OP        OUTPUT 'IF' FOR COMPILER PHASE      75128
         B     P00MAIN        GO READ NEXT INSTRUCTION            75128
         SPACE 3                                                  75128
P00TOTHR   EQU  *              NOT IF OR ELSE,UNLESS IT WAS IN A '?'
*                              LOOP
* NOW SEE IF THE '?' CONDITION EXISTS
*** NOTE ***                                                      75128
* WE ONLY WANT TO CHECK FROM THIS LEVEL UP,COS OTHERWISE WE WILL  75128
*  RUN INTO TROUBLE IF USER SAYS;-                                75128
*        IF A=0 THEN SORT X TO Y;                                 75128
           LR  R15,R4
           LA  R14,1
           LH  R7,LEVEL
           SLL R7,3   * 8
           LA R7,COND(R7)
P00TQU2    CLI 0(R7),C'?'      ANY PREVIOUS '?'
           BE P00THISQ
           BXLE R7,R14,P00TQU2
* NOW IF THE THING HERE IS AN ELSE, IT JUST HAS TO BE             75128
*  FALSE, SO WE WILL BRANCH BACK TO THE 'IF' SKIP ROUTINE         75128
         CLC  =C'ELSE ',TKN     'ELSE'                            75128
         BE    P00CHKC9       OK,CHECK IF AFTER IF STATEMENT      75128
           B  P00TDO
P00CHKC9 CLI   0(R4),C'T'     AFTER 'IF' ?                        75128
         BE    P00CLREL
         CLI   0(R4),C' '
         BNE   P00ELSER       YES, GO TO ERRORROUTINE             75128
P00CLREL EQU *
         MVI  0(R4),C' '       CLEAR COND
         B    P00IFRD1         GO TO SKIP ROUTINE
P00ELSER  EQU *
         JOLERR 303,'ELSE IGNORED, AND NEXT INSTRUCTION(S)'       75128
         B     P00IFRD1                                           75128
  SPACE 3
P00THISQ   EQU  *
* JUST BEFORE OUTPUTTING TO THE NEXT PHASE CHECK IF THIS CONTRAPTION
*   IS AN ASSIGNMENT TO A SYMBOLIC PARAMETER AND IF SO GIVE THE POOR
*   OLD CHAP AN ERROR MESSAGE OF SOME DESCRIPTION
           CLI TKN,C'%'        SYMBOLIC REFERENCE ?
           BNE P00QOP          OUTPUT IT TO NEXT PHASE
           GETTKN NO=2
           CLI TKN,C'='        ASSIGNMENT ?
           BNE P00QOP          OUTPUT IT TO NEXT PHASE
         JOLERR 305,'SYMBOLIC ASSIGNMENT IN EXECUTION ''IF'' LOGIC'
         B   P00MAIN
P00QOP     EQU  *
* NOW BEFORE OUTPUTTING THIS INSTRUCTION TO THE NEXT PHASE
*     WE MUST SEE IF IT IS A MACRO,AND IF SO GIVE CONTROL TO
*     THE MACRO PROCESSOR
         L     R7,=V(PJOLINST) LOAD ADDRESS OF INSTRUCTION TABLE  75128
           LM R7,R9,0(R7)
P00TJOLI   CLC ICOMMAND,0(R7)    IS IT A JOL INSTRUCTION ?
           BE P00ISJOL
           BXLE R7,R8,P00TJOLI
* NOT A JOL INSTRUCTION
           B P00FINDM          GO FIND THE MACRO
           SPACE
P00ISJOL   EQU  *
          $CALL UJP90OP
P00TDO     CLC =C'DO ',TKN     OS IT A DO ?
           BNE P00TEND         TEST IF IT IS AN END
         BAL   R10,P00TKN2    TEST IF NEXT TOKEN ' ' / ISSUE ERR  75128
           LH  R1,NEST
           LA R1,1(R1)
           CH  R1,=H'8'        TOO MANY NESTS
           BH  P00DOERR
           STH  R1,NEST
           B  P00READ
P00DOERR JOLERR 404,'TOO MANY DO''S'
           B   P00READ
P00TEND     EQU *
           CLC =C'END ',TKN    IS IT END ?
           BNE  P00TFALS
         BAL   R10,P00TKN2    TEST IF NEXT TOKEN ' ' / ISSUE ERR  75128
           LH  R1,NEST
           SH  R1,=H'1'
           BM P00DROPL         REDUCE LEVEL BY 1
           STH R1,NEST
P00DROP4   BCTR R4,0           -1 FROM R4 TO CLEAR 0(R4)-1        75311
           B   P00CLRC         CLEAR 0(R4) NOW                    75311
P00DROPL   LH  R1,LEVEL
           SH  R1,=H'1'
           BM  P00LEVER
           STH R1,LEVEL
           LA R15,SAVENEST(R1) RESET THE ORIGINAL
           MVC NEST+1(1),0(R15) NEST
           SPACE 2
          $CALL UJS19RSM       RE-ORG SYMBOLIC PARAMETER TABLE    74303
*                                               AND DROP HIGH LEVEL
*                                               NAMES AND VALUES
          $CALL UJP90OP
*
* THE FOLLOWING CODE CORRECTS ERROR JOL30130. THIS ERROR (TOO     76200
*  MANY ENDS) IS DUE TO NOT RESETTING R4 AT MACRO END    J0L30130 76200
*  AND HENCE THE LAST 'Q' INDICATOR WAS NEVER GETTING    J0L30130 76200
*  CLEARED, IE IF THE NEXT INSTRUCTION AFTER A MACRO     J0L30130 76200
*  END IS ANOTHER END, IT WOULD INCORRECTLY  GET PASSED  J0L30130 76200
*  OUT TO THE COMPILER PHASE.                            J0L30130 76200
* WE WILL SIMPLY RESET R4 TO CORRECT THIS PROBLEM.       J0L30130 76200
*                                                        J0L30130 76200
         LH    R15,LEVEL      SET LEVEL                  J0L30130 76200
         SLL   R15,3          MULTIPLY BY 8              J0L30130 76200
         LA    R4,COND(R15)                              J0L30130 76200
         AH    R4,NEST                                   J0L30130 76200
         B     P00CLRC        GO TO MAIN-LINE            J0L30130 76200
P00LEVER JOLERR 306,'TOO MANY ENDS'
           B P00MAIN           GO BACK TO MAIN LINE
P00TFALS   EQU  *
* NOW SEE IF THE '?' CONDITION EXISTS
*** NOTE ***                                                      75128
* WE ONLY WANT TO CHECK FROM THIS LEVEL UP,COS OTHERWISE WE WILL  75128
*  RUN INTO TROUBLE IF USER SAYS;-                                75128
*        IF A=0 THEN SORT X TO Y;                                 75128
           LR  R15,R4
           LA  R14,1
           LH  R7,LEVEL
           SLL R7,3   * 8
           LA R7,COND(R7)
P00TQU5    CLI 0(R7),C'?'      ANY PREVIOUS '?'
           BE P00CLRC                                             75128
           BXLE R7,R14,P00TQU5
  SPACE 3
* WELL THAT WAS TRUE  SO CALL THE APPROPRIATE SKIP ROUTINES
* OK,NOW SEE IF THE 2ND TOKEN IS AN'=' SIGN
* NOTE ***                                                        75128
*                                                                 75128
*  DECLARE AND ASSIGNMENTS ARE SPECIAL BECAUSE WE DON'T WANT      75128
*  SYMBOLICS REPLACED BEFORE THEY ARE ACTIONED                    75128
*                                                                 75128
*                                                                 75128
           GETTKN NO=2
           CLI TKN,C'='
           BE  P00ASSIN
           GETTKN NO=1
           MVC ICOMMAND,TKN
           CLC =C'DCL ',TKN
           BE  P00DECLR
           CLC =C'DECLARE ',TKN
           BE  P00DECLR
           CLC =C'DEFINE ',TKN
           BE  P00DECLR
***************************************************************    DASD
*  THIS CHECK FOR A DISPLAY STATEMENT SHOULD STOP DOUBLE      *    DASD
*  REPLACEMENT OF SYMBOLICS                                   *    DASD
***************************************************************    DASD
           CLC =C'DISPLAY ',TKN                                    DASD
           BE  P00OP5                                              DASD
           CLC =C'TYPE ',TKN                                       DASD
           BE  P00OP5                                              DASD
           B   P00NODCL
P00DECLR   EQU  *
          $CALL UJP02DCL
           B P00CLRC           CLEAR COND AND GO TO READ
P00NODCL   EQU  *
           SPACE
P00FINDM   EQU   *
            $CALL UJS20REP,#TKNSTRG    *********
            B   XXXXXX                 *********
         $CALL UJS21FNC       PERFORM FUNCTIONS & REPLACE SYMS    75128
XXXXXX   EQU   *
         LA    R14,#TKNSTRG
         LH    R1,#WORK
         LA    R1,2(,R1)   ADJUST FOR PREFIX
         LR    R15,R1
         LA    R0,#WORK
         MVCL  R14,R0       MOVE THE DATA
         MVI   0(R14),C' '  ONE BLANK AFTER THE AREA
*          MVC #TKNSTRG(256),#WORK
*          MVC #TKNSTRG+256(256),#WORK+256
*          MVC #TKNSTRG+512(256),#WORK+512
*          MVC #TKNSTRG+768(234),#WORK+768
*          MVC #TKNSTRG+768+234(234),#WORK+768+234
*          MVC #TKNSTRG+768+234+234(234),#WORK+768+234+234
          $CALL UJSPLIT        SPLIT INTO TOKENS,PRINT ERRORS     74303
           GETTKN 1
           MVC ICOMMAND,TKN
* THERE IS NO REAL OPTION NOW BUT TO CALL THE APPROPRIATE ROUTINES
         L     R7,=V(PJOLINST) LOAD ADDRESS OF INSTRUCTION TABLE  75128
           LM  R7,R9,0(R7)
P00CALLL   CLC ICOMMAND,0(R7)
           BE  GOT00RTN
           BXLE R7,R8,P00CALLL
* DON'T KNOW WHAT THE INSTRUCTION WAS,BUT I DON'T LIKE IT.
           SPACE
           IFNULL ICOMMAND,P00CLRC  NULL INSTRUCTIONS ARE OK,NO ERROR
          $CALL UJP53MAC
           LTR R15,R15     MACRO PROCESSOR DEAL WITH IT ?
           BZ  P00MAIN         YES-CLEAR COND & -> READ           75311
         SPACE 3
         JOLERR 407,'''',ICOMMAND,''' IS AN INVALID INSTRUCTION'
           B P00CLRC           CLEAR COND AND GO TO READ
           SPACE 3
GOT00RTN   EQU *
* WELL I DID FIND SOME-ONE TO HANDLE THIS ROUTINE,SO I'LL GIVE HIM
*    CONTROL
           L   R15,12(R7)
         L     R15,0(R15)      LOAD PROCESSING ROUTINE ADDRESS    75128
P00RCALL   LTR  R15,R15                        WATCH FOR WXTRNS
           BZ P00OP5
         BALR  R14,R15        BRANCH AND LINK TO PROCESSING RTN   75128
           B P00CLRC           CLEAR COND AND GO TO READ
           SPACE 3
P00ASSIN   EQU *
* BEFORE HANDING CONTROL TO THE ASSIGNMENT ROUTINE,WE HAD BETTER MAKE
*    DEAD SURE THAT THIS IS A SYMBOLIC ASSIGNMENT,OLD FRUIT
           CLI ICOMMAND,C'%'   SYMBOLIC ASSIGNMENT ?
           BNE P00OP5          NO,HEAVE OUT TO NEXT PHASE
           L   R15,=V(UJP85ASN)
           B   P00RCALL        REAL CALL THAT LABEL SAYS
P00OP5    $CALL UJP90OP
           B P00CLRC
         SPACE 3
P00TKN2  EQU   *                                                  75128
* THIS SMALL ROUTINE CHECKS THAT AFTER A 'D0' | 'END' THAT THERE  75128
*  IS NO MORE DATA, THAT IS, THAT THERE WAS A SEMI-COLON FOLLOWING75128
         GETTKN 2                                                 75128
         CLI   TKN,C' '                                           75128
         BE    0(R10)         BACK TO CALLER                      75128
P00ERR81 GETTKN 2                                                 75128
P00ERR8  JOLERR 308,'EXCESS INFORMATION STARTING ''',#TKN,''' IGNORED'
         BR    R10
         SPACE   3
P00TSYS  EQU   *
         CLC   =C'DCL ',ICOMMAND
         BE    P00TSYSI
         CLC   =C'DEFINE ',ICOMMAND
         BE    P00TSYSI
         CLC   =C'DECLARE ',ICOMMAND
         BE    P00TSYSI
         B     P00R0
P00TSYSI GETTKN               3
         CLI   TKN,C'*'
         BE    P00R4
P00R0    SR    R15,R15
         BR    R10
P00R4    LA    R15,4
         BR    R10
         SPACE 3
         ENTRY UJP47EXI
UJP47EXI DS    0H                    EXIT INSTRUCTION
         MVI   EOFSYSIN,C'1'         TURN ON EOF ON SYSIN
         B     P00RETNF
         LTORG
         DC   140S(*)
         TITLE 'HANDLE EOF,'                                FIX-X 76200
UJP37EOF SR    R15,R15                                      FIX-X 76200
         ENTRY UJP37EOF                                           76200
         BR    R14                                          FIX-X 76200
         TITLE 'READ SYSIN CARD FILE'                       FIX-X 76200
           SPACE 3
UJP52CRD   CSECT                                                  74303
           MVI SYSINMDE,C'1'   TURN ON SYSIN MODE PROCESSING      74303
           USING UJP52CRD,R15                                     74303
           L   R15,AUJP52                                         84100
           BR  R15                                                74303
AUJP52     DC   A(UJP52CHR)
           LTORG                                                  74303
           DROP R15                                               74303
         TITLE 'GET NEXT CHARACTER FROM INPUT STREAM(S)'          86014
UJP52CHR CSECT                                                    86014
* NEW CODE IS INTRODUCED FOR FASTER INPUT. IT SAVES USING A       86014
*     SAVEAREA FOR NORMAL CHARACTER READS                         86014
* THIS ROUTINE RETURNS THE NEXT CHARACTER FROM FILE SYSIN         86014
         USING UJP52CHR,R15
         CLI   EOFSYSIN,C' '
         BNE   P52RC12        RETURN A 12
         CLI   SYSINMDE,C'1'  ARE WE IN SYSINMODE ?             74303
         BE    P52OLDRT
         L     R1,AJOLGEN
         USING GENDETS,R1
         CLC   CP,SM2         RUN OVER CARD BOUNDARY ?
         BNL   P52OLDRT
         LH    R1,CP          LOAD CURRENT CHARACTER POSITION
         LA    R15,CARD(R1)   GET ABSOLUTE ADDRESS CHAR WE WANT
         MVC   INCHAR,0(R15)  GET REQD CHARACTER
         LA    R1,1(R1)       ADD 1 TO CP
         STH   R1,CP          AND RESTORE
         SR    R15,R15
         BR    R14
P52RC12  MVI   EOFSYSIN,C'1'
         MVI   INCHAR,C' '
         LA    R15,12
         BR    R14
* HERE WE NEED TO GO TO THE FULL READ CHARACTER ROUTINE
P52OLDRT L     R15,=V(UJP52OLD)                                   86014
         BR    R15                                                74303
         DC    10S(*)
         LTORG
         DROP  R15                                                74303
         DROP  R1                                                 86014
           TITLE 'GET NEXT CHARACTER FROM INPUT STREAM(3)'
P52SAVE DSECT                                                      DASD
        DS    18F                                                  DASD
SAVEEODA DS AL3                        SAVE THE EODAD HERE       A DASD
P52SAVEL EQU *-P52SAVE                                             DASD
P52LNERR  DSECT ,                                                  DASD
P52LN#    DS    CL1        INVALID SKIP LINE #                     DASD
           JOLSAVE CSECT=UJP52OLD,SIZE=P52SAVEL                    DASD
           USING  P52SAVE,R13                                      DASD
* THIS ROUTINE RETURNS THE NEXT CHARCTER FROM FILE SYSIN
         L     R7,AJOLGEN                                         75128
         USING GENDETS,R7                                         75128
         L     R8,ADCBS                                           75128
         USING DCBS,R8                                            75128
           CLI  EOFSYSIN,C' '
           BNE  RETNBLAN
           CLI SYSINMDE,C'1'   ARE WE IN SYSINMODE ?              74303
           BE READCARD
P52GETCH   EQU *
           CLC CP,SM2          RUN OVER CARD BOUNDARY ?
           BL CARDOK           DON'T NEED TO GET A NEW ONE
READCARD   EQU *
* IF WE ARE USING SYSIN DCB,DO A GET,OTHERWISE TEST IF WE CAN
*    GET A NEW RECORD FROM THE CURRENT BLOCK AND IF NOT READ A
*    NEW ONE
           SPACE
         L     R4,AP52DCBS                                        75128
           USING P52DCBS,R4
         L     R5,AREADBUF                                        75128
           USING READAREA,R5
           LA  R15,SYSIN                                          74303
           FIX 'MAKE L ASYSIN'
           C   R15,CURRDCB                                        74303
           BE  P52GET
           SPACE
* WE ARE READING FROM A LIBRARY OF SOME SORT HERE
           SPACE
P52NEWRC EQU   *                                                  75128
           L   R1,ACURREC      LOAD ADDRESS OF CURRENT RECORD IN BLOCK
           L   R15,CURRDCB
           LTR R1,R1
           BZ P52READB
           USING IHADCB,R15
           TM  DCBRECFM,X'50'  VB ?
           BO  P52VB
* FB HERE
           LA  R14,READAREA    LOAD ADDRESS OF THE READAREA
           AH  R14,CURRBLKS    + LENGTH OF BLOCK
           CR  R1,R14          DO WE NEED A NEW BLOCK ?
           BNL P52READB        YEP,GO GET IT.                     74303
           SPACE 2
P52MUVFB    MVC CARD,0(R1)     MOVE THE RECORD IN (IT HAD BETTER BE
*                              80 BYTES AT THE MOMENT)
         MVC   CURRLREC,DCBLRECL   SAVE RECORD LENGTH FOR LATER   75128
           AH  R1,DCBLRECL     RESET NEXT RECORD POINTER
********* COULD READ THE NEXT BLOCK *******
           ST  R1,ACURREC
           B   P52TRECT        TEST IF JOL-CARD OR SYSIN ETC
           SPACE 3
P52VB      EQU *
* VARIABLE BLOCKED INPUT HERE
           MVC DCBLRECL,0(R1)  SHIFT CURRENT RECORD LENGTH TO WORK
*                              AREA SO WE DON'T GET 0C6'S
         CLC   =X'FFFF',DCBLRECL                                  75128
         BE    P52EOM                                             75128
         MVI   DCBLRECL,0    WIPE OUT ANT NEGATIVE LRECL           DASD
         MVC   CURRLREC,DCBLRECL SAVE LRECL FOR LATER    JOL30040 76200
           AH  R1,DCBLRECL     AND ADD
           LA  R14,READAREA    ADDRESS OF BLOCK
           AH  R14,CURRBLKS    + LENGTH OF BLOCK
           CR  R1,R14          RUN OVER END OF BLOCK ?
           BL  P52MUVVB        NO,DECOMPRESS VB RECORD
           BNE P52READB        YES, GO GET A NEW BLOCK
           MVI DCBLRECL,X'7F'                                     75128
           SPACE 3
P52MUVVB L     R0,ACURREC     SAVE  RECORD POINTER FIRST OF ALL   75128
* NOW VB RECORDS MAY BE 'COMPRESSED' RECORDS,THAT IS ANY SERIES OF
*    BLANKS FOUND MAY BE REPLACED BY A SERIES OF HEX CHARACTERS
*    OF LESS THAN X'40) (BLANK) AND RE-EXPANEDE UP TO LOOK LIKE
*    REAL CARD IMAGES
         ST    R1,ACURREC     RESET CURRENT RECORD POINTER        75128
           CLEAR CARD
         LH    R15,DCBLRECL   LOAD CURRENT LRECL                  75128
* NOW FIRST 4 BYTES ARE UNUSEABLE, AND IF THE FILE DCB IS         75128
*  NOT WORKFILE(SYSUT2), IT MUST BE A USER FILE WHICH WE ARE      75128
*  GOING TO ASSUME IS A TSO VB FILE, IE THE FIRST 8 BYTES HAVE    75128
*  A LINE NUMBER(WHICH WE DON'T WANT)                             75128
         LR   R14,R0         LOAD R14 WITH ADDRESS OF CURRENT REC.75128
         CLC   AWORKFIL+1(3),CURRDCB+1                            75128
         BNE   P52TSO                                             75128
* OK, ITS OUR WORKFILE, DO WHAT WE WILL WITH IT                   75128
         SH    R15,=H'5'      -4 VB OVERHEADS,-1 FOR EX MVC       75128
         BM    P52NEWRC       NULL RECORD (CAN HAPPEN I GUESS)    75128
         EX    R15,P52MVCVB   SHIFT 'CARD' TO CARD                75128
         B     P52TRECT       NOW TEST RECORD TYPE ETC            75128
P52TSO   SH    R15,=H'13'     -4 VB,-1 EX,-8 TSO LINE NUMBERS     75128
         BM    P52NEWRC                                           75128
         EX    R15,P52MVCTS   MOVE TSO RECORD                     75128
         B     P52TRECT       GO TEST RECORD TYPE                 75128
         SPACE 3                                                  75128
P52MVCVB MVC   CARD(*-*),4(R14)    OUR VB RECORD                  75128
P52MVCTS MVC   CARD(*-*),12(R14)   TSO VB RECORD                  75128
***********************************************************************
           SPACE 3
P52GET     MVC SYSIN+DCBEODA-IHADCB(3),=AL3(P52RETNF)
           GET SYSIN,CARD
           B   P52TRECT        TEST IF A JOL CARD OR SYSIN DATA
           SPACE 3
P52READB   EQU *
* APPARENTLY WE HAVE TO READ A NEW BLOCK
           SPACE
           L  R9,CURRDCB       LOAD DCB ADDR INTO 9
           DROP R15
           XC CALLAREA(24),CALLAREA                               74303
         MVC   SAVEEODA(3),DCBEODA-IHADCB(R9)      SAVE THE OLD EODAD
         MVC   DCBEODA-IHADCB(3,R9),=AL3(P52EOFLI) SHIFT IN EODAD
           READ CALLAREA,SF,(9),(5),MF=(E,CALLAREA)
           CHECK CALLAREA                                         74303
           SPACE 1                                                74303
P52GOTBL DS    0H                                                C DASD
* NOW FIND THE NUMBER OF BYTES READ ETC
           USING IHADCB,R9
           L   R1,CALLAREA+16  LOAD ADDRESS OF IOB                74303
           LH  R14,DCBBLKSI    GET NUMBER OF BYTES REQUESTED IN 'READ'
           SH  R14,14(R1)      -RESIDUAL COUNT=NUMBER BYTES READ
           STH R14,CURRBLKS    STORE IN CURRENT BLOCK-SIZE POSN
* IF VB SET 'ACURREC' TO READAREA+4 (TO SKIP BLKSIZE)
*    ELSE SET IT TO A(READAREA)
           ST  R5,ACURREC      ACURREC = A(READAREA)              74303
           TM  DCBRECFM,X'80'  VARIABLE?
         BNZ  READCARD        NO,SO GET NEXT CARD AS NORMAL
           MVC CURRBLKS(2),READAREA  JS FIX MVS PROBLEM     JS
           LA  R15,READAREA+4                                     74303
           ST  R15,ACURREC                                        74303
           B   READCARD
           SPACE 3
P52EOFLI   EQU *
         MVC   DCBEODA-IHADCB(3,R9),SAVEEODA       RESTORE THE EODAD
* FOUND END OF MEMBER CONDITION WHEN READ A BLOCK
*    FIRST OF ALL WE SHALL RESET THE ERROR INDICATORS SHICH
*    WOULD HAVE NO DOUBT BEEN SET BY THE EOF CONDITION
           NI  DCBCIND1,255-X'10'
           NI  DCBCIND2,255-X'10'
           NI  DCBIFLGS,255-B'11000000'
           SPACE
* NOW WE MUST 'DROP' THE LEVEL OF DCBS SO WE CAN GET BACK
*    TO THE NEXT HIGHER MACRO OR INCLUDE DATA SET.
P52EOM   EQU   *                                                  75128
           LH  R1,FILENO       CURRENT 'NEST'
           BCTR R1,0           -1                                 74303
           STH R1,FILENO
           LR  R14,R1
           MH  R14,=Y(SAVEDCBL)
           LA  R14,P52DCBS(R14)
           MVC CP+1(1),SAVECP-P52DCBS(R14) RESET CHARACTER POINTER75128
           MVC ACURREC,SAVEPOSN-P52DCBS(R14) AND CURRENT RECORD ADDR
           MVC CURRBLKS,SAVEBLKS-P52DCBS(R14) AND BLOCKSIZE
           MVC CURRDCB,SAVEDCB-P52DCBS(R14)  AND DCB
         MVC   CURRLREC+1(1),SAVELREC-P52DCBS(R14)        75128
           L   R1,CURRDCB
           LA  R15,SYSIN                                          74303
           FIX 'MAKE L ASYSIN'
           CR  R1,R15          HAVE WE DROPPED BACK TO THE SYSIN  74303
*                              FILE DCB ?
           BNE P52READ2
           MVC CARD,SAVECARD
           MVI PRINTIND,C' '   TURN ON PRINT IN 'COMPILE' LISTING
*                              COS IT MAY HAVE GOT TURNED OFF
*                              WHILE PROCESSING THE LAST MACRO
           B   P52GETCH
P52READ2   EQU *
*IF THIS MEMBER THAT WE ARE BACK TO IS NOT THE MACRO FILE,
*     WE MUST TURM OF THE PRINTIND FOR THE SECOND PHASE
           LA  R15,PROCLIB     PROCLIB DCB                        74303
           FIX 'MAKE L PROCLIB'
           CR  R15,R1          EQUAL ?                            74303
           BNE P52MACRO                                           74303
           MVI PRINTIND,C' '
P52MACRO   EQU  *
           L    R15,AWORKFIL    SEE IF THIS A SWITCH FOR THE       DASD
           CR   R15,R1          WORKFILE   ECT.. INVOKE O/P        DASD
           BE   P52WORK                                            DASD
           L  R15,ACURREC
         SH    R15,CURRLREC                                       75128
           ST R15,ACURREC
P52WORK    EQU   *                                                 DASD
           LR  R9,R1
         MVC   BLDLTTR,SAVETTR-P52DCBS(R14) RESET TTR OF LAST MACRO5128
         MVC   CURRCONC,BLDLTTR+3 SAVE CONCATENATION #   JOL30006 76200
         FIND  (9),BLDLTTR,C                                     75128
           XC CALLAREA(20),CALLAREA                               74303
           READ CALLAREA,SF,(9),(5),MF=(E,CALLAREA)
           CHECK CALLAREA
           CLI  CALLAREA,X'7F'                                    74303
           BNE  P52RESER
           FIX 'GET RID OF ABOVE TWO INSTRUCTIONS'
           L  R15,ACURREC
           MVC CARD,0(R15)
           L   R1,AWORKFIL   CHECK AGAIN FOR WORKFILE              DASD
           CR  R9,R1         IF SO DONT DISTURB THE RECORD         DASD
           BE  READCARD      POINTERS                              DASD
           LA R15,80(R15)
           ST R15,ACURREC
           B  P52GETCH
P52RESER   EQU  *
         JOLERR 501,'ERROR REPOSITIONING INPUT FILES'
*                              OR INCLUDE END
           CHECK  CALLAREA
           JOLRETN
P52TRECT   EQU *
* THE NEXT BIT OF CODE GOES LIKE:-                                74303
*    IF MACROLIB & CARD='**' THEN GOTO ISJOL2;                    74303
*    IF PARMCOL¬='' & PARMCOL=CARD THEN GOTO ISJOL2;              74303
*    IF SYSINMDE THEN GO TO ISDATA                                74303
           SPACE 1                                                74303
* WE ACCEPT MACROLIB & CARD='**' BECAUSE ALL JOL MACROS ARE       74303
*    CURRENTLY CODED THIS WAY                                     74303
           SPACE 1                                                74303
           LA  R1,2            PREPARE TO SET CP=2                74303
           LA  R15,MACRODCB                                       74303
           FIX 'MAKE LOAD'
           C   R15,CURRDCB     = ?                                74303
           BNE P52NMAC3        NOPE                               74303
*          CLC =X'00FF',CARD     COLS 1 & 2 ='**'
           CLC =C'**',CARD     COLS 1 & 2 ='**'                   74303
           BE  P52STRCP        YES,SET CP=2                       74303
P52NMAC3 CLC   PARMCOL,BLANKS PARMCOL='  '                        75128
         BE    P52TSYS9                                           75128
           CLC PARMCOL,CARD    PARMCOL¬='',SEE IF COLS 1 & 2=     74303
           BE  P52STRCP        YES,IS JOL,SET CP=2                74303
P52TSYS9   IFNULL SYSINMDE,P52SETCP CHECK IF SYSTN MODE NOW       74303
* NOW, HERE WE ARE IN SYSIN MODE (IE READING DATA CARDS) AND COLS 74303
*          1 AND 2 ARE ALLOWED TO BE ' ' OR USED BY THE PROGMR.   74303
*          THEREFORE,IT SEEMS POSSIBLE THAT THIS CARD IS A DATA   74303
*          CARD. BUT WE HAD BETTER CHECK IF IT IS 'EOF;'          74303
           CLC =C'EOF;',CARD                                      74303
           BNE P52ISDTA        YES,ASSUME DATA CARD HERE          74303
* HERE, EOF ON A DATA CARD FILE.                                  74303
           CLEAR SYSINMDE      TURN OFF SYSIN MODE.               74303
         B     P52ISJOL       HANDLE 'EOF' INSTRUCTION      FIX-X 76200
P52ISDTA   EQU *                                                  74303
* SYSIN DATA SET HERE
           JOLRETN RC=4        SYSIN RETURN CODE
P52ISJOL   EQU *               COLS 1 & 2 SIGNIFY JOL CARD        74303
P52SETCP   EQU *                                                  74303
           SR  R1,R1           SET R1=0                           74303
P52STRCP   STH R1,CP           STORE INTO CP                      74303
           CLEAR SYSINMDE
           LA  R1,CARD(R1)     HAVE A LOOK AT THE FIRST VALID     74303
*                              CHARACTER IN THE CARD              74303
           LA  R14,1
           LA  R15,CARD+71
         CLI   OPERATOR,X'FF'   IN COMMENT ?                       SOCO
         BE    P52OLDJB                                            SOCO
           CLI 0(R1),C'*'      IS IT '* JOL'                      74303
           BE  P52TJOL         WELL GO SEE,AT LEAST WE HAVE THE '*'
           B   P52OLDJB                                           74303
P52TJOL     CLC =C'JOL',0(R1)
           BE  JRETN8          RETURN A CODE OF 8 DIRECTLY,       74303
*                              NOT THROUGH A JOLRETN MACRO.       74303
           BXLE R1,R14,P52TJOL
           SPACE 2
P52OLDJB   EQU *                                                  74303
         CLI   TITLE1,C'*'    IS THERE AN '* JOL' IN THE TITLE?   75128
         BNE   P52TITOK                                           75128
         CLI   CARD,C'*'      IS THIS AN '* JOL' ?
         BE    P52TITOK
         MVC   TITLE1,CARD
P52TITOK EQU   *
         CLEAR THISPRNT
         LA    R1,CARD          POINT AT CARD BUFFER               DASD
         LA    R14,1            BXLE INCR                          DASD
         LA    R15,CARD+71      BXLE LIMIT                         DASD
P52CKBLN CLI   0(R1),C' '       NON-BLANK ?                        DASD
         BNE   P52GOTIT         YES, CHECK FOR CONTROL VERB        DASD
         BXLE  R1,R14,P52CKBLN  LOOK AT NEXT CHAR                  DASD
         B     P52CKPRT         ALL BLANK SO CONTINUE AS USUAL     DASD
         SPACE 2                                                   DASD
P52GOTIT CLC   =C'EJECT ',0(R1) IS IT EJECT ?                      DASD
         BNE   P52CKSKP         NO, GO CHECK SKIP                  DASD
         L     R1,APRINTLN                                         DASD
         MVI   4(R1),C'1'       SET CC TO EJECT PAGE               DASD
         B     P52SETLN         FINISH LINE                        DASD
         SPACE 1                                                   DASD
P52CKSKP CLC   =C'SKIP ',0(R1)  IS IT SKIP ?                       DASD
         BNE   P52CKPRT         NO, GO ON                          DASD
         LA    R1,5(R1)         POINT PAST SKIP, LOOK FOR #        DASD
P52SRCH# CLI   0(R1),C' '       GOT SOMETHING ?                    DASD
         BNE   P52CHK#          YES, CHECK FOR A #                 DASD
         BXLE  R1,R14,P52SRCH#  LOOK AT NEXT COLUMN                DASD
P52SKP1  L     R1,APRINTLN      ALL BLANK SO TREAT SKIP 1          DASD
         MVI   4(R1),C' '       SET CC TO SKIP 1                   DASD
P52SETLN MVC   0(4,R1),=AL2(6,0) SET LENGTH                        DASD
         MVI   5(R1),C' '       BLANK AFTER THE CC                 DASD
         JOLPRINT ,             OUTPUT THE LITTLE BUGGER           DASD
         B     READCARD         GO GET THE NEXT CARD               DASD
         SPACE 2                                                   DASD
P52CHK#  CLI   0(R1),C'1'       IS IT SKIP 1 ?                     DASD
         BE    P52SKP1          GO DO IT THEN                      DASD
         CLI   0(R1),C'2'       IS IT SKIP 2 ?                     DASD
         BNE   P52CKSK3         NO, GO CHECK FOR SKIP 3            DASD
         L     R1,APRINTLN                                         DASD
         MVI   4(R1),C'0'       SET CC TO DOUBLE SPACE             DASD
         B     P52SETLN         GO FINISH THE LINE                 DASD
         SPACE 2                                                   DASD
P52CKSK3 CLI   0(R1),C'3'       IS IT SKIP 3 ?                     DASD
         BNE   P52#ERR          NO, MUST BE AN ERROR               DASD
         L     R1,APRINTLN                                         DASD
         MVI   4(R1),C'-'       SET CC TO TRIPLE SPACE             DASD
         B     P52SETLN         GO FINISH THE PRINT LINE           DASD
         SPACE 2                                                   DASD
         USING P52LNERR,R1                                         DASD
P52#ERR  JOLERR 102,'INVALID NUMBER OF LINES TO SKIP - ''',        DASD*
               P52LN#,''' DEFAULTING TO SKIP 1'                    DASD
         B     P52SKP1                                             DASD
         SPACE 2
P52CKPRT EQU   *        COME HERE IF NOT EJECT AND NOT SKIP        DASD
           LA  R15,SYSIN                                          74303
           C   R15,CURRDCB                                        74303
           BE  P52PCARD
* NOW SEE IF WE ARE TO PRINT THIS 'CARD' BECAUSE IT DIDN'T
*     COME THROUGH THE PRIMARY INPUT STREAM
           LA  R15,PROCLIB     ARE WE LOOKING AT                  74303
           C   R15,CURRDCB     THE INCLUDE LIBRARY?               74303
           BNE P52MACL         NO,TIS THE MACRO LIBRARY
           TM  PARMPRNT,X'80'  DO WE PRINT 'INCLUDES' ?
           BZ  P52NPRT1        NO PRINT OFF INCLUDE LIBRARY REQD
           CLI LEVEL+1,0       IS LEVEL=0 (IE ARE WE IN A MACR0?) 75311
           BNE P52MACL         NOPE, SO DON'T PRINT MACRO INCLUDES75311
           B   P52PCARD        GO PRINT THE CARD
P52MACL    EQU *
* THE FOLLOWING CODES FIXES THIS PROBLEM:-                        76200
*  IF A MACRO OR INVOKE ROUTINE RETURNS 'MACRO; END;' AND         76200
*  THEN RETURNS OTHER STATEMENTS (QUITE ALLOWABLE), THEN          76200
*  THEY WILL NOT BE PRINTED. CURRENTLY, STANDARD USE A JOLOPT     76200
*  INSTRUCTION HERE, BUT THIS MEANS THAT THEY LOSE THE CURRENT    76200
*  PRINT STATUS AS THERE IS NO 'POP' LIKE ASSEMBLER.              76200
*                                                                 76200
*WE CAN COME HERE EVEN IF WE ARE USING AN 'INCLUDE' LIBRARY,      76200
*  SO LET'S RE-CHECK THAT ...                                     76200
*                                                                 76200
         C     R15,CURRDCB    INCLUDE LIBRARY ?                   76200
         BNE   P52TMPR        TEST IF MACRO TO PRINT.             76200
         CLI   LEVEL+1,0      IS LEVEL=0 ?                        76200
         BE    P52PCARD       YES, SO PRETEND THIS CAME FROM      76200
*                             SYSIN, AND SEE IF WE WANT TO        76200
*                             PRINT IT                            76200
P52TMPR  EQU   *                                                  76200
           TM  PARMPRNT,X'40'  PRINT MACROS ?
           BZ  P52NPRT1        NO
P52PCARD   EQU *
* WE HAVE 2 NEW OPTIONS TO COPE WITH HERE;
*    1. NOPRINT - NOLIST
*    2. FLAG
           TM  PARMPRNT,B'0000010' NOPRINT ?                      75311
           BO  P52NPRT1        YES, N0PRINT THEN                  75311
         L     R1,APRINTLN    GET A(PRINT BUFFER-LINE)            75128
         MVC   0(4,R1),=AL2(100,0)  SET VB RECORD LENGTH          75128
         MVC   10(4,R1),PRNTSTMT   MOVE IN PRINT STATEMENT NUMBER 75128
         MVC   19(80,R1),CARD      AND THE CARD TO BE PRINT       75128
* NOW TEST 'FLAG' OPTION                                          75311
*          IFNULL FLAGCOL,P52RPRIN FLAG=0,DO PRINT NOW.           7SOCO
         CLC   FLAGCOL,ZERO         ELIMIANTE THE RETURN           SOCO
         BE    P52RPRIN             CODE 8 IN THE ASSEMBLY         SOCO
* OK, THE FLAG OPTION IS IN USE, SO WE'D BETTER POP IN THE '*'    75311
*    AFTER SHIFTING THE STRING DOWN A BIT.                        75311
           LH  R14,FLAGCOL     LOAD FLAG COLUMN                   75311
           LA  R1,19(R1,R14)   CALC SPOT IN PRINT BUFFER TO PUT   75311
*                              THE '*'; THIS INDICATES END MARGIN 75311
           SPACE 1                                                75311
* NOW, THE '*' WILL WIPE OUT THE FIRST COLUMN OF THE FIELD, SO    75311
* WE HAVE TO SHIFT THE COLUMNS BACK AFTER WE PUT THE '*' IN.      75311
* SO...                                                           75311
           LNR R15,R14         LOAD NEG FLAGCOL                   75311
           LA  R15,79(R15)     =LENGTH OF FLAGCOL TO END OF CARD, 75311
*                              -1 FOR MVC EXECUTE                 75311
           LA  R14,CARD(R14)  R14-> DATA AFTER FLAGCOL NOW       75311
           MVI 0(R1),C'*'      '*' IN                             75311
           EX  R15,P52MVCFL    SHIFT REST BACK IN                 75311
P52RPRIN   EQU *                                                  75311
         JOLPRINT                  PRINT IT                       75128
         MVI   THISPRNT,C'1'      INDICATE THIS HAS BEEN PRINTED
         SPACE 3                                                  75128
P52NPRT1   EQU *
           IFNULL PRNTSTMT,FIXCP
           LA R1,CARD
           AH R1,SM3
            BCTR R1,0     BACKTRACK 1 CHARACTER        75049
           MVC INLINENO,0(R1)
           CLEAR PRNTSTMT
FIXCP      EQU  *
CARDOK     EQU *
           LH R1,CP            LOAD CURRENT CHARACTER POSITION
           LA R14,CARD(R1)     GET ABSOLUTE ADDRESS CHAR WE WANT
           MVC INCHAR,0(R14)   GET REQD CHARACTER
           LA R1,1(R1)         ADD 1 TO CP
           STH R1,CP           AND RESTORE
RETN       JOLRETN
RETNBLAN   EQU *
P52RETNF   MVI EOFSYSIN,C'1'
           MVI INCHAR,C' '
           JOLRETN RC=12
P52MVCFL   MVC 1(*-*,R1),0(R14) SHIFT DATA AFTER FLAG COL         75311
           DROP R9
           FIX 'MAKE LOAD'
           LTORG
           DC   80S(*)
         DROP  R7,R8                                              75128
READAREA DSECT
           TITLE 'START MACRO PROCESSOR ON ITS WAY'
P53SAVE  DSECT
         DS    18F
P53LABEL DS    CL8            LABEL SAVED HERE
P53INST  DS    CL8            INSTRUCTION SAVED HERE
P53SAVEL EQU   *-P53SAVE
           JOLSAVE CSECT=UJP53MAC,SIZE=P53SAVEL
           USING P53SAVE,R13
* A MACRO INSTRUCTION (I.E AN INSTRUCTION THAT IS NOT A KNOWN JOL
*    INSTRUCTION) HAS BEEN FOUND IN THE INPUT STREAM
           SPACE 3
           FIX 'SET %SYSSTMT FOR THE COMMAND LINE'
         USING P53SAVE,R13                                        75128
           LH  R1,LEVEL        ADD
           LA  R1,1(R1)            1
           CH  R1,=H'12'               TO                         82300
           BL  P53OK3                      LEVEL
         JOLERR 402,'TOO MANY LEVELS (IE CONCURRENTLY EXECUTING MACROS)*
               '
           B   P53RETNF            VET
P53OK3     EQU  *
* NOW LETS SET UP THE DCBS ETC SO THE NEXT READ WILL GET THE MEMBER
*    WE WANT
           GETTKN 1            GET THE MEMBER NAME
         MVC   P53INST,TKN    SAVE INSTRUCTION NAME
         MVC   P53LABEL,LABEL SAVE LABEL MACRO WAS CALLED WITH
          $CALL UJP54INC
           LTR R15,R15         DID WE FIND THE MEMBER (OR MACRO)?
           BZ  P53OK1          YES
           CH  R15,=H'4'      NO DATA RETURNED FROM INVOKED RTN?  75128
           BNE P53RETNF       NOPE,REAL ERROR                     75128
           JOLRETN  RC=0                                          75128
P53OK1     EQU *
         SPACE 3                                                  75128
* NOW WE MUST SAVE THIS INSTRUCTION SO THAT WE CAN RE-ANALISE IT  75128
*  AFTER THE PROTO-TYPE MACRO HAS BEEN SET UP                     75128
*                                                                 75128
         L     R1,AMACBUF     USE INSTREAM MACRO AREA TO SAVE THIS75128
         LA    R0,#TKNSTRG    LOAD ADDRESS OF WHERE DATA IS NOW   75128
         BAL   R14,MOVEDATA   SHIFT IT TO GOTTEN CORE             75128
* NOW OUTPUT IT TO THE NEXT PHASE SO THAT IT CAN BE PRINTED
*     NICELY
          $CALL UJP90OP OUTPUT TO COMPILER PHASE    75003
         SPACE 3                                                  75128
*                                                                 75128
*                                                                 75128
* AND WE MUST LET THE DECLARE AND ASSIGNMENT ROUTINES KNOW (IF WE
*    CALL THEM) THAT THEY ARE BEING CALLED BY A MACRO
           MVC ICOMMAND,=CL8'MACRO'
           MVI ISMACRO,C'1'
         L     R14,AJOLGEN                                        75128
         USING GENDETS,R14                                        75128
           TM PARMPRNT,X'20'   DO WE PRINT MACRO EXPANSIONS ?
         DROP  R14                                                75128
           BNZ P53RDXX         YES
           MVI PRINTIND,C'1'
P53RDXX    EQU  *
          $CALL UJP50RD        READ FROM MACLIB
          $CALL UJSPLIT        SPLIT INTO TOKENS                  74303
           GETTKN 1
           CLC =C'MACRO ',TKN
           BE  P53OK2
         JOLERR 301,'FIRST STATEMENT IS NOT A MACRO BUT ''',#TKN,      *
               ''''
           B  P53RETNF
           SP  PCKDSTMT,=P'1'  RESET STMT NO
P53RETNF   JOLRETN RC=16
P53OK2     EQU *
           SPACE 3
           LH  R1,LEVEL        ADD
           LA R15,SAVENEST(R1)
           MVC 0(1,R15),NEST+1
           XC NEST,NEST        CLEAR THIS NEW NEST FOR THE MACRO
           LA  R1,1(R1)            1
           STH R1,LEVEL
         SPACE 3                                                  75128
* NOW SET UP SOME SYMBOLICS THAT CAN BE REFERENCED BY THE MACRO   75128
*  WRITER                                                         75128
         SPACE 3                                                  75128
         LR    R7,R1          SAVE LEVEL NO                       75128
         MVC   SYMBOLIC,=CL8'SYSLABEL'
         MVC   WORK(8),P53LABEL GET LABEL WE WERE CALLED WITH     75128
         MVC   #WORK,=H'8'    SET LENGTH TO 8                     75128
         BAL  R14,DRPBWORK    DROP TRILING BLANKS                 75128
         $CALL UJP02DCL       STORE LABEL MACRO WAS CALLED WITH   75128
         MVC   WORK(8),P53INST    STORE NAME MACRO WAS CALLED WITH75128
         MVI  #WORK+1,8
         MVC   SYMBOLIC,=CL8'SYSMACNM' ** IT MAY BE AN ALIAS AND
         BAL  R14,DRPBWORK    DROP TRILING BLANKS                 75128
         $CALL UJP02DCL           ** A MACRO WRITER MAY LIKE TO   75128
         MVC   SYMBOLIC,=CL8'SYSSCMD'  ** KNOW THE NAME T'WAS CALLED
         MVI  #WORK+1,8
         BAL  R14,DRPBWORK    DROP TRILING BLANKS                 75128
         $CALL UJP02DCL           ** WITH
         MVI   #WORK+1,1
         MVC   SYMBOLIC(8),=CL8'SYSLEVEL'
         STC   R7,WORK
         OI    WORK,C'0'           EBSIDIC NOW
         $CALL UJP02DCL       STORE 'SYSLEVEL'                    75128
         SPACE 3
           SPACE 3
* NOW THE NEXT TASK IS TO SET UP THE MACRO DEFAULT (OR PARAMETER)
*    INFORMATION
* A MACRO HAS ACCESS TO ALL SYMBOLICS ETC THAT ARE NORMALLY
*    DECLARED BUT IF ANY ARE DECLARED IN THIS 'MACRO' THEN ONLY
*    LOWER LEVELS MAY ACCESS THE INFORMATION.
           SPACE 3
* A TYPICAL SORT OF DEFINITION COULD BE:-
*    MACNAME:MACRO(%A=,%B='ABCD');
* THIS NEXT PIECE OF CODE MERELY POPS THE %A IN THE NAME STACK
*    AND %B WITH ITS VALUE.
**** TWO NEW FEATURES TO HELP THE MACRO WRITER (7 OCT 1973)
******************************************************************
* OFTEN IT IS HIGHLY DESIRABLE TO KNOW IF THE USER CODED
*     AN ITEM,AND OTHER TIMES IT IS HELPFUL TO KNOW WHERE IT
*     WOULD HAVE BEEN IN THE %LIST
* AND SO:
*     IF SORT:MACRO(CYLS,%TAPE) WAS CODED (NOTE,NO = SIGNS)
*         THEN %CYLS = 0 IF NO CYLS WAS CODED BY THE USER
*             OR ELSE IT IS SET EQUAL TO THE %LIST NUMBER SO
*             THAT THE MACRO WRITER CAN EASILY GET TO THE PREVIOUS
*             (OR FOLLOWING) LIST ITEM
*         AND IF THE USER DID CODE TAPE THEN %TAPE='TAPE'
*             OTHER A NULL STRING
******************************************************************
           GETTKN 2
           CLI TKN,C'('
           BE  P53GET3
           CLI TKN,C' '
           BE  P53NODEF        NO DEFAULT DEFINITION
* HERE THE TOKEN IS NOT A ' ' OR A '(' SO ASSUMME IT TO BE THE
*    FIRST PART OF THE DEFINITION
           B   P53GOTS
P53GET3    GETTKN 3
P53GOTS    EQU *
           STH R1,TKNCURR
           CLI TKN,C')'        END ?
           BE  P53NODEF
* OK THEN,NOW WE SHOULD HAVE A VARIABLE NAME HERE.
           CLI TKNTYPE,2       NAME ?
           BE  P53IDNAM
           CLI TKNTYPE,0       <NUMBER> (MIGHT AS WELL LET THEM
*                              THROUGH).
           BE  P53NUM
         JOLERR 403,'SYMBOL ''',#TKN,''' INVALID IN MACRO PROTOTYPE'
           B  P53MOREP         SKIP AND ATTEMPT TO CARRY ON
P53IDNAM   EQU *
           CLI TKN,C'%'
           BE  P53NAMOK
P53NUM     EQU *
           MVC SYMBOLIC,TKN         SAVE NAME                     75128
           GETTKN TKNCURR      GET NEXT TOKEN
           CLI TKN,C'='        '=' ?
           BNE P53NAM1         NO,OK
         JOLERR 404,'NAME ''',SYMBOLIC,''' INVALID IN MACRO PROTOTYPE'
           B  P53MOREP         SKIP AND ATTEMPT TO CARRY ON
P53NAM1    EQU *
* HERE LIES A CYLS OR 2314 TYPE PROTOTYPE
           MVC #WORK(3),=XL3'000100'
          $CALL UJP02DCL
           B P53TMORE
P53NAMOK   EQU *
           MVC SYMBOLIC,TKN+1                                     75128
           GETTKN LOCN=TKNCURR
           CLI TKN,C'='
           BE  P53EQUOK
           MVC #WORK(3),=XL3'0001FF'  SET SPECIAL INDICATOR
*          STH R1,TKNCURR      SAVE NEXT TKN NUMBER     CVCMOD 80105
          $CALL UJP02DCL       STORE VALUE
           B   P53TMORE        GO AND TEST IF MORE VALUES
           SPACE
P53EQUOK   XC  #WORK,#WORK
           MVI WORK,C' '
           GETTKN (R1)         GET THE VALUE
           STH R1,TKNCURR
           CLI TKN,C','
           BE  P53NOVAL
           CLI TKN,C')'
           BE  P53NOVAL
           MVC #WORK(L'TKN+2),#TKN
           GETTKN (1)          GET NEXT
           STH R1,TKNCURR
* NOW HE COULD HAVE CODED %A=(1,2) ETC IN WHICH CASE WE SHALL
*    JOIN THEM ALL UP FOR HIM.
* ***** NOT NOW
P53NOVAL   EQU *
          $CALL UJP02DCL
* NOW ARE WE AT THE END,OR NOT OF THE PROTO-TYPE SET UP PHASE ?
P53TMORE   EQU *
           CLC TKNCURR,TKNNO
           BL  P53MOREP
           B   P53INSTX
P53MOREP   GETTKN TKNCURR
           CLI TKN,C','        COMMA HERE ?
           BNE P53GOTS
           STH R1,TKNCURR
           B  P53MOREP         SKIP THE COMMA
           B   P53GOTS
           SPACE 3
P53NODEF   EQU *
P53INSTX    EQU *
* NOW THE ORIGINAL INSTRUCTION MUST BE RESTORED FROM GOTTEN CORE  75128
*    AND ANY OVER-RIDES SET UP IN THE SYMBOLIC TABLE FOR VALUES THAT
*    WERE IN THE PROTO TYPE
         L     R0,AMACBUF                                         75128
         LA    R1,#TKNSTRG                                        75128
         BAL   R14,MOVEDATA        SHIFT STRING BACK              75128
          $CALL UJSPLIT                                           74303
           MVC TKNCURR,=H'2'
* NOW A FAIRLY FIDDLY TASK MUST BE PERFORMED
*    IN THE SYMBOLIC STACK,WE HAVE STORED ALL THE NAMES.
*    HOWEVER,THE MACRO CALLER MAY HAVE OVER-RIDDEN THE PROTO-TYPE
*    AND SO WE MUST DO THAT AND SET UP %LIST VALUES.
* FOR PARAMETERS TO BE PASSED AND NOT STORED AS %LIST ITEMS,THE
*    NAME MUST BE IN THE STACK,SO STARTING AT THE TOP OF THE STACK
*    FOR THAT LEVEL WE SHALL PROCEED GENTLY DOWN AND FIND THE
*    CORRESPONDING NAME IN THE TOKEN AREAS.
* IF WE FIND A PARAMETER LIKE'FIELDS=(1,72,CH,A)' WE FORM UP
*    THE BRACKETS AS ONE 'TOKEN' BEFORE STORING THEM
           ZAP P53NO,=P'0'     SET %LIST CNTR TO 0
           MVC TKNCURR,=H'2'   START AT 2ND SYMBOL
P53NEXTT   GETTKN TKNCURR
           STH  R1,TKNCURR
           CLI TKN,C' '        END OF TOKEN STRING ?
           BE  P53FIXDF        GO NOW AND SCAN THRU THE TABLE
*                              AND CHANGE ANY VALUES OF X'00' | X'FF'
*                              TO 0 OR '' (NULL) FOR THE NEW MACRO
*                              FEATURE
           CLI TKNTYPE,0       <NUMBER>
           BE  P53NUM5
           CLI TKNTYPE,2       <IDENTIFIER> ?
           BNE P53TCOM          NO TEST IF A COMMA
* NOW WE HAVE A TOKEN THAT IS AN <IDENTIFIER> AND WE MUST NOW SEE
*    IF IT IS A PARAMETER (KEYWORD) DECLARATION.
P53NUM5    EQU *
* NOTE **** WE LET NUMBERS THROUGH NOW.
           LH  R8,TKNCURR      SAVE START NO OF TOKEN COS WE MAY
*                              HAVE TO 'DELETE' THIS TOKEN LATER
*                              I.E NOT PUT IT IN AS A %LIST
* NOW SEARCH THE SYMBOLIC FOR THE NAME (AT THE SAME LEVEL)
*    WE START AT THE END OF THE TABLE
           L   R7,ASYMTBL      GET ADDRESS OF TABLE
           LH  R5,NOSYMS       NO SYMS SO FAR
           MH  R5,=H'12'       LENGTH OF TABLE ENTRIES
           AR   R5,R7          POINTS AT END OF STACK
           LH  R6,=H'-12'      INCREMENT
           USING SYMOVLY,R5
P53FSYM1   EQU  *
           CLC SYMLEVEL(1),LEVEL+1
           BNE P53NOTHR        NOT THERE,COS LEVEL NOT SAME
           CLC TKN(8),SYMNAME
           BE P53GOTS2
            BXH R5,R6,P53FSYM1
P53NOTHR   EQU  *
P53TCOM    EQU  *
           CLI TKN,C','
           BE P53NEXTT         SKIP COMMAS HERE
           SPACE
* OK,HERE EITHER THE NAME WAS NOT ALREADY IN THE SYMBOLIC TABLE
*     OR THIS IS A NUMBER ETC TO BE STORED AS %LIST
           AP P53NO,=P'1'
           MVC SYMBOLIC(4),=C'LIST'                               75128
           UNPK SYMBOLIC+4(4),P53NO
           OI  SYMBOLIC+7,C'0'
           B  P53FORML         FORM UP ( ) LIST IF NECESSARY
           SPACE 3
P53GOTS2   EQU *
           MVC SYMBOLIC,TKN       SAVE NAME FOR ASSIGNMENT ROUTINE
* NOW IF THE VALUE OF THE STRING IS X'00' | X'FF' WE MUST
*     CHANGE IT TO THE %LIST VALUE,OR THE TKN VALUE.
           L  R15,SYMADDR
           CLC =XL3'000100',0(R15)
           BE  P53MAKL         FIX UP THE LIST NUMBER
           CLC =XL3'0001FF',0(R15)
           BNE  P53EQLUP
* NOW THIS ONE MUST BE SET TO THE VALUE OF TOKEN (I.E ITSELF)
           MVC #WORK(L'TKN+2),#TKN
           B   P53OVRD1
           SPACE
P53MAKL    EQU *
* HERE WE MERELY STORE THE LIST NUMBER
           AP P53NO,=P'1'
           UNPK WORK(4),P53NO
           OI WORK+3,C'0'
           LA R1,4
P53TLNUM   CLI WORK,C'0'
           BNE P53LOK
           MVC WORK(4),WORK+1  DROP LEADING ZEROS
           BCT R1,P53TLNUM
P53LOK     EQU  *
           STH R1,#WORK
           B   P53OVRD1
* WE HAVE THE NAME.
*    NOW IF WE GET THE NEXT TOKEN AND SEE IF IT IS AN '=' (WE IGNORE)
P53EQLUP   EQU *
           GETTKN TKNCURR
           STH R1,TKNCURR
           CLI TKN,C'='
           BE P53EQLUP
           SPACE 3
P53FORML   EQU *
* TO EASE THE TASK FOR THE MACRO WRITER,IF THE VALUE STARTS WITH A
*     '(' WE JOIN THEM ALL UP UNTIL WE FIND A ')'
           MVC #WORK(L'TKN+2),#TKN SHIFT TO WORK FOR ASSIGNMENT ROUTINE
            CLI TKN,C'('        START LIST ?
         BNE   P53TDSN        GO TEST IF DSNAME THEN     CHG30014 76200
         MVC   #WORK(L'TKN),#TKN   OVER-WRITE '(' (LISTS DON'T    75128
*                                  GET THEM ANYMORE               75128
* HERE START OF LIST.
P53CONLT   GETTKN TKNCURR
           STH R1,TKNCURR
         CLI   TKN,C')'       END LIST ?                          75128
         BE    P53OVRD1       YES, DONT CONCATENATE ')'           75128
           ORG *-4                                                75311
           DC  X'47000000'                                        75311
         CLI   TKN,C' '       END ALL PARMS ?                     75128
         BE    P53OVRD1       YES -> OUT WE GO                    75128
P53CONCT EQU   *    CONTINUE CONCATENATION               CHG30014 76200
           LH   R14,#WORK
           LA  R15,WORK(R14)
           LH  R1,#TKN
            AR R14,R1
            CH R14,=AL2(L'WORK)
           BL   P53CONC
         JOLERR 405,'STRING TOO LONG'
           B   P53RETNF
P53CONC    STH R14,#WORK
           BCTR R1,0
           EX  R1,P53MVC1
*        B     P53CONLT                                           75128
           CLI TKN,C' '
           BE  P53OVRD1        END LIST IN FACT
           CLI TKN,C')'        END LIST ?
           BNE  P53CONLT                                          74303
         B     P53OVRD1       GO STORE VALUE             CHG30014 76200
         SPACE 4                                         CHG30014 76200
* NEW FOR RELEASE 3.1 :- JOIN UP DSNAME TYPE TOKENS      CHG30014 76200
P53TDSN  GETTKN TKNCURR       GET NEXT TOKEN             CHG30014 76200
         CLI   TKN,C'/'       PASSWORD COMING UP?        JCS OF KCP
         BE    P53SLASH       YEAH, JUST PASS IT ON      JCS OF KCP
         CLI   TKN,C'.'       '.'                        CHG30014 76200
         BNE   P53TBRA6                                  CHG30014 76200
* THIS TOKEN IS A '.' OR A '/'                           CHG30014 76200
P53SLASH DS    0H
         BAL   R14,CONCAT     CONCATENATE TO WORK        CHG30014 76200
         GETTKN (R1)                                     CHG30014 76200
         BAL   R14,CONCAT     CONCATENATE TOKEN AS WELL  CHG30014 76200
         STH   R1,TKNCURR     RESET POINTER              CHG30014 76200
         B     P53TDSN        GO SEE IF MORE.            CHG30014 76200
         SPACE 1                                         CHG30014 76200
P53TBRA6 CLI   TKN,C'('       START OF MBR OR GDG ?   U  CHG30014 76200
         BNE   P53OVRD1       NO, GO STORE               CHG30014 76200
         STH   R1,TKNCURR     RESET TOKEN POINTER        CHG30014 76200
         B     P53CONCT       CONCAT, THEN LOOK FOR ')'  CHG30014 76200
         SPACE 2                                         CHG30014 76200
P53OVRD1 CLC =C'LIST0',SYMBOLIC     %LIST MUST BE STORED WITH P02DCL
         BNE  P53ASN99                                            75311
         $CALL UJP02DCL                                           75311
         B    P53NEXTT                                            75311
P53ASN99 EQU  *                                                   75311
         $CALL UJP85ASN                                           75311
           B   P53NEXTT        AND BACK TO THE MAIN LOOP
           SPACE 3
P53FIXDF   EQU *
* NOW SCAN THE SYMBOLIC TABLE AGAIN AND CHANGE ANY X'00' | X'FF'
*     VALUE TO 0 OR '' (NULL)
           L  R7,ASYMTBL       ADDRESS OF TABLE
           LH R5,NOSYMS        NO OF SYMBOLICS
           MH R5,=H'12'        LENGTH ENTRIES IN TABLE
           AR R5,R7            POINTS TO END OF STACK
           LH R6,=H'-12'       INCREMENT
P53FSYM2   CLC SYMLEVEL(1),LEVEL+1
           BNE P53RETN0        LEVELS NOT THE SAME,SO RETURN
           L   R15,SYMADDR     GET ADDRESS OF VALUE OF SYMBOLIC
           CLC =XL3'000100',0(R15)
           BE  P53MAK0         CHANGE TO ZERO
           CLC =XL3'0001FF',0(R15)
           BE  P53MAKNL        CHANGE TO '' (NULL)
P53BXH2    BXH R5,R6,P53FSYM2
           B   P53RETN0
           SPACE 3
P53MAK0    MVC #WORK(3),=XL3'0001F0'
P53OVRD2   MVC SYMBOLIC,SYMNAME   SET NAME UP FOR ASSIGNMENT ROUTINE
          $CALL UJP85ASN
           B   P53BXH2
P53MAKNL   XC  #WORK(2),#WORK
           B   P53OVRD2
P53RETN0   EQU  *
         SPACE 3                                                  75128
* NOW JUST BEFORE WE RETURN, WE MUST SET UP %SYSNLIST WITH THE    75128
*  NUMBER OF %LIST ITEMS THAT WERE FOUND                          75128
         MVC   #WORK,=H'3'                                        75128
         UNPK  WORK(3),P53NO  NO OF %LIST ITEMS                   75128
         OI    WORK+2,C'0'                                        75128
         MVC   SYMBOLIC,=CL8'SYSNLIST'                            75128
         $CALL UJP02DCL                                           75128
           JOLRETN
           SPACE 3
P53MVC1    MVC 0(*-*,R15),TKN  EXECUTED ******
         LTORG
           DC   80S(*)
           JOLSAVE CSECT=UJP54INC
*    THIS MODULE HAS BEEN CALLED BY THE INCLUDE PROCESSOR WHEN AN
*          INCLUDE WAS FOUND, OR CALLED BY THE MACRO PROCESSOR.
* THE CURRENT CARD MUST BE SAVE (IN CASE THERE IS MORE INFORMATION
*    ON IT) AND WE MUST SAVE THE 'CHARACTER POINTER' (CP),THE TTR
*    AND ADDRESS IN THE CURRENT BLOCK SO WE CAN GET BACK TO WHERE
*    WE WERE IN THE INPUT STREAM WHEN WE HAVE FINISHED.
           SPACE 3
         L     R9,AP52DCBS    LOAD DCB SAVE AREAS                 75128
           USING P52DCBS,R9
         L     R7,ADCBS                                           75128
         USING DCBS,R7                                            75128
          MVC  BLDLLEN,=H'58'
          MVC  BLDLNO,=H'1'
           LH  R4,FILENO
           LA  R4,1(R4)
         CH    R4,=H'30'      TOO MANY LEVELS OR INCLUDES ?       82300
         FIX 'CHECK THIS'
           BL  P54OK1
         JOLERR 401,'TOO MANY ACTIVE MACROS/INCLUDES'
P54RETNF   JOLRETN RC=16
           SPACE 3
P54OK1     EQU *
* NOW LETS SEE WHERE WE ARE (TTR) WITH THE CURRENT DCB
           L   R5,CURRDCB
           LA  R1,SYSIN                                           74303
           FIX 'USE LOAD'
           CR  R5,R1                                              74303
           BE  P54INCX
           NOTE (5)
           LR  R6,R1           SAVE TTR RETURNED TO US
* IF CURRENT DCB IS THE WORKFILE DONT WORRY ABOUT THE
* CONCATENATION NUMBER    MAYBE ABEND 001 AND S300 WILL GO AWAY ?
          CLC AWORKFIL+1(3),CURRDCB+1  READING FROM WORKFILE ??
          BE  *+8                      BLAST AROUND IC
         IC    R6,CURRCONC    LOAD CURRENT CONCATENATION NUMBER   75128
* R6 NOW CONTAINS TTRK                                            75128
      SPACE 1
P54INCX   EQU   *
      SPACE 1
         SPACE 3                                                  75128
         MVC   BLDLNAME,ICOMMAND PREPARE FOR MACRO INVOCATION BUT-75128
         GETTKN  2  GET TKN 2 IN CASE ITS INVOKE | INCLUDE        75128
* NOW ARE WE INCLUDEING OR MACROING ?
           CLC =C'INCLUDE ',ICOMMAND
         BNE   P54TINV        NO, TEST INVOKE THEN                75128
         MVC   BLDLNAME,TKN   SHIFT INCLUDE MEMBER NAME           75128
         LA    R8,PROCLIB     LOAD PROCLIB DCB ADDRESS            75128
           FIX 'USE LOAD'
         BLDL  (8),BLDL       SEE IF ITS IN PROCLIB               75128
         B     *+4(R15)       BRANCH ON RETURN CODE TEST          75128
         B     P54GOTMB       GOT MEMBER,PREPARE TO START PROCESS 75128
         B     P54NOINC       NO THERE -> ISSUE ERROR MESSAGE     75128
         B     P54PERME       PERM I/O ERROR ON LIBRARY           75128
         SPACE 3                                                  75128
P54NOINC JOLERR 402,'CANNOT FIND MEMBER ''',BLDLNAME,''''
         JOLRETN RC=16        AND RETURN                          75128
P54TINV  CLC   =C'INVOKE ',ICOMMAND INVOKE THEN ?                 75128
         BE    P54INV                                             75128
* HERE TLS A MACRO INVOCATION                                     75128
         LA    R8,MACROLIB    GET MACRO DCB                       75128
         BLDL  MACROLIB,BLDL  SEE IF ITS IN THE MACRO LIB         75311
         B     *+4(R15)       BRANCH ON RETURN CODE               75128
         B     P54GOTMB       GOT MEMBER IN MACROLIB              75128
         B     P54TJOLL       NOT THERE, NOW TRY TO LOAD USERS    75128
*                             HARD CODE TO DEAL WITH IT           75128
         B     P54PERME       PERMANENT I/O ERROR ON A LIBRARY    75128
         SPACE 3                                                  75128
P54TJOLL L    R8,AJOLLOAD     LOAD DYNAMIC LOAD LIBRARY           75128
         BLDL  (R8),BLDL      TRY AGAIN                           75128
         B     *+4(R15)                                           75128
         B     P54GOTIN       GOT THE MACRO FROM THE INVOKE LIB   75128
         B     P54RETNF       NOT THERE,SO RETURN                 75128
         B     P54PERME       PERM ERROR ON LIBRARY               75128
           SPACE
P54PERME JOLERR 403,'PERM I/O ERR IN DIRECTORY LOOKING FOR ''',        *
               BLDLNAME,''''                                      75128
         WTO   'UJP54-03 * JOL LIBRARY HAS PERM I/O ERR *',      75128 *
               ROUTCDE=(11,2),DESC=6
           B   P54RETNF
           SPACE 3
P54INV   MVC   BLDLNAME,TKN   SET UP NAME OF ROUTINE TO INVOKE    75128
         L    R8,AJOLLOAD                                         75128
         BLDL  (8),BLDL                                  JOL30029 76200
         B     *+4(R15)                                           75128
         B     P54GOTIN                                           75128
         B     P54NOINV                                           75128
         B     P54PERME                                           75128
P54NOINV JOLERR 405,'MODULE ''',BLDLNAME,''' CANNOT BE INVOKED-ABSENT'
         JOLRETN RC=16                                            75128
         SPACE 3
P54GOTMB   EQU *
         BAL   R15,P54STRFI   STORE FILE INFORMATION              75128
P54DOFND  FIND (8),BLDLTTR,C  POINT TO CORRECT SPOT IN FILE  75128
P54RETN0 JOLRETN RC=0                                             75128
         SPACE 3                                                  75128
P54STRFI EQU   *                                                  75128
           STH R4,FILENO
* NOW IF WE ARE READING FROM SYSIN AT THE MOMENT,WE MUST SAVE THE
*    CARD THAT WE ARE LOOKING AT BECAUSE WE CAN'T RE-READ A CARD
*    CAN WE ?
           LA  R1,SYSIN                                           74303
           C   R1,CURRDCB                                         74303
           BNE P54NSYSI        NOT SYSIN SO DON'T WORRY
           MVC SAVECARD,CARD
           SPACE
P54NSYSI   EQU *
* NOW WE MUST STORE ODDS AND ENDS LIKE THE TTR WE JUST GOT ETC
           SH  R4,=H'1'
           BM  P54FILER
           MH  R4,=AL2(SAVEDCBL) GET POSN IN TABLE FOR ITEMS
            LA R4,P52DCBS(R4)  AND ADDRESS
*                              *********                           DASD
          MVI   INCHAR,C' '    STOP ERROR C-2241                   DASD
*                              *********                           DASD
           LH  R1,CP           *********                          74303
           BCTR R1,0           STOP ERROR C-0029                  74303
           STH R1,CP           *********                          74303
           MVC SAVECP-P52DCBS(,R4),CP+1                           75128
         MVC   SAVELREC-P52DCBS(,R4),CURRLREC+1                   75128
           MVC SAVEDCB-P52DCBS(,R4),CURRDCB
           MVC SAVEPOSN-P52DCBS(,R4),ACURREC
           MVC SAVEBLKS-P52DCBS(,R4),CURRBLKS
           ST  R6,SAVETTR-P52DCBS(R4)
         MVC   CURRCONC,BLDLTTR+3                                 75128
           SPACE 3
* NOW SET UP THE POINTERS ETC SUCH THAT WHEN THE READ ROUTINE IS
*    CALLED,AUTO-MAGICALLY A NEW BLOCK (FROM THE PROCLIB DCB) WILL
*    BE BROUGHT IN
           MVI CP,X'7F'        SET CURRENT CHARACTER POINTER HIGH
           XC  ACURREC,ACURREC
           XC  CURRBLKS,CURRBLKS
         ST    R8,CURRDCB                                         75128
         BR    R15            BACK TO CALLER                      75128
P54FILER JOLERR 504,'INTERNAL ERROR'
         JOLRETN RC=16
         SPACE 3
P54GOTIN EQU   *
* HERE WE HAVE FOUND THE USERS ROUTINE THAT IS TO HANDLE THE
*  INSTRUCTION.
* NOW WE CAN USE THE BUFFER AREA TO OUTPUT THE DETAILS THAT
*  THE USER IS GOING TO GIVE US.
         SPACE 3
* INITIALISE THE OUTPUT BUFFER
         SPACE 3
         L     R1,AMACBUF                                         75128
         MVC   0(2,R1),=AL2(4)
         XC    2(20,R1),2(R1)
         CLEAR P98TTR1             CLEAR FIRST TTR OF AREA TOO.   75128
         SPACE 3
**************************
* FOR NOW, WE WILL PASS THE FIRST PARAMETER TO THE CALLER,
* IE IF CODED WAS INVOKE X '123', WE WILL PASS THE 123 WITH
* OUT THE ''S ON. LATER, THIS MAY BE CAHNGED.
**************************
         GETTKN 1
         CLC  =C'INVOKE ',TKN
         BE  P543
         GETTKN 2
         B    P54DROP
P543     GETTKN 3
P54DROP  BAL  R14,DROPQUOT
         LA    R1,#TKN        LOAD ADDRESS OF TOKEN      JOL30028 76200
         ST    R1,DYNPARMS    STORE IN PARM AREA         JOL30028 76200
         MVI   DYNPARMS,X'80' SET HIGH ORDER BIT ON      JOL30028 76200
         LA    R1,DYNPARMS    SET R1 -> DYNPARMS         JOL30028 76200
         ST    R1,CALLAREA    SAVE                       JOL30028 76200
         B    P54LINK
         SPACE 3                                                  75128
* NOW WE HAVE A BIT OF FIDDLING TO DO BEFORE ACTUALLY INVOKING    75128
*  THE ROUTINE.                                                   75128
* ORIGINALLY, I THOUGHT IT WOULD BE IN ASSEMBLER, BUT WE MUST     75128
*  NOW MAKE ALLOWANCES FOR PL1, AND ALSO SOMEONE SUGGESTED        75128
*  THAT IT MIGHT BE A GOOD IDEA IF WE COULD ALLOW ANY NORMAL      75128
*  PROGRAM TO BE CALLED - SO WE HAVE A BIT OF FIDDLING TO DO      75128
*  FOR THAT.                                                      75128
* LETS SET UP WORK WITH A FEW VALUES.                             75128
         MVC   WORK(8),ICOMMAND    INVOKE | NAME OF ROUTINE       75128
         MVC   WORK+8(8),BLDLNAME  NAME OF ROUTINE                75128
         MVC   #WORK,=H'16'   AND SET THE LENGTH OF IT            75128
* NOW WE WANT TO SHIFT THE STRING ALONG, DROPPING THE INVOKE AND  75128
*  THE NAME OF THE ROUTINE CALLED
         GETTKN 1
         LH    R1,TKNDESC+4   LOAD OFFSET TO 2ND TOKEN            75128
         CLC   =C'INVOKE ',TKN                                    75128
         BNE   *+8                                                75128
         LH    R1,TKNDESC+8   LOAD OFFSET TO 3RD TOKEN            75128
* NOW WE WANT TO CALCULATE THE LENGTH OF THE STRING MINUS         75128
*  THE ONE | TWO TOKENS AT THE START OF THE STRING                75128
         LH    R15,#TKNSTRG   GET CURRENT LENGTH                  75128
         SR    R15,R1         - OFFSET TO TOKEN FOLLOWING         75128
         BNM   *+6            IF -VE, NOTOKENS, PASS ZERO PARMS   75128
         SR    R15,R15        CLEAR 15 THEN                       75128
         STH   R15,#TKNSTRG   RESET NEW LENGTH                    75128
* NOW TO SHIFT THE STRING UP. WE WILL USE THE 'MOVEDATA' ROUTINE. 75128
         LA    R15,#TKNSTRG(R1)                                   75128
         LR  R0,R15
         MVC   0(2,R15),#TKNSTRG   SHIFT LENGTH TO STRING-2       75128
         LH    R15,#TKNSTRG   LOAD LENGTH OF STRING               75128
         LA    R1,#TKNSTRG
         ST  R1,DYNPARMS
         BAL   R14,MOVEDATA       GO TO MOVEDATA ROUTINE
* WELL THE ABOVE ISN'T VERY PRETTY,BUT  ....
        $CALL  UJSPLIT        RE-SPLIT TOKENS
         LTR   R15,R15        DID WE ?
         BNZ   P54RETNF       NOPE -> (ERROR ALREADY GIVEN)
* NOW SET UP THE OTHER PARAMETERS, THEN LINK                      75128
* NOW WE CAN ALMOST DO THE LINK                                   75128
         LA    R1,DYNPARMS    POINT TO THE PARM AREA              75128
         OI    DYNPARMS,X'80' TELL ANY PROGRAM THAT DOESN'T KNOW  75128
*                             WHATS HAPPENING THAT THERE IS ONLY  75128
*                             ONE PARAMETER                       75128
P54LINK   TIME  BIN    GET CURRENT BINARY TIME                     DASD
          ST    R0,USER1    SAVE IN SAVE AREA                      DASD
         LA    R1,DYNPARMS    POINT TO THE PARM AREA               DASD
         LINK  DE=BLDLNAME,DCB=(8),SF=(E,CALLAREA)                 DASD
P54CHKRC EQU   *                                            FIX-X 76200
        ST     R15,USER3  SAVE R15                                 DASD
        TIME   BIN    GET CURRENT BIN YIME                         DASD
        C      R0,USER1   HAVE WE ROLLED BY MIDNITE                DASD
        BNL    *+8        IF NOT  LETS SKIP THE NEXT ADJ           DASD
        A      R0,=A(24*(360000))  ADD IN 24 HOURS                 DASD
        S      R0,USER1                                            DASD
        A      R0,USER5   ADD TO ACCUM                             DASD
        ST     R0,USER5   AND SAVE                                 DASD
        L      R0,USER4   LOAD CURRENT INVOKE COUNT                DASD
        A      R0,ONE    UP THE INVOKE CTR BY ONE                  DASD
        ST     R0,USER4                                            DASD
        L      R15,USER3  RELOAD REG 15                            DASD
         LTR   R15,R15                                            75128
         BZ    P54INVK0                                           75128
         JOLERR 406,'DYNAMIC LOADED MODULE RETURNED NON-ZERO' 75128
         JOLRETN RC=16
*P54LINK  LA    R15,BLDLNAME                                       DASD
*         ST    R15,CALLAREA                                       DASD
*         ST    R8,CALLAREA+4                                      DASD
*         LINK  EP=UJP38INV,SF=(E,CALLAREA+16),DCB=(8)             DASD
*         B   P54CHKRC    GO CHECK RETURN CODES.                   DASD
         SPACE 3                                                  75128
P54INVK0  LA   R8,WORKFILE     GET CORRECT FILE AS CURRENT    75128
* NOW CHECK THAT THE DYNAMIC ROUTINE DID PUT ANYTHING
* IN THE WORK DATA SET PROVIDED FOR IT.
         IFVALUE   P98TTR1,P54INVDT     GO HOME, DYNAMIC
         L   R1,AMACBUF   ANY DATA IN BLOCK READY TO GO?
         CLC 0(2,R1),=H'4'  IS THERE????
         BNE  P54INVDT
* HERE, MERELY RETURN A 4, NO DATA ON WORK FILE
         JOLRETN RC=4     TELLS P53 TO GO HOME TOO.
P54INVDT EQU  *
*                                  ROUTINE HAS DONE IT ALL        75128
         BAL   R15,P54STRFI   STORE CURRENT FILE INFORMATION      75128
         SPACE 1                                                  75128
* NOW BECAUSE THERE IS NO 'EOF' ON THE FILE, WE MUST PUT IN       75128
*  A X'FFFF' TO TELL THE READ ROUTINE IT HAS REACHED EOF          75128
         L     R1,AMACBUF                                         75128
         LH    R14,0(R1)      LOAD CURRENT LENGTH OF THE BLOCK    75128
         LA    R15,0(R1,R14)  CALC NEXT SPOT IN BLOCK             75128
         MVC   0(2,R15),=X'FFFF' SHIFT THE X'FFFF'                75128
         LA    R14,4(R14)     RESET LENGTH OF BLOCK               75128
         STH   R14,0(R1)      ** DONE                             75128
* NOW WE MUST OUTPUT THE BLOCK TO THE WORK FILE                   75128
         BAL   R14,OPBLOCK    OUTPUT THE BLOCK
         IFVALUE P98TTR1,P54SCUDC
         ST   R1,P98TTR1   SET 1ST TTR BLOCK
P54SCUDC MVC   BLDLTTR,P98TTR1 SHIFT IN NEW TTR THAT READ ROUTINES75128
*                             WILL USE TO START READING NEW RECORD75128
         MVC   CURRDCB,AWORKFIL AND TELL IT WHICH DCB TO USE      75128
         L     R8,AWORKFIL
*******************************************************************SOCO
* THIS CHANGE OF A BRANCH TO DO A FIND MACRO TO A POINT MACRO      SOCO
* SHOLUD FIX THE SYSTEM 001 ABEND CODE ON THE $$JWORK2 FILE.       SOCO
*******************************************************************SOCO
******************************                                     SOCO
******** B  P54DOFND *********                                     SOCO
         POINT (8),BLDLTTR     POINT TO FIRST WORK FILE BLOCK      SOCO
*                                                                  SOCO
         JOLRETN
           LTORG
           DC S(*),S(*),S(*)
         DC    S(*,*,*,*)
         DC    S(*,*,*,*)
         DC    S(*,*,*,*)
         DC    S(*,*,*,*)
         DC    S(*,*,*,*)
           DC  S(*,*,*,*)
           DC  S(*,*,*,*)
           DC  S(*,*,*,*)
           DC  S(*,*,*,*)
           DC  S(*,*,*,*)
           DC  S(*,*,*,*)
           DC  S(*,*,*,*)
           DC  S(*,*,*,*)
           DC  S(*,*,*,*)
           DC  S(*,*,*,*)
           DC  S(*,*,*,*)
          DROP  R7    DROP DCBS                                   75128
         SPACE 3
         JOLSAVE CSECT=UJP98OP                                    75128
* CSECT IS CALLED BY THE 'INVOKED' MODULE, AND IS RESPONSIBLE     75128
*  FOR STORING THE INVOKED MODULES OUTPUT IN 'WORKFILE' DATA SET  75128
         SPACE 2                                                  75128
* ON ENTRY R1 POINTS TO THE RECORD THAT THE USER HAS CREATED      75128
*  FOR US TO EXECUTE.                                             75128
***************************************************************    DASD
* MOD HERE TO ALLOW 80 BYTES RECORDS TO PASS FROM A INVOKE RTN*    DASD
* ALSO A ATTEMPT TO ALLOW A RECORD AS BIG AS THE INSTREAM     *    DASD
* BUFFER WAS TAKEN OUT---THE READ ROUTINE CHOPS IT OFF AT 72  *    DASD
***************************************************************    DASD
         L     R8,0(R1)       GET ADDRESS OF THE RECORD           75128
P98TRY2  L     R4,AMACBUF                                         75128
         LH    R5,0(R4)       LOAD CURRENT BLOCK LENGTH           75128
         LH   R9,0(R8)         LOAD LENGTH OF RECORD              75128
         LR    R6,R5          LOAD CURRENT BLOCK LENGTH TO R6,TOO 75128
         AR    R6,R9          ADD NEW BLOCK LENGTH                75128
         LH    R15,LMACBUF    GET LENGTH OF THE WORK BUFFER       75128
         SH    R15,=H'16'      -16,COS INEED SOME ROOM AT THE END 75128
*                             OF THE LAST BLOCK                   75128
*        CH    R15,0(R8)  WILL RECORD FIT ALL BY IT SELF  ??       DASD
*        BNH   P98BIG     WOW  LETS SPLIT                          DASD
         CR    R6,R15         WILL RECORD FIT ?                   75128
         BNH   P98MUV         NO                                  75128
* HERE WE MUST OUTPUT THE BLOCK                                   75128
         LR    R1,R4          TELL 'OPBLOCK' WHERE THE BLOCK IS   75128
*                             THAT HAS TO BE OUTPUT               75128
         BAL   R14,OPBLOCK                                        75128
         MVC   0(4,R4),=AL2(4,0)                                  75128
         CLC   P98TTR1,ZERO   HAS THE FIRST BLOCK BEEN OUTPUT ?   75128
         BNE   P98TRY2        YES, GO O/P RECORD AGAIN            75128
         ST    R1,P98TTR1     NO,SET UP FIRST BLOCK INDICATOR     75128
* WE ALSO HAVE TO UPDATE THE TTR POINTER IN THE OPBLOCK            DASD
* ROUTINE SO WE CAN WRITE OUT MULTIPLE BLOCKS                      DASD
        ST     R1,SYS1NEXT     UP THE BLOCK ADDRESS                DASD
         B     P98TRY2                                            75128
P98MUV   L     R4,AMACBUF                                         75128
*                             AS AN OUTPUT AREA
         LR    R5,R4          AND SAVE IT IN R5
         LR    R6,R9          SAVE RECORD LENGTH TO GO
         LR    R7,R6          SAVE IT IN R7 TOO
          CH    R6,=H'80'      > 80 BYTES ?                        DASD
          BNH   P98SMALL       NO,SO JUST OUTPUT IT                DASD
          LA    R6,80                                              DASD
P98SMALL LA    R6,3(R6)                                           75128
         AH    R5,0(R4)       CALC ADDRESS OF RECORD AREA         75128
         EX    R6,P98MVC                                          75128
*        LR   R0,R8      MOVE THIS GUY TO THE BUFFER               DASD
*        LR   R1,R5                                                DASD
*        LA   R1,2(R1)   TO HERE                                   DASD
*        BAL  R14,MOVEDATA                                         DASD
         LA    R6,1(R6)    +1 EX MVC ANDFOR RECORD DESC
         SLL   R6,16      ZERO BOTTOM BYTES
         ST    R6,AVTBLE   SAVE IT A SECOND IN UNUSED AREA
         MVC   0(4,R5),AVTBLE  SHIFT TO RECORD DESCRIPTOR
         LH    R1,0(R4)       LOAD BLOCK LENGTH                   75128
         AH    R1,AVTBLE      ADD RECSIZE                         75128
         STH   R1,0(R4)       RESET BLOCK LENGTH                  75128
         JOLRETN
P98MVC   MVC   2(*-*,R5),0(R8)                                75128DASD
*P98BIG  CVD  R15,DBL                                              DASD
*       UNPK OP(5),DBL                                             DASD
*       OI   OP+4,C'0'                                             DASD
*       MVC  #OP,=H'5'                                             DASD
*       JOLERR 401,'INVOKE ROUTINE RETURNED A RECORD LARGER THAN THE IN*
               STREAM BUFFER SIZE OF-->',#OP                       DASD
*         MVC #OP,=H'50'                                           DASD
*         MVC OP(50),2(R8) MOVE IN PART OF RECORD                  DASD
*         JOLERR 402,'RECORD ''',#OP,'''...ECT    DROPPED'         DASD
*       JOLRETN                                                    DASD
          LTORG
           DC  S(*,*,*,*)
           DC  S(*,*,*,*)
           DC  S(*,*,*,*)
           DC  S(*,*,*,*)
           DC  S(*,*,*,*)
           DC  S(*,*,*,*)
           PRINT OFF
         DCBD  DSORG=PS,DEVD=DA                                   75128
           PRINT ON,DATA
            LTORG
