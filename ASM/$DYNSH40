$DYNSH40 TITLE 'JOL DYNAMIC TRANSIENT SCHEDULER/INSTRUCTION HANDLER'
* TEMP MOD BY CVC TO COMPILE - FEB 2010
* JOL COPYRIGHT CLARKE COMPUTER SOFTWARE 1971,1972,1973,1974,1975,1976
* JOL COPYRIGHT CLARKE COMPUTER SOFTWARE 1980,1981,1982.
* JOL COPYRIGHT CCS-JOL PTY LTD 1985, 1986.
* REFER TO INSTRUCTIONS ON COPYRIGHT NOTICE FORM NO CCS-E001.
         SPACE 3
*                   J             000000            L
*                   J            0      0           L
*                   J           0        0          L
*                   J          0          0         L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*        J          J         0            0        L
*         J        J           0          0         L
*          J      J             0        0          L
*           J    J               0      0           L
*            JJJJ                 000000            LLLLLLLLLLL
           SPACE 3
* LAST SOURCE UPDATE MAR 1982 BY J SUMMERFIELD
*                                   OF KURRAWANG COMPUTER PROGRAMMING
*   CHANGES:-
*     1. OSIV/X8 SUPPORT
* LAST SOURCE UPDATE 26/8/1981   BY CVC.
*   CHANGES:-
*     1. FIX 800 BPI TAPE PROBLEM
*     2. ALLOW JOL TO USE PROGRAMS IN LPALIB
* FOLLOWING FIXES CODED, SEPT 7,1976
*
*CHG26028      PROVIDE SUPPORT FOR 'IF ERROR'
*CHG30002      AS ABOVE
*CHG30062      HIGHLIGHT ERROR MESSAGES ETC MORE
*JOL30112      PROVIDE SUPPORT FOR DELETE GDGALL
*JOL30114      ALLOW UP TO 5 LEVELS OF MACROS
*JOL30115      CLOSE FILES BEFORE ABENDING
*JOL30116      FIX DELETE TEMPORARY DATA-SETS
* ALSO UPDATE CAMLIST,SCRATCH ETC MACROS FOR VS RETURN CODES
********************************************************************
*
*            JOL EXECUTE 'INITIATOR/SCHEDULER'
*
*
*
*
*
*
* NOTE: MANY MACRO NAMES ARE THE SAME AS THOSE USED IN THE JOL
*     COMPILER,BUT THEIR GENERATED CODE DIFFERS VERY SLIGHTLY
*     FROM THE OTHER MODULES,EVEN THOUGH THE FUNCTION IS THE SAME
********************************************************************
           SPACE 1
***********************************************************************
*
*
* DUE TO THE FAILURE OF IBM JOBQ MANAGEMENT ROUTINES (EITHER TO MY
*    UNDERSTANGING OR IBM'S DOCUMENTATION) SOME 'EMERGENCY' TYPE
*    CODE ALTERATION IS GOING ON TO GET JOL TO FUNCTION UNDER
*    VS1. NOTE THAT MVS USES THE STANDARD IBM CODE.
*
* CODE MARCH 7,1976: ALL MARKED '*****' IN COLS 67-71
*    SEE ALSO  'UJEJOB' CSECT FOR CHANGES
*
***********************************************************************
           SPACE 3
           MACRO
           EYEBALL &A
          DC   0D'0',4CL8'&A'
           MEND
           SPACE 6
           MACRO
&NAME      JOLERR &STMT=STMT
.* THIS MACRO WILL PUT INTO A LOCATION A STRING OF CHARACTERS
.* THE STRING MAY BE IN A BUFFER OR JOL MAY ITSELF CONTROL
.*   THE WHERE-ABOUTS OF THE ERROR MESSAGE.
.*
.* SYSLIST(1) IS TAKEN TO BE THE ERROR SEVERITY AND ALSO THE
.*   ERROR NUMBER.
           LCLA &LITPOSN,&LITLEN
           LCLC &CSECT,&ERRNO
           LCLC &JOLERR,&CHAR1
           LCLA &LENGTH,&THIS,&NOVAR,&POSN,&L,&K,&STMTLEN
&STMTLEN   SETA 4
&CSECT     SETC '&SYSECT'(3,3)
&ERRNO     SETC '&SYSLIST(1)'(2,K'&SYSLIST(1)-1)
&CHAR1     SETC '&SYSLIST(1)'(1,1)
         AIF   ('&STMT' EQ 'STMT').ORDSTMT
           MVC S23STMT,&STMT MOVE NON-STANDARD STATEMENT NUMBER IN
.ORDSTMT   ANOP
*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*
&NAME      BAL 14,UJS23EP&CHAR1 LINK TO APPROPRIATE ERROR POINT
&JOLERR    SETC '&CSECT-&ERRNO'
ER&CSECT&ERRNO MVC 0(8,1),=CL8'&JOLERR' ERROR CODE IN CROSS-REF LIST
E&SYSNDX   EQU   ER&CSECT&ERRNO
&THIS      SETA  2
.LUP4      ANOP
         AIF   (&THIS GT N'&SYSLIST).END
         AIF   ('&SYSLIST(&THIS)'(1,1) EQ '#').VAR2
         AIF   ('&SYSLIST(&THIS)'(1,1) EQ '''').LIT2
.* HERE IT SHOULD BE A CHAR VARIABLE
&L         SETA L'&SYSLIST(&THIS)
           MVC 0(&L,1),&SYSLIST(&THIS)         FIXED CHAR STRING
         AGO   .ADD3
.LIT2      ANOP
.* NOW LOOK FOR DOUBLE QUOTES IN STRING TO CALCULATE THE CORRECT
.*   LENGTH
&LITPOSN   SETA 2                              START AFTER 1ST QOTE
&LITLEN    SETA K'&SYSLIST(&THIS)
&LITLEN    SETA &LITLEN-2
.TQUOTE2 AIF   ('&SYSLIST(&THIS)'(&LITPOSN,2) NE '''''').NOTDBL2
&LITPOSN   SETA &LITPOSN+1
&LITLEN    SETA &LITLEN-1
.NOTDBL2   ANOP
&LITPOSN   SETA &LITPOSN+1
         AIF   (&LITPOSN LT K'&SYSLIST(&THIS)).TQUOTE2
&K         SETA &LITLEN
           MVC 0(&K,1),=C&SYSLIST(&THIS)       MOVE LITERAL STRING
&POSN      SETA  &POSN+&K
         AGO   .ADD3
.VAR2      ANOP
           LA 15,&SYSLIST(&THIS)           LOAD ADDRESS VARYING STRING
.ADD3      ANOP
&THIS      SETA &THIS+1
         AGO   .LUP4
.END       DC  H'0'                            END LIST
*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*
           MEND
           SPACE 3
           MACRO
&NAME      JOLRETN &RC=0
&NAME      L   R13,4(R13)      RESET SAVE ADDRESS
         AIF   ('&SYSLIST(1)' EQ '').R1412
           RETURN &SYSLIST(1),T,RC=&RC
           MEXIT
.R1412     RETURN (14,12),T,RC=&RC
           MEND
           SPACE 3
           MACRO
&NAME    JOLSAVE &AREA=,&CSECT=,&BASE=R11
         GBLA &REGEQU
.* SEE IF EQUATES SET UP FOR THIS RUN YET OR NOT
         AIF   (&REGEQU NE 0).NOEQU
&CSECT   CSECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU  15
&REGEQU  SETA 1
         AGO   .NOCSECT
.NOEQU   ANOP
         AIF   ('&CSECT' EQ '').NOCSECT
         LTORG
         DS    0D
&CSECT   CSECT
.NOCSECT ANOP
&NAME    SAVE (14,12),,&CSECT.-&SYSDATE.:&SYSTIME
         AIF   (N'&BASE EQ 1).ONEBASE
         USING &CSECT,&BASE(1),&BASE(2)
         LR    &BASE(1),R15
         LA    &BASE(2),2048(R15)
         LA    &BASE(2),2048(&BASE(2))
         AGO   .HOUSE
.ONEBASE ANOP
         USING &CSECT,&BASE
         LR    &BASE,R15
.HOUSE   AIF   ('&AREA' EQ '').GENAREA
         MNOTE 12,'AREA NOW UNSUPPORTED'
         AGO   .HOUSE2
.GENAREA CNOP 0,4
         BAL   R15,*+76         BRANCH AROUND SAVE AREA
         DC    18F'-1'
.HOUSE2  ST    R15,8(,R13)
         ST    R13,4(,R15)
         LA    R13,0(,R15)     IT MAY BE NECESSARY TO CLEAR HIGH-BYTE
         MEND
         EJECT
* THESE NEXT TWO MACROS ARE USED FOR READING AND WRITING JOBQ.
*    IF THE SYSTEM IS VS,THE VS JOBQ ROUTINES ARE CALLED,OTHERWISE
*    A STRAIGHT READ OR WRITE OPERATION IS PERFORMED.
         MACRO
&NAME    GETJOBQ &DECB,&TTR
         GBLC  &JOLOS
         AIF   ('&JOLOS' NE 'X8').OK
         MNOTE 12,'GETJOBQ IS NOT SUPPORTED ON OSIV/X8'
         MEXIT
.OK      ANOP
&NAME    LA  R0,&DECB        LOAD 0 WITH DECB ADDRESS
         L   R1,&TTR         LOAD ADDRESS OF AREA WITH TTR FOR POINT
         BAL R14,GETJOBQ     BRANCH AND LINK TO POINT,READ,CHECK RTN
         MEND
         SPACE
         MACRO
&NAME    PUTJOBQ &DECB,&TTR
         GBLC  &JOLOS
         AIF   ('&JOLOS' NE 'X8').OK
         MNOTE 12,'PUTJOBQ IS NOT SUPPORTED ON OSIV/X8'
         MEXIT
.OK      ANOP
&NAME    LA  R0,&DECB        LOAD 0 WITH DECB ADDRESS
         AIF   ('&TTR' EQ '').NOTTR
         L   R1,&TTR         LOAD R1 WITH TTR REQUIRED
         AGO   .BAL
.NOTTR     SR  R1,R1           NO TTR,CLEAR REGISTER 1
.BAL       BAL R14,PUTJOBQ     BRANCH AND LINK TO POINT,WRITE CHECK RTN
           MEND
         SPACE 3
         MACRO
&L       UJE22UPD &P1,&P2
.* P1 IS ADDRESS OF DSNAME
.* P2 IS ADDRESS OF VOLUME SERIAL NUMBER(S)
         LA    R0,E22PARM     SET UP PARAMETER LIST
         ST    R0,CALLAREA
         MVC   E22DSN,&P1     COPY DSNAME
         MVC   E22VOL,&P2      AND VOLUME INFO
         LA    R1,CALLAREA    ADDRESS PARAMETER AREA
         MVI   0(R1),X'80'    THE FINAL TOUCH
         CALL  UJE22UPD       CALL MR FIXIT
         MEND
         TITLE 'JOL SCHEDULER MAIN-LINE'
         GBLA  &RSVDRC,&RETNSIZ
         GBLC  &JOLOS
         GBLC  &TYPE
         LCLB  &X8
         LCLC  &C,&C1,&C2,&C3,&C4,&C5,&C6,&DDPRT,&DDINST
&TYPE    SETC  'SCHED'
         $UJEPARM
&RETNSIZ SETA  2560          SIZE OF RETURN-CODE AREA
&X8      SETB  ('&JOLOS' EQ 'X8')
&RSVDRC  SETA  4000*(1-&X8)+50*&X8
&DDPRT   SETC  (&X8)'JOLPRINT'.(1-&X8)'$$PRNT'
&DDINST  SETC  (&X8)'JOLINST'.(1-&X8)'$$INST'
         PRINT ON,DATA
         AIF   (&X8).X8010 BYPASS MISLEADING REMARKS
***********************************************************************
*                                                                     *
* CODE FOR IF ERROR IS INCORPORATED IN THIS DESCRIPTION OF THE MAIN-  *
*  LINE ROUTINE                                                       *
*                                                                     *
*        CALL  UJE98INI;      /* IF ANY ERRORS (NO DD'S FOR SCHEDUER, *
*                                  ETC),                              *
*                             OR IF PROBLEM PROGRAM RETURNED A VALUE  *
*                             THAT CAUSES JOB TO BE FLUSHED,          *
*                             A NON-ZERO RETURN CODE IS GIVEN, AND    *
*                             THE JOB WILL BE FLUSHED.                *
*                        NOTE:- ABENDS DO NOT CAUSE AN ERROR HERE.    *
*                             */                                      *
*        IF R15,=0 THEN                                               *
*        DO;                                                          *
*           SET GOBACK /* TO OS */ ON;                                *
*           RETURN 4000;                                              *
*        END;                                                         *
*                                                                     *
*        CALL  UJE50RD;       /* READ A STMT FROM 'INSRUCT' FILE */   *
*        IF R15>=0 GO TO EOF; /* GO TO END OF JOB */                  *
*                                                                     *
*        SET  R4=COND(LEVEL*8 + NEST);                                *
*                                                                     *
*        IS INSTRUCT='IF' ?                                           *
*        YES, DO;                                                     *
*                                                                     *
*              SET 0(R4)='T';                                         *
* E00CLIF:     CALL IF;                                               *
*              IF TRUE        /* CHECKS FOR ABEND, AND IF 'ERROR' */  *
* NEW          THEN DO;                                               *
* NEW               CALL UJE50RD;                                     *
* NEW               IF R15>=0,                                        *
* NEW               GO TO EOF;                                        *
* NEW               IF 'IF' GO TO E00CLIF; /* TEST NEXT IF IN CHAIN*/ *
* NEW               ELSE GO TO E00EXECI;(EXECUTE INSTRUCTION) ;       *
*              END;                                                   *
* SKIP:        ELSE SKIP TILL MATCHING END ETC;                       *
*                                                                     *
*        END;                                                         *
*                                                                     *
* NEW    IF ABEND OCCURED                                             *
* NEW      AND CURRENT LEVEL,NEST                                     *
* NEW      <=  ERROR LEVEL,NEST (LEVEL,NEST ABEND OCCURED AT)         *
* NEW      THEN DO;           /* IE, SKIP INSTRUCTION BECAUSE ABEND*/ *
* NEW          CLEAR INERROR  /* CLEAR ERROR LOOP INDICATOR*/         *
* NEW          GO TO SKIP;    /* ALLOWS FOR IF ERROR, DO; */          *
* NEW      END;               /* ETC */                               *
*    /* NO ABEND */                                                   *
* EXECUTE-INSTRUCTION:        /* BRANCHED TO BY 'IF TRUE'             *
*                             ROUTINE ABOVE, THEREBY SKIPPING         *
* NEW                         THE 'IF ABEND AND LEVELS' ABOVE.        *
* NEW                                                                 *
* NEW                         HENCE, IF ERROR WILL FUNCTION */        *
*                                                                     *
*                                                                     *
*        IF A 'DO'                                                    *
*        THEN DO;                                                     *
*              NEST=NEST+1; GO TO READ;                               *
*        END;                                                         *
*                                                                     *
*        IF AN 'END'                                                  *
*        THEN  DO;                                                    *
*              NEST=NEST-1;                                           *
*              IF NEST=0                                              *
*              THEN LEVEL=LEVEL-1;                                    *
*              GO TO READ;                                            *
*        END;                                                         *
*        IS IT AN 'ELSE' ?                                            *
*        YES, DO;                                                     *
*              IS 0(R4)='T'                                           *
*              YES, ELSE MUST BE FALSE, GO TO SKIPLOOP;               *
*              NO,GO TO READ;                                         *
*        END;                                                         *
*                                                                     *
*  /* OTHER */                                                        *
*                                                                     *
*        BRANCH TO PROCESSING ROUTINE                                 *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
.X8010     ANOP
         SPACE
         EXTRN UJTNUM,UJEJOBQ      HELPS THE LINKAGE EDITOR FIND THINGS
         JOLSAVE CSECT=UJE00MN,BASE=R12
         ENTRY UJESCHED
UJESCHED EQU   UJE00MN
         L     R3,0(R1)                 ADDRESS OUR PARAMETER AREA
         USING PARMAREA,R3
         L     R5,=A(TABLES)
         USING TABLES,R5
E00VSSTR DS    0H                                                 74365
         CALL  UJE98INI                 CALL INITIALISE ROUTINES
         LTR   R15,R15                  INIT FAIL OR USER ABEND ?
         BZ    E00FIRST
BADRETN  DS    0H
         CALL  UJE94CLN                CLEAN UP OUTSTANDING ALLOCATIONS
         MVI   GOBACK,C'1'
         BAL   R11,UJEFILES            GO CLOSE ALL FILES
         JOLRETN RC=&RSVDRC            CANCEL JOB NOW
E00FIRST DS    0H
E00READ  DS    0H
E00MAINL DS    0H                      THIS IS THE MAIN-LINE.
         CALL  UJE50RD                 READ NEXT STATEMENT
         LTR   R15,R15                 READ OK (EOF MAYBEE)
         BNZ   E00EOF                  EOF,RETURN AFTER SETTING END JOB
*                                      INDICATORS.
         LH    R4,LEVEL                LEVEL INDICATOR
         SLL   R4,3                    *8 (WE ALLOW 8 NESTS PER LEVEL)
         LH    R0,NEST
         AR    R4,R0
         LA    R4,COND(R4)             THERE,NOW WE CAN LOOK AT 'CONDS'
         CLI   LABEL,C' '
         BNE   E00LABOK
         MVC   LABEL(2),=C'$$'
         MVC   LABEL+2(4),STMT
E00LABOK DS    0H
         CLC   =C'IF ',ICOMMAND  IF?
         BNE   E00TDO                  NO,GO TEST FOR A DO
* OK,CALL THE IF PROCESSOR AND TEST FOR TRUE OR FALSE
         MVI   0(R4),C'T'              SET COND INITIALLY 'TRUE'
         CALL  UJE04IF
         LTR   R15,R15                 IF 0,IT WAS A TRUE 'IF'
         BNZ   E00IFRD0       FALSE, SKIP INSTRUCTION(S) CHG26028 76200
* IF IS TRUE HERE                                        CHG26028 76200
         CALL  UJE50RD        READ NEXT INSTRUCTION      CHG26028 76200
         LTR   R15,R15        GET IT ?                   CHG26028 76200
         BNZ   E00EOF         NO, GO TO EOF ROUTINE      CHG26028 76200
         B     E00EXECI       YES, GO AND PERFORM IT     CHG26028 76200
           SPACE 3
* NOW THE 'IF' IS FALSE
E00IFRD0   MVI 0(R4),C'F'      SET COND TO 'FALSE'
E00IFRD1   CALL UJE50RD        READ THE NEXT INSTRUCTION
           LTR R15,R15
           BNZ E00EOF
           SPACE
E00SKIP  DS    0H                                        CHG26028 76200
           CLC =C'IF ',ICOMMAND  IF THEN...IF THEN SITUATION?
           BE  E00IFRD1        YES,SO SKIP THIS ONE NOW
           CLC =C'MACRO ',ICOMMAND   IS IT A MACRO HEADER ?
           BE E00IFLUP         START SKIPPING UNTIL MATCHING 'END'
           CLC =C'DO ',ICOMMAND IS IT A 'DO;
           BE E00IFLUP         START SKIPPING UNTIL MATCHING 'END'
* HERE IT IS AN ORDINARY INSTRUCTION,AND WE HAVE 'SKIPPED ' IF
*     WE GO AND READ A NEW ONE NOW
           B  E00READ
           SPACE 3
E00IFLUP DS    0H
* NOW WE HAVE FOUND A MACRO OR A DO
           LA R4,1             SET NUMBER OF OUTSTANDING ENDS TO 1
E00IFRD    DS    0H
           CALL UJE50RD        GET THE NEXT INSTRUCTION
           LTR R15,R15
           BNZ E00EOF          END OF INPUT FILE
           CLC =C'END ',ICOMMAND
           BNE E00TIFMC        GO TEST IF INNER MACRO OR DO
           SH R4,=H'1'         -1 FROM END COUNTER
           BZ  E00READ         GOOD OH,REACHED END OF FALSE LOOP
           B  E00IFRD
           SPACE 3
E00TIFMC DS    0H
           CLC =C'MACRO ',ICOMMAND
           BE  E00ADD1
           CLC =C'DO ',ICOMMAND
           BNE E00IFRD
E00ADD1    LA R4,1(R4)         UP THE NUMBER OF OUTSTANDING 'ENDS'
           B  E00IFRD          AND READ A NEW INSTRUCTION
*  END IF PROCESSING
           SPACE 3
E00TDO   DS    0H
E00TERR  CLI   ERRORIND,0     HAS AN ABEND OCCURED ?     CHG26028 76200
         BE    E00TDO2        NO, NOT YET                CHG26028 76200
* AN ABEND HAS BEEN DETECTED SOMEWHERE.                  CHG26028 76200
*******************************************************************DASD
*  IF ERROR SWITCH SETTINGS USING FIELD "INERRORL"                *DASD
*                                                                 *DASD
*  BYTES 0-3 ON = IF ERROR LOGIC IN PROCRESS                      *DASD
*           OFF = NO IF ERROR LOGIC REACHED AS YET OR             *DASD
*                 CURRENTLY RUNNING IF ERROR AT ABEND LEVEL       *DASD
*  BYTES 4-7 ON = IF ERROR LOGIC REACHED AND ABEND OCCURED        *DASD
*           OFF = NO ABEND OCCURED WITHIN IF ERROR LOGIC          *DASD
*******************************************************************DASD
         TM     INERRORL,X'0F' IF ERROR ON WITH AND ABEND ?        DASD
         BZ     E00SKIP      NOPE   LETS SKIP ANY RUNNING AFTER ABEDASD
         CLC   LEVEL(L'LEVEL+L'NEST),ERRLEVEL            CHG26028 76200
         BH    E00TDO2        OK, IF ERROR THEN DO LOOP  CHG26028 76200
         MVI   INERRORL,X'0F' TURN OFF 'IN ERROR LOOP'   CHG26028  DASD
         B     E00SKIP        SKIP INSTRUCTION(S)        CHG26028 76200
E00TDO2  DS    0H                                        CHG26028 76200
E00EXECI DS    0H                                        CHG26028 76200
         SPACE 2                                         CHG26028 76200
           CLC =C'DO ',ICOMMAND IS IT A 'DO'
           BNE E00TMAC         NO,TEST IF 'MACRO'
           LH  R1,NEST         ADD
           LA  R1,1(R1)            1 TO
           CH  R1,=H'8'                NEST
           BH  E00DOERR            IF NOT
           STH R1,NEST         T00 BIG
           B   E00READ         AND READ A NEW RECORD
E00DOERR   JOLERR 505,'TOO MANY DOS'   (THIS ABENDS,U0001)
           SPACE 3
E00TMAC    CLC =C'MACRO ',ICOMMAND
           BNE E00TEND
           LH  R1,LEVEL
           LA  R1,1(R1)
         CH    R1,=H'7'                                  JOL30114 76200
           BL  E00MACOK
           JOLERR 508,'TOO MANY LEVELS'  (ABENDS TOO)
E00MACOK   STH R1,LEVEL
           LA R1,SAVENEST(R1)
           MVC 0(1,R1),NEST+1 SAVE THE NEST SO WE CAN RESET AT MACRO
*                              END SO AS NOT TO LOSE OURSELVES
           XC  NEST,NEST
           B   SETMACRO        TRUE 'LOOP',SET UP MACRO START
           SPACE 3
E00TEND    CLC =C'END ',ICOMMAND WELL,PERHAPS IT IS AN 'END'
           BNE E00TELSE        NOPE,GO TEST IF IT IS AN'ELSE' THEN
           SPACE
           LH  R1,NEST         NOW REDUCE 'NEST'
           SH  R1,=H'1'
           BM  E00ENDMC        IF <0 IF IS A 'MACRO' END
           STH R1,NEST
           B   E00READ        *********************** MARCH 12 76
           BCTR R4,0           -1 FROM R4                         75311
           MVI 0(R4),C' '      CLEAR COND                         75311
           B   E00READ
           SPACE 3
E00ENDMC DS    0H
* NOW THE'MACRO END' REQUIRES SPECIAL ATTENTION BECAUSE WE MUST
*     STORE THE HIGHEST RETURN CODE FROM THE PROGRAMS EXECUTED
*     BY THE MACROS.
           LH R1,LEVEL
           LA R15,SAVENEST(R1)
           SH R1,=H'1'
           BNM E00MACEN
           JOLERR 506,'TOO MANY ENDS'  (ABENDS)
           SPACE 3
E00MACEN  DS    0H
           STH R1,LEVEL
           MVC NEST+1(1),0(R15)
           SPACE 3
** STORE THE HIGHEST RETURN CODE FROM THE MACRO
           LA R7,IDSTART
           LH R1,NOIDS
           MH R1,=H'18'
           LR R15,R7
           AR R7,R1
           LH R14,=H'-18'
           LR R1,R7
           USING IDOVLY,R1
           MVC DBL,IDRETN
           L R7,DBL
**** CHECK FOR A DEAD MACRO HEADER WITH A -1 RETURN CODE AND BYPASSDASD
           CLC  DBL(4),=F'-1'                                      DASD
           BNE E00LUP10
           SR R7,R7
E00LUP10   CLC IDNAME,=CL8'MACRO'
           BE  E00GMAC
           MVC DBL,IDRETN
**** CHECK FOR A DEAD MACRO HEADER WITH A -1 RETURN CODE AND BYPASSDASD
           CLC  DBL(4),=F'-1'                                      DASD
           BE   E00BXH1                                            DASD
           C R7,DBL
           BH  E00BXH1                                             DASD
*          BL  E00BXH1                                             DASD
           L   R7,DBL
E00BXH1    BXH R1,R14,E00LUP10
         JOLERR 507,'NO MACRO START'
E00GMAC  ST    R7,CALLAREA
         MVC   IDRETN,CALLAREA
         MVC   IDNAME,=CL8' '  TO GET RIGHT EFFECT FOR NESTED MACROS
         B     E00READ
         SPACE 3
E00TELSE DS    0H
* NOW THE 'ELSE' MUST BE TESTED
           CLC =C'ELSE ',ICOMMAND
           BNE E00TFALS                NOT ELSE,TEST IF FALSE 'LOOP'
           CLI 0(R4),C' '              WAS AN 'IF' JUST PROCESSED ?
           BNE E00ELSOK
           JOLERR 402,'ELSE IGNORED'
           SPACE 3
E00ELSOK DS    0H
           CLI 0(R4),C'F'              LAST FALSE?
           BNE E00TLTRU
           MVC 0(2,R4),=C'  '          TURN OFF COND CODE ALTOGETHER
           B  E00READ
E00TLTRU   B  E00IFRD1                 GO JOIN 'IF' FALSE PROCESSOR
           SPACE 3
E00TFALS DS    0H
E00ORD   DS    0H
           CLEAR ISRUN
           L   R1,=A(JE00TBL1) LOAD ADDRESS OF TABLE WITH THE
*                              INSTRUCTION NAMES AND THE ADDRESSES
*                              OF THE ROUTINES TO HANDLE THEM.
           LM  R7,R9,0(R1)     LOAD BXLE ADDRESS CONSTANTS FOR
*                              THE ABOVE TABLE.
E00FINDR DS    0H
           CLC ICOMMAND,0(R7)   COMPARE INSTRUCTION TO THAT IN TABLE
           BE  E00GOTRT        GOT THE ROUTINE TO HANDLE IT.
           BXLE  R7,R8,E00FINDR
E00ERROR DS    0H
           JOLERR 503,'INVALID INSTRUCTION ''',ICOMMAND,               *
               ''' IN SCHED'
           SPACE 3
E00GOTRT   L   R15,8(R7)       LOAD ROUTINE ADDRESS
           BALR R14,R15
           CLI ISRUN,C'1'      WAS A RUN JUST PROCESSED ?
           BE  E00FNDRN        YES,TWAS A RUN
           LTR R15,R15         DID PROCESSOR HANDLE NORMAL INSTRUCTION
*                              (EG TYPE,DELETE ETC??)
           BZ  E00MAINL        YES,SO TRY NEXT INSTRUCTION.
* HERE AN INSTRUCTION WAS EXECUTED,BUT RETURNED A NON-ZERO
*     CODE.
           CH  R15,=H'4'       RETURN TO OS AFTER SKIPPING TO
*                              THE RIGHT JOB STEP ?
           BE E00STPON         STEP ON TO A NEW OS STEP.
           CH R15,=H'&RSVDRC'  STOP ETC EXECUTED ?
           BE BADRETN
E00CLRC    MVC 0(2,R4),=CL2' '
           B  E00MAINL
           B  *+4
           B  *+4
           B  *+4
           B  *+4
*     SET THE INDICATOR WHICH TELLS OUR CALLER (THE MONITOR)
*     TO  RETURN TO OS SO IT CAN SKIP STEPS (OR CANCEL THE JOB)
           SPACE 3
RETURN   DS    0H                                                 74365
E00EOF   DS    0H
         AIF   (&X8).X8020
* WE HAVE READ AN EOF ON THE INSTRUCTION FILE,SO WE WANT TO
*     GET TO THE END OF THE JOB
*
* IF AN ABEND HAS OCCURED, WE SHOULD SET A RETURN OF
*  4000 SO THAT THE JOB WILL TERMINATE WITH AN ERROR CONDITION.
         SPACE 1                                         CHG26028 76200
         CLI   ERRORIND,0     DID AN ERROR OCCUR ?       CHG26028 76200
         BE    E00EOF2        NO, SO TERMINATE NICELY    CHG26028 76200
*                             (IF SLOWLY...)             CHG26028 76200
         MVC   LASTCC+2(2),=H'&RSVDRC' FLUSH THE JOB     CHG26028 76200
         B     RETNNOW        CLOSE FILES, RETURN.       CHG26028 76200
E00EOF2     LA R11,1            SET EOF INDICATOR ON
           B  RETNNOW
           SPACE 3
E00STPON DS    0H
         SR  R11,R11         SET EOF INDICATOR OFF
         SPACE 3
E00GOTRS DS    0H
E00TEST  DS    0H
         POINT RETN,TTR$RETN
           WRITE E00RET2,SF,RETN,READAREA,'S'
           CHECK E00RET2
           SPACE 3
RETNNOW  DS    0H
         CALL  UJE94CLN            CLEAN UP OUTSTANDING ALLOCATIONS
         MVI GOBACK,C'1'
*          CLOSE (INSTRUCT,,PRINT,,RETN,,JOBQ)                    *DASD
           BAL   R11,UJEFILES   GO CLOSE ALL FILES                 DASD
         AIF   (&X8).X80CVC
           L   R15,LASTCC                                         82200
           AGO .X80RET
.X80CVC    L   R15,MAXCC                                          82200
.X80RET    JOLRETN RC=(15)                                        75311
E00FNDRN DS    0H
           LTR R15,R15         DO WE HAVE TO SKIP TO A NEW
           BNZ E00STPON        OS STEP FOR THIS RUN ?
           SPACE 3
SETMACRO DS    0H
* RUN IT NOW
           LH  R1,NOIDS
           LA  R1,1(R1)
           CH  R1,MAXIDS
           BL  MUVNAME
           LH  R1,MAXIDS
           CVD R1,DBL
           UNPK DDPRIM,DBL
           OI  DDPRIM+L'DDPRIM-1,X'F0'
*******************************************************            DASD
* NOW BEFORE ABENDING WE WILL TAKE A LOOK AT THE RETN *            DASD
* TABLE FOR A USED MACRO HEADER AND OVERLAY IT MAKING *            DASD
* ROOM FOR 1 NEW GUY                                  *            DASD
*******************************************************            DASD
         LH    R15,NOIDS      LOOK THIS MANY TIMES                 DASD
         LA    R1,18                                               DASD
         LA    R1,IDSTART(R1) START LOOKING HERE                   DASD
         USING IDOVLY,R1                                           DASD
SLIDELOP CLC   IDNAME,=CL8'MACRO' IS THIS GUY USED ?               DASD
         BNE   SLIDEUP        YEA MOVE IT UP                       DASD
         LA    R1,18(R1)      UP TO NEXT GUY                       DASD
         BCT   R15,SLIDELOP                                        DASD
* WELL GUY WHAT NOW ???????                                        DASD
           JOLERR 501,'MAX ',DDPRIM,' STEPS EXCEEDED'
SLIDEUP  MVC   0(18,R1),18(R1) SLIDE THE REST UP 1                 DASD
         LA    R1,18(R1)      INCR TO NEXT SLOT                    DASD
         BCT   R15,SLIDEUP    LETS DO EM ALL                       DASD
         LH    R1,NOIDS       NOW LOAD NO OF IDS AGAIN             DASD
MUVNAME    STH R1,NOIDS
           MH  R1,=H'18'
           LA R1,IDSTART(R1)
           USING IDOVLY,R1
           MVC IDSTMT,STMT
           OC IDSTMT,=C'0000'
           MVC IDNAME,TASKLABL
           MVC IDNEST,NEST
           MVC IDLEVEL,LEVEL
           MVC IDRETN,=F'-1'
           CLC =CL8'MACRO',ICOMMAND
           BNE NOTMACH
           MVC IDNAME,=CL8'MACRO'
           B  E00MAINL
NOTMACH  DS    0H
         AIF   (&X8).X8050
* WE MUST NOW WRITE THE PROGRAM NAME IN THE PGM FIELD OF THE SCT
*    SO THAT SMF WILL BE OK
*CVC       GETJOBQ SCTDECB,JCTSSTR GET SCT,AFTER POINT
*CVC       CLC =C'$JOLMN',SCTPGMNM    FIRST PROGRAM GETS SMF RECORD 3.1
*CVC       BNE E00SMF1
*CVC       MVC SCTPGMNM,RUNNAME
E00SMF1  DS    0H
*CVC       PUTJOBQ SCTDECB     RE-WRITE SCT
* OK LET'S XCTL
         AGO   .NX8050
.X8050   ANOP
         FIX   'FIDDLE SMF RECORDS HERE'
.NX8050  ANOP
           POINT  RETN,TTR$RETN
           WRITE DECBRET1,SF,RETN,READAREA,'S'
           CHECK  DECBRET1
         AGO   .VS050
           SPACE 1                                                74365
           CLI VS,C' '         ARE WE RUNNING UNDER VS ?          74365
* IF WE ARE,WE WILL ATTACH NOW RATHER THAN XCTLING AND CLOSING    74365
*          AS THIS IS FASTER AND VS CAN ROLL US OUT QUICKLIY      74365
           BNE E00ISVS         IS VS,DO THINGS DIFFERENTLY        74365
           CLI IBMRTN,C' '     ARE WE USING AN IBM ROUTINE TO     *****
*                              ACCESS JOBQ ?                      *****
           BE  E00NDEL2                                           *****
           DELETE EPLOC=IBMRTN YES, DELETE IT                     *****
E00NDEL2 DS    0H                                                 *****
*          CLOSE (INSTRUCT,,PRINT,,RETN,,JOBQ)                    *DASD
           BAL   R11,UJEFILES   GO CLOSE ALL FILES                 DASD
           MVC DBL(4),STMT    SAVE STATEMENT NUMBER WHILE         75128
*                              PROBLEM PROGRAM IS EXECUTING
           L   R1,ATASKPRM                     LOAD ADDR OF PARAMETER
           ST R1,CALLAREA
           MVI CALLAREA,X'80'
           L   R13,4(R13)                      RESET SAVE ADDR
           L   R14,12(R13)                     RESET RETURN ADDR
           XCTL (2,12),DE=RUNNAME,DCB=0,MF=(E,CALLAREA)
.VS050     SPACE 3                                                75311
E00ISVS    MVC DBL,STMT        SHIFT STATEMENT NUMBER             75311
* 3.0 - MVS CODE                                                  75311
*                                                                 75311
* FOR 3.0 WE WILL ATTACH THE PROBLEM PROGRAM UNDER THE MONITOR,   75311
* THAT IS, WE SHALL RETURN AS USUAL.                              75311
*                                                                 75311
* LATER, WHEN THIS CODE IS RE-ENTRANT, IT WILL BE MORE            75311
* EFFICENT TO ATTACH IT HERE, BUT VS1 IS A BIT OF A PROBLEM       75311
* BECAUSE IT DOESN'T HAVE 16MEGABYTES TO PLAY WITH.               75311
           BAL   R11,UJEFILES   GO CLOSE ALL FILES                 DASD
*          JOLRETN RC=0        UJEMON WILL LOOK AT 'VS' TOO.      75311
           MVC CALLAREA(4),ATASKPRM                                DASD
           MVI CALLAREA,X'80'                                      DASD
           XC TASK2ECB,TASK2ECB                                    DASD
           LA R1,CALLAREA                                          DASD
           ATTACH DE=RUNNAME,ECB=TASK2ECB          74365           DASD
           LR  R11,R1          SAVE TCB ADDRESS                    DASD
           WAIT 1,ECB=TASK2ECB                                     DASD
           MVC TASKRETN(1),X'1D'(R11) SHIFT IN ABEND CODE          DASD
           MVC TASKRETN+1(3),TASK2ECB+1 AND RETURN CODE            DASD
           ST R11,CALLAREA                                         DASD
           DETACH CALLAREA                                         DASD
           B E00VSSTR          BACK TO MAINLINE                    DASD
           B *+4                                                   DASD
           B *+4                                                   DASD
           B *+4                                                   DASD
*************************************************************      DASD
*  CLOSE ANY OPEN FILES BEFORE RETURNING TO THE MONITOR     *      DASD
*        MVS  WILL ABEND-C03                                *      DASD
*************************************************************      DASD
         FIX 'CLOSE TOGETHER'
UJEFILES DS    0H                                                  DASD
         FIX 'DON''T CLOSE'
         BR    R11   **** DON'T CLOSE FOR DYNAMIC SCHEDULER
         ST    R11,CALLAREA+4
         LA    R10,INSTRUCT                                        DASD
         BAL   R11,UJEFCLSE                                        DASD
         LA    R10,PRINT                                           DASD
         BAL   R11,UJEFCLSE                                        DASD
         LA    R10,RETN                                            DASD
         BAL   R11,UJEFCLSE                                        DASD
*        AIF   (&X8).X8060
         LA    R10,JOBQ                                            DASD
         BAL   R11,UJEFCLSE                                        DASD
         L     R11,CALLAREA+4
         BR    R11                                                 DASD
UJEFCLSE DS    0H                                                  DASD
         TM    48(R10),X'10'  IS FILE OPEN ??                      DASD
         BZ    0(R11)         NOPE  RETURN                         DASD
         JOLCLOSE ((R10)),MF=(E,CALLAREA) CLOSE THIS GUY           DASD
         BR    R11            RETURN                               DASD
         LTORG
*
ISRUN      DC C' '
RETNBLKS   DS  H
PDQDSNNO   DS  H
GOTOLAB    DS  CL8
APDQDIR    DS  A
           SPACE 3
LABEL      DS  CL8
COMMAND    DS  CL8
CURRTIME   DS  CL8
ZERO       DC  F'0'
GETATKN   LA R1,TKNX
          L  R15,=V(UJCGETKN)
          BR R15                                                  75128
           SPACE 3
E00FXVOL   MVI   VOL,C' '  CLEAR TO BLANKS                         DASD
           MVC   VOL+1(L'VOL-1),VOL                                DASD
           LA R1,VOL-1                                            74365
           LA R15,DDVOLUME                                        74365
E00SHFTC   MVI 0(R1),C','     SHIFT IN COMMA TO SEPARATE VOLS    74365
           MVC 1(6,R1),0(R15)  SHIFT IN A VOLUME                  74365
           LA  R1,6(R1)        STEP OVER ',VOLUME'                 DASD
           LA R15,6(R15)       STEP OVER VOLUME                   74365
           CLI 0(R1),C' '      DROP EXTRA BLANKS (IF L'VOL<6)     74365
           BNE *+8             NOT BLANK                          74365
           BCT R1,*-8          IS BLANK,DROP R1 BY 1              74365
           LA  R1,1(R1)        SKIP TO NEXT POSITION              75311
           CLI 0(R15),C' '     LAST VOL ?                         74365
           BE E00SETVL         YEP, OUT WE GO (NEARLY)            74365
           C R15,=A(DDVOLUME+30)   END LIST                       74365
           BNH E00SHFTC
E00SETVL   S  R1,=A(VOL-1)                                       75003
           STH  R1,#VOL
           BR R14                                                 74365
UJS23EP5   LA  R1,5
           B   UJS23SET
UJS23EP4   LA  R1,4
           B   UJS23SET
UJS23EP3   LA  R1,3
           B   UJS23SET
UJS23EP2   LA  R1,2
           B   UJS23SET
UJS23EP1   LA  R1,1
           B   UJS23SET
UJS23EP0   SR  R1,R1
UJS23SET DS    0H
           STC R1,S23SEV
           L   R15,=V(UJS23ER)
           BR  R15
* WILL EVENTUALLY RETURN TO R14 ADDRESS
#S23MAX  DC    H'92'               MAX WTO OR LREC SIZE           76200
#S23LNE2 DS    H                   LINE 2 LENGTH                  76200
S23LNE2  DS    CL100               LINE 2 WORK AREA               76200
S23SEV     DS  CL1
S23STMT    DC  XL4'00000000'
#S23BLKS   DS  H
           DS  H
#S23LREC   DS  H
#S23MSSG   DS  H
S23MSSG    DS  CL150                                              74365
           DS  F                                                  75003
#VOL       DC  H'0'                                               75311
VOL        DC  CL50' '                                            75311
TASK2ECB   DC  F'0'                                               74365
           DS  F               SPARE
RUNBLDL    DS  0D
           DC  H'1'
           DC  H'68'
RUNNAME    DS  CL8
RUNTTRK    DS  CL4
RUNZ1      DS  CL1
RUNC1      DS  CL1
RUNUSDTA   DS  CL68
UJ00ANS    DS 3F
UJE00DDM    DC CL8'$$PRNT'
           PRINT NOGEN
           ENTRY RETN,INSTRUCT,PRINT  ******FOR LINK MAP ******   75128
RETN       DCB DDNAME=&DDINST,DSORG=PO,MACRF=W,                 80290  *
               DEVD=DA,RECFM=FB,LRECL=80,                              *
               BLKSIZE=&RETNSIZ                                    DASD
INSTRUCT   DCB DDNAME=&DDINST,DSORG=PO,MACRF=(R,W),DEVD=DA
PRINT      DCB DDNAME=&DDPRT,DSORG=PS,DEVD=DA,RECFM=VB,LRECL=132,      *
               BLKSIZE=136,MACRF=W
JOLCOIN    DCB DDNAME=JOLCOIN,DSORG=PS,MACRF=PM,                80290  *
               DEVD=DA,RECFM=FB,LRECL=80,                              *
               BLKSIZE=800
         AIF   (&X8).X8120
JOBQ       DCB DDNAME=$$JOBQ,DSORG=PS,MACRF=(WP,RP),DEVD=DA       *****
           ENTRY JOBQ                                             *****
TEMPDCB  DCB   DDNAME=&DDINST,DSORG=PO,MACRF=R,          JOL30116 76200*
               DEVD=DA,EXLST=TEMPEXIT                    JOL30116 76200
TEMPEXIT DC    A(JFCBDSNM+X'87000000')                   JOL30116 76200
           PRINT GEN
.X8120   ANOP
ATIOT      DS  A
ATCB       DS  A               ADDRESS OF TCB
AQMRAW     DC  A(0)            ADDRESS OF JOB Q ACCESS RTN
IBMRTN     DC  CL8' '          NAME OF ROUTINE THAT ACCESSES JOBQ
JCTTTR     DC  A(0)            ADDRESS | TTR OF THE JCT (EACH     *****
*                              SYSTEM IS A LITTLE DIFFERENT)      *****
           SPACE 3
* THIS TABLE IS USED BY THE SCRATCH AND CATLG ROUTINES
*     ALTHOUGH THE JOL PROCESSOR KNOWS WHAT TYPE OF UNIT A 'DD' CARD
*     IS FOR,TO SAVE SPACE IN THE PROCESSOR IT IS NOT CONVERTED
*     TO A FULL IBM UNIT (AND OF COURSE THE USER MAY SPECIFY HIS
*     OWN GENERIC UNIT)
* THIS TABLE IS USED ONLY WHEN A SCRATCH OR CATALOG WAS GIVEN
*     AND THE USER DID NOT CREATE THE DATA-SET IN THIS JOB,AND
*     THERE-FORE OS MAY NOT HAVE CONVERTED IT INTO A NICE LOOKING
*     UMIT FOR US.
HEXUNITS   DC A(*+12)
           DC A(5)
           DC A(HEXUNITE-5)
         COPY  UNITABLE                                            DASD
HEXUNITE DS    0H
.X8140   ANOP
           SPACE 3
         PRINT GEN
HEX      EQU *-240                                                75311
         DC  C'0123456789ABCDEF'                                  75311
         SPACE 3
#DDNAME  DC    H'8'           USED IN SCRATCH AND CATLG ETC
DDNAME   DS    CL8
#DSNAME  DS    0H
#DSN     DC    H'10'         INITED ONLY FOR TESTS
DSN      DS    0CL44
DSNAME   DC    CL44'NOT INIT'
           SPACE 3
#ERETDSN DS    H             RETURNED DSNAME FROM ALLOCATION
ERETDSN  DS    CL44
#ERETDDN DS    H             RETURNED DDNAME FROM ALLOCATION
ERETDDN  DS    CL8
           SPACE 3
RETN8    LA    R15,8
         B     RETRN
RETN4    LA    R15,4
         B     RETRN
RETN0    SLR   R15,R15
RETRN    JOLRETN RC=(15)
           SPACE 3
          DC    80S(*)
           LTORG
RETNAREA DS    0D
READAREA DS    XL&RETNSIZ                                          DASD
         ORG   READAREA
TTR$RETN DS    F               CONSTRUCTED BY BLDL IN UJESCHED
TTR$INST DS    F               CONSTRUCTED BY BLDL IN UJESCHED
NOIDS    DS    H          CURRENT NO OF IDS
LEVEL    DC   H'0'
NEST     DC   H'0'
COND     DC    CL50' '
ERRORIND DC    X'00'          SET ON IF ABEND            CHG26028 76200
INERRORL DC    X'00'          ON IF CURRENTLY DOING ERRORCHG26028 76200
* NOTE:- DO NOT SEPARATE NEXT TWO LOCATIONS              CHG26028 76200
ERRLEVEL DC    H'0'           SET BY 'UJE04IF' WHEN -    CHG26028 76200
ERRNEST  DC    H'0'           'IF ERROR' FOUND           CHG26028 76200
SAVENEST   DC  XL6'00'
         EYEBALL MAXCC
MAXCC      DC  F'0'
LASTCC     DC  F'0'
JOLSVC     DC  X'0A00'         SVC FROM 'OPTION' INSTRUCTION      75311
IDSTART  DS    0X
         ORG
           SPACE 3
VOLDETS  CSECT
#VOLLIST DC    H'0'
VOLLIST  DS    256CL6
           SPACE 3
TABLES CSECT
*        PRINT OFF
         COPY  DDDSNDET                                           75128
         ORG
DDDETLN  EQU   *-DDDSNDET     LENGTH OF THE AREA
         ORG   DDDSNDET                                           75128
         COPY  PGMDETS                                            75128
         SPACE 3                                                  75128
         ORG
         DS    0H
MAXIDS   DC    AL2((READAREA+L'READAREA-IDSTART)/18)
         DC    AL2(0)
BLANKS   DC    CL20' '
         LTORG
         PRINT NOGEN
         EYEBALL JCT
JCT      DS    0D
         IEFAJCTB
           EYEBALL SCT
SCT        DS  0D
         IEFASCTB
           EYEBALL SIOT
SIOT     DS    0D
         IEFASIOT
         ORG
         EYEBALL JFCB
         IEFJFCBN   LIST=YES                                      76200
         PRINT GEN
         EYEBALL QMPA
QMPA     DS    0D              USED FOR VS CURRENTLY
QMPAJOB  DS    CL8             JOB NAME OR NO-WORK-CHAIN ELEMENT
QMPAFUNC DS    CL1             FUNCTION CODE
QMPAFLTR DS    CL2             NN OF 1ST LOGL TRACK ASSIGNED TO ENTRY
QMPANOTR DS    CL1             NUMBER OF RECORDS ASSIGNED IN THIS TRACK
QMPANXTL DS    CL2             NN OF NEXT LOGICAL TRACK
QMPANOLT DS    CL1             NUMBER OF LOGICAL TRACKS ASSIGNED
QMPAJBCD DS    CL1             JOB TYPE CODE
QMPAJBST DS    CL1             JOB STATUS CODE
QMPAPRTY DS    CL1             JOB PRIORITY
QMPANXTQ DS    CL2             NN OF NEXT QUEUE ENTRY
QMPAQID  DS    CL2             QUEUE ENTRY IDENTIFICATION
QMPAORCL DS    CL1             ORIGIN CLASS ID
QMPARES1 DS    CL1             RESERVED
QMPATRKS DS    A               ADDRESS TRACK STACKING PARM LIST
QMPAIND  DS    CL1
         ORG   QMPAIND
QMPAAECB DS    A               ADDRESS OF USERS ECB/IOB
QMPANORC DS    CL1             1ST 4 BITS=NO OF RECORDS TO ASSIGN
*                              2ND 4 BITS=NO OF RECORDS TO READ/WRITE
QMPAAEXT DS    AL3             ADDRESS OF EXTERNAL PARAMETER AREA
IEFQATCB DS    A               ADDRESS OF TCB
IEFQAREC DS    A               ADDRESS OF RECORD BUFFER
IEFQAQMP DC    A(QMPA)         ADDRESS OF QMPA
IEFQTTR  DS    A               TTR OF REQUESTED RECORD
IEFQRCLN DC    AL2(176)
IEFQFUNC DC    AL2(0)
IEFQDECB DS    A               WORK AREA(NOT REQUIRED BY IEFQMMAC)
IEFQRETN DS    A               RETURN ADDRESS
.X8180   ANOP
         EYEBALL INST
INST     DS    H                               INSTRUCTIONS USE THIS
*                                              AREA AS WORK AREA AND
*                                              THEY ARE WRITTEN FROM
*                                              HERE
         ORG   INST
ILENGTH  DS    H                               LENGTH OF RECORD
         DC    H'0'                            FOR VB RECORD DESCRIPTOR
II       DC    C'I'                            RECORD TYPE
ILABEL   DS    CL8                             STATEMENT LABEL
ISTMT    DS    CL4                             STATEMENT NUMBER
ILEVEL   DS    CL1
INEST    DS    CL1
ICOMMAND DS    CL8                             INSTRUCTION EG 'TYPE'
IBODY    EQU   *-ILENGTH                       LENGTH OF FIXED
*                                              PART OF RECORD
ITEXT    DS    CL150                                              75128
         SPACE 3
         EYEBALL TKNX
         COPY  TKNX
         ORG TKNSTRG-IBODY-2
INSTRDA  DS    0C
         ORG
         LTORG
         DS    0D
INSCSECT CSECT
JE00TBL1 DC    A(JE00TBL2)
         DC    A(12)
         DC    A(JE00END2-12)
JE00TBL2 DC    CL8'RUN     ',V(UJE20RUN)
         DC    CL8'C       ',V(UJE05CAT)        CATLG
         DC    CL8'U       ',V(UJE06UNC)        UNCATLG
         DC    CL8'K       ',V(UJE07KEE)        KEEP
         DC    CL8'S       ',V(UJE08SCR)        SCRATCH
         DC    CL8'D       ',V(UJE09DEL)        DELETE
         DC    CL8'RETURN  ',V(UJE23RET)                          74365
         DC    CL8'TYPE    ',V(UJE10TYP)
         DC    CL8'DISPLAY ',V(UJE11DIS)
         DC    CL8'SIGNAL  ',V(UJE12SIG)
         DC    CL8'STOP    ',V(UJE13STP)
         DC    CL8'F       ',V(UJE14FRE)        FREE
         DC    CL8'OPTIONS ',V(UJE31OPT)                          75311
JE00END2 DS    0C
         EJECT
         PRINT NOGEN
UCBS     DSECT ,                                            FIX-X 76200
         IEFUCBOB  LIST=YES                                 FIX-X 76200
         SPACE 3
         PRINT GEN
PARMAREA DSECT
         COPY  UJECOMM
IDOVLY   DSECT
IDSTMT   DS   CL4
IDNAME   DS   CL8
IDRETN   DS   CL4
IDLEVEL  DS   CL1
IDNEST   DS   CL1
********  VOLINFO DSECT USED TO REFERENCE A CAMLST *************   DASD
VOLINFO  DSECT                                                     DASD
NOVOLS   DS    H                                                   DASD
CATDEV   DS    XL4  )                                              DASD
CATVOL   DS    CL6  )   REPEATS NOVOLS TIMES                       DASD
CATLABEL DS    H    )                                              DASD
         LTORG
         JOLSAVE  CSECT=GETTIME
         TIME
         STM   R0,R1,DBL            AND STORE
         UNPK  TIMEWORK(16),DBL     UNPACK TIME AND DATE
         MVC   CURRTIME(2),TIMEWORK+1 HOURS
         MVI   CURRTIME+2,C'.'
         MVC   CURRTIME+3(2),TIMEWORK+3 MINS
         MVI   CURRTIME+5,C':'
         MVC   CURRTIME+6(2),TIMEWORK+5 SECS
         SPACE 3
         JOLRETN
TIMEWORK DS    CL16
*        PRINT OFF
         COPY     UJE04IF
*        PRINT ON
         LTORG
           TITLE 'UJE05CAT:CATALOG DATA SET'
           COPY UJDDISP
           COPY UJE10TYP
           COPY UJD14FRE
           COPY UJD20RUN
           COPY UJD21ALL
           COPY UJE23RET
           LTORG
           COPY UJD30VOL
           COPY UJE50RD
           COPY UJD94CLN
           LTORG
         LTORG
*        PRINT OFF
         TITLE 'UJE98INI:INITIALISATION ROUTINES'
         JOLSAVE CSECT=UJE98INI
* THIS CSECT IS CALLED IMMEDIATELY AFTER THE JOL SCHEDULER GETS CONTROL
*    AND IT OPENS THE FILES ETC
* SECOND DETERMINE WHETHER WE ARE RUNNING UNDER 'HASP' OR 'OS'
*    IF THERE IS A DD-CARD FOR '$$PRINT' THEN THE SYSOUT FILE
*    ASSOCIATED WITH THAT FILE WILL BE USED SIMILIARLY TO THE
*    'HASP' SYSTEM LOG,I.E ALL COMMENTS WILL GO OUT TO IT.
         SPACE 3
* NOTE *** UNDER VS, WE ATTACH RATHER THAN XCTL TO THE USER PROGRAM
*     AS WE SAVE TIME THEN BY NOT CLOSING AND RE-OPENING OUR FILES.
*     SO, LET'S SEE IF THEY ARE OPEN, AS TO OPEN AGAIN WOULD DEFEAT
*     THE WHOLE EXERCISE, WOULDN'T IT?
         SPACE 1
         TM INSTRUCT+48,X'10'                                     74365
         BO  SCHEDGO                                              74365
         SPACE 1
         MVC STMT,=CL4'   0'
&C1      SETC  (1-&X8)'AQMRAW'
&C2      SETC  (1-&X8)'IBMRTN'
&C3      SETC  (1-&X8)'JOBQ'
&C4      SETC  (1-&X8)'JCTTTR'
         CALL  UJE70OPN,(&C1,&C2,INSTRUCT,PRINT,RETN,&C3,         ******
               &C4,VS,ATCB),MF=(E,CALLAREA)                       *****
*** ABOVE OPENS REQUIRED FILES, AND :-                            *****
*    1. SETS 'JCTTTR' TO CORE ADDRESS, OR TTR ON JOBQ.            *****
*    2. LOADS (MAYBE) AN IBM ROUTINE TO ACCESS JOBQ.              *****
*    3. OPENS 'INSTRUCT'                                          *****
*    4. OPENS 'PRINT' IF $$PRNT DD CARD PRESENT                   *****
*    5. OPENS 'JOBQ'  IF $$JOBQ DD CARD PRESENT AND ¬MFT |MVT|MVS *****
*    6. SETS 'VS' TO ' ' | '1' | '2' | 'M'                        *****
*    7. SETS 'ATCB' = A(OUR TCB)                                  *****
           SPACE 3                                                *****
         L     R4,ATCB               ADDRESS MY TCB
*        L     R14,TCBJSCB-TCB(,R4)           MY JSCB
*        ICM   R14,7,JSCBCSCA-JSCB(R14)       MY CSCB
*        MVC   JBNAME,CSCBUJNM-CSCB(R14)      WOT IME CALLED
SCHEDGO  DS    0H
         CALL  UJE97SPC                SPACE UP PRINTING A BIT
         L     R1,ATASKPRM      CLEAR USER'S PARM
         XC    0(2,R1),0(R1)
       SPACE
* NOW CHECK THAT THE INSTRUCT AND RETNCODE FILES ARE OPEN
         SR    R8,R8
         TM    INSTRUCT+48,X'10'
         BO    FILE1OK
         LA    R8,1
         JOLERR 501,'NO DD CARD FOR $$INST'
FILE1OK  DS    0H                                                 75128
         AGO .SKIP99
         L     R4,TCBJSCB-TCB(,R4)          MY JSCB
         ICM   R4,7,JSCBFCTA-JSCB(R4)         FIRST FCT
         BZ    E98NOFCT              EXIT IF NONE ?!! & SSSSSSSSS
         SPACE
*   FOUND THE FCT CHAIN. NOW FIND A DATASET ENTRY
         SPACE
         CALL  READJFCB,=CL8'&DDINST'
         MVC   SYSINVOL,JFCBVOLS     COPY THE VOLUME SERIAL NUMBER
.SKIP99  ANOP
         ZAP   DDCTR,=P'0'           INITIALISE DD COUNTER
         SPACE 2
         FIND  INSTRUCT,MBRRETN,D
         B     E98INITR(R15)
E98INITR B     E98GOTMB
         B     E98FIND4
         B     E98FIND8
MBRRETN  DC    CL8'$$RETN'
         SPACE 3
E98FIND8 JOLERR 504,'I/O ERROR READING DIRECTORY'
         SPACE 3
E98FIND4 DS    0H
* THE $$RETN MEMBER HASN'T BEEN SET UP APPARENTLY
         JOLERR 109,'JOL (COMMAND LANGUAGE) MONITOR VERSION IS ', ++++++
               '4.0-A  '                                         76200
         JOLERR 110,'CREATED ON DAY &SYSDATE. AT &SYSTIME.'
         CALL  UJE97SPC                SPACE UP PRINTING A BIT
         LA    R0,READAREA
         L     R1,=A(L'READAREA)
         SLR   R15,R15        ZEROES TO ALL THE AREA
         MVCL  R0,R14
           MVI   COND,C' ' CLEAR COND TO BLANKS                    DASD
           MVC   COND+1(L'COND-1),COND                             DASD
           WRITE E98DEC9,SF,RETN,READAREA,'S'
           CHECK E98DEC9
           NOTE RETN
           ST  R1,TTR$RETN
           STOW RETN,STOWBLK,A
           LTR R15,R15
           BZ  E98RDJCT
           JOLERR 503
E98GOTMB DS    0H
* WE HAVE NOW FOUND THE $$RETN MEMBER OF THE DATA SET
           LH R2,INSTRUCT+X'3E'
           MVC INSTRUCT+X'3E',=Y(&RETNSIZ)                         DASD
           READ E98DECBX,SF,INSTRUCT,RETNAREA
           CHECK E98DECBX
           STH R2,INSTRUCT+X'3E'
           NOTE INSTRUCT
           ST  R1,TTR$RETN     FOR REWRITING
* FIND OUT HOW MUCH DATA WE READ (ALSO USED FOR REWRITING)
           L  R1,E98DECBX+16   IOB ADDRESS
           LH R14,INSTRUCT+X'3E'  BLOCKSIZE
           SH R14,14(R1)  MINUS RESIDUAL COUNT
           STH R14,RETNBLKS    LENGTH OF RETN BLOCK
           SPACE 3
           MVC STMT,DBL
         POINT INSTRUCT,TTR$INST
E98RDJCT DS    0H
           AIF   (&X8).X8420
           SPACE 3
* BETTER SET UP THE JOBNAME ETC
           LA  R4,CALLAREA
           EXTRACT (4),'S',FIELDS=(TIOT)
           L   R1,CALLAREA
           ST  R1,ATIOT        SAVE ADDRESS OF TIOT
* NOW READ IN JCT AND SCT
.X8420     ANOP
           SPACE 6
           CLI TASKIND,C' '    IS THIS THE FIRST TIME I'VE BEEN CALLED
*                              THIS OS STEP ?
           BE  E98RETNX        YES,SO NOW FILES ETC INITIALISED,GO BACK
*                              TO THE MAIN-LINE LIKE A GOOD BOY.
           SPACE 3
* THE SCHEDULER HAS BEEN RE-ATTACHED AFTER AN XCTL TO A PROBLEM
*    PROGRAM. THEREFORE WE MUST DO NICE THINGS LIKE PRINT OUT
*    THE RETURN CODES ETC,
* WE HAD BETTER STORE ITS RETURN CODE IN THE TABLE ANYWAY
           LH R1,NOIDS
           MH R1,=H'18'
           LA R1,IDSTART(R1)
           USING IDOVLY,R1
           MVC IDRETN,TASKRETN
           MVI IDRETN,0        TURN OFF HIGH ORDER BITS FOR COMPARISONS
*                              IN THE 'IF' STATEMENT LATER
******* MORE FOR  MAXCC,LASTCC   SEPT 75
         TM    TASKRETN,X'80'   DID AN ABEND OCCUR?      CHG26028 76200
         BO    E98LMAX        YES, SO LEAVE LASTCC AND MACHG26028 76200
         MVC  LASTCC,IDRETN   LASTCC DONE
         CLC   MAXCC,LASTCC
         BH    E98LMAX
         MVC   MAXCC,LASTCC   MAXCC DONE
         DROP  R1
E98LMAX  UNPK  CALLAREA(9),TASKSSI(5)
         TR    CALLAREA(8),HEX
         MVC   ENDMSSI,CALLAREA 3(5)
*        OI    ENDMSSI+7,X'F0'
* NOW SEE IF TASK ABENDED OR RETURNED PROPERLY.
         TM    TASKRETN,X'80'                  ABEND ?
         BZ    NOTABND
         MVI   ERRORIND,1     TURN ON ABEND INDICATOR    CHG26028 76200
* WAS IT A USER ABEND OR A SYSTEM ABEND ?
         L     R1,TASKRETN
         N     R1,=X'00FFF000'
         BZ    USERABND
         UNPK  CALLAREA(9),TASKRETN(5)
         TR    CALLAREA(8),HEX
         MVC   ENDMRETC(4),CALLAREA+1
         MVC   ENDMRETC+5(3),CALLAREA+5
         MVI   ENDMRETC,C'S'
         MVI   ENDMRETC+4,C'-'
           JOLERR 307,'STEP ',TASKLABL,' LM ',TASKNAME,' SSI ',   74365*
               ENDSSI,' SYSTEM ABEND ',ENDRETC                    74365
E98CLRAB CLEAR TASKRETN    CLEAR ABEND                   CHG26028 76200
*        B     E20R16       TAKE BRANCH TO COND CODE TERMINATE   C DASD
         B     E98RETN0                                          A DASD
           SPACE 3
NOTABND    XC TASKRETN(2),TASKRETN
USERABND DS    0H
         L   R0,=X'0000FFFF'  IF NEGATIVE NUMBER LETS SHOW IT      DASD
         N   R0,TASKRETN
         CVD R0,DBL
         OI  DBL+7,X'0F'                                           DASD
         UNPK ENDRETB,DBL                                          DASD
         CLI ENDRETB,C'0'                                          DASD
         BNE ENDMSSOK  ITS A BIG ONE                               DASD
         MVI ENDRETB,C' '  PRINT AS BEFORE (4 BYTE RETN CODE)      DASD
ENDMSSOK DS    0H
         TM  TASKRETN,X'80'  ABEND ?
         BO  E98TYPER
         JOLERR 105,'STEP ',TASKLABL,' LM ',TASKNAME,' SSI ',     74365*
               ENDSSI,' RETURNED ',ENDRETB                         DASD
         AIF   (&X8).X8440
*                                                                 76200
* TO HANDLE THE STOP WHEN, WE MUST EXAMINE THE JCT JOB TERMINATION76200
* INDICATORS, AND COMPARE THIS RETURN CODE AND IF NECESSARY,      76200
* TERMINATE THE RUN.                                              76200
*                                                                 76200
* WE HAVE RESERVED TO US 1 JOB COND OF 'EQ,4000', AND SO WE CAN   76200
* FLUSH THE JOB BY SETTING 4000 ANY TIME WE WISH.                 76200
*                                                                 76200
*                                                                 76200
         LA    R1,JCTJDPCD                                        76200
         LA    R15,JCTJDPCD+4+28-1 END LOOP INDIC                 76200
         LA    R14,4               LENGTH OF TABLE                76200
E98DEPL  CLI   2(R1),0       ANY COND (END LOOP)            76200
         BE    E98RETN0            END -> RETURN                  76200
         IC    R6,2(R1)            GET DEPENDENCY CODE AND        76200
*                                  GET REDY FOR EXECUTE           76200
         CLC   0(2,R1),TASKRETN+2 COMPARE                        76200
         EX    R6,E98GO40          BRANCH IF TRUE                 76200
         BXLE  R1,R14,E98DEPL      LOOP THEN ...                  76200
.X8440   ANOP
         B     E98RETN0                                           76200
         AIF   (&X8).X8460
E98GO40  BC    0,E98R16       EXECUTED  *****                     76200
E98R16   DS    0H
E20R16   DS    0H
* DUE TO USING MVS MACRO, MUST MOVE JOBNAME BEFORE 'JOLERRINR'
            MVC  TASKLABL,JCTJNAME
           JOLERR 408,'JOB ',TASKLABL,                                 *
               ' TERMINATED DUE TO CONDITION CODES'
           B   E98RET4K
.X8460   ANOP
         FIX   '"STOP WHEN ANY" NEEDS TO BE HANDLED: I SUGGEST PASSING .
               THE INFO FROM THE COMPILER AS FIRST INSTRUCTION'
E98TYPER   JOLERR 306,'STEP ',TASKLABL,' LM ',TASKNAME,' SSI ',   74365*
               ENDSSI,' USER ABEND ',ENDRETB                       DASD
         B     E98CLRAB                                  CHG26028 76200
E98RET4K  DS    0H
           XC TASKRETN(2),TASKRETN
* THE NEXT MVC WILL STOP MVS FROM RUNNING AFTER A ABEND            DASD
* THIS PROBLEM IS BEING WORKED ON AS OF 4/1/77                     DASD
* SORRY ABOUT THE "IF ERROR LOGIC"                                 DASD
*          MVC TASKRETN(4),=F'&RSVDRC'                             DASD
* THIS PROBLEM IS NOW FIXED IN THE MONTOR AS OF 7/10/77            DASD
           MVI TASKIND,C'1'
           JOLRETN RC=&RSVDRC
E98RETN0 DS    0H
         CALL  UJE97SPC                SPACE UP PRINTING A BIT
         CALL  GETTIME
         MVC   D98DETME,CURRTIME
         WRITE D981DECB,SF,PRINT,D98HEAD1 WRITE THE DEALLOCN HEADER
         CHECK D981DECB                   WAIT TILL IT GOES
         CALL  UJE97SPC                SPACE UP PRINTING A BIT
         MVC   D98DETM2,CURRTIME
         WRITE D982DECB,SF,PRINT,D98HEAD2 WRITE THE DEALLOCN HEADER
         CHECK D982DECB                   WAIT TILL IT GOES
E98RETNX DS    0H
           MVI TASKIND,C'1'
           JOLRETN
STOWBLK    DC  CL8'$$RETN'
STOWTTR    DC  XL3'00'
STOWC      DC  X'00'
           DS CL50
ENDSSI     DS 0CL8
ENDMSSI    DS  CL8
ENDRETB    DS 0CL5            FOR MINUS RETURN CODES               DASD
ENDRETC    DS 0CL8
ENDMRETC   DS CL8
           DS H
* THE FOLLOWING LINES ARE USED TO PRINT OUT DE-ALLOCATION MESSAGES
*     FOR THE DYNAMIC ALLOCATION VERSION OF JOL.
D98HEAD1 DC    AL2(D98END1-*,0)
         DC    AL2(D98END1-*,0)
D98DETME DC    CL8' '                  TIME GOES HERE
         DC    C' DEALLOCATION '
D98END1  DS    0H
          SPACE
D98HEAD2 DC    AL2(D98END2-*,0)
         DC    AL2(D98END2-*,0)
D98DETM2 DC    CL8' '                  TIME GOES HERE
         DC    C' --DSID--  -DDNAME-   -ACTION'
D98END2  DS    0H
          SPACE
           DC   80S(*)
           LTORG
           TITLE 'UJS23ER:WTP,WTO ERROR MESSAGES'
UJS23ER    CSECT
           USING *,R15
           STM R14,R12,12(R13)
           LA  R0,SAVEAREA
           ST  R0,8(R13)
           ST  R13,SAVEAREA+4
           BAL R13,STARTERR
SAVEAREA DS    18F
STARTERR DS      0H
         DROP R15
         USING SAVEAREA,R13
* R14 IS THE RETURN ADDRESS BUT IT ALSO POINTS TO A LIST OF
* INSTRUCTIONS WHICH ARE TO BE EXECUTED
* THEY CAN BE :-
*    MVC   CONSTANT
*    LA    VARYING STRING
         CLEAR S23MSSG         CLEAR MESSAGE AREA
* NEW, END DEC 1974. IF AN ERROR MESSAGE IS BEING ISSUED, THEN OFFSET
*    THE MESSAGE AND PUT '***' IN IT.
         LA    R1,S23MSSG                                         74365
         CLC   =C'DISPLAY ',ICOMMAND                     CHG30062 76200
         BE    S23OFF10                                  CHG30062 76200
         CLC   =C'TYPE ',ICOMMAND                        CHG30062 76200
         BE    S23OFF10                                  CHG30062 76200
         CLC   =C'RETURN ',ICOMMAND                      CHG30062 76200
         BE    S23OFF10       PUT 10 BLANKS IN START     CHG30062 76200
         B     S23TSEV                                   CHG30062 76200
S23OFF10 MVC   0(10,R1),BLANKS OFFSET MESSAGE BY 10      CHG30062 76200
         LA    R1,10(R1)      SKIP BLANKS                CHG30062 76200
         B     S23START       GO FORM UP MESSAGE         CHG30062 76200
S23TSEV  CLI   S23SEV,2                                  CHG30062 76200
         BNL   S23REALE       REAL ERROR, PUT JOB NAME   CHG30062 76200
         MVC   0(5,R1),BLANKS                            CHG30062 76200
         LA    R1,5(R1)                                  CHG30062 76200
         B     S23START                                  CHG30062 76200
S23REALE MVC   0(4,R1),=C'***('  PUT '***('              CHG30062 76200
&C       SETC  (&X8)'JBNAME'.(1-&X8)'JCTJNAME'
         MVC   4(8,R1),&C        + JOBNAME               CHG30062 76200
         MVI   12(R1),C')'       + ')'                   CHG30062 76200
         LA    R1,13(R1)         SKIP ABOVE              CHG30062 76200
S23START MVC 0(3,R1),=C'JOL' SHIFT IN 'JOL'                       74365
         LA    R1,3(R1)        SKIP OVER IT SO WE WON'T OVER-WRITE IT
S23LUP1  DS    0H
         CLI   0(R14),X'D2'    MOVE ?
         BE    S23MUV1
         CLI   0(R14),X'41'    LA ?
         BE    S23LA1
         B     S23END1         SHOULD BE '00'
         SPACE
S23MUV1  EX    R0,0(R14)        EXECUTE THE MOVE
           SR  R0,R0
           IC  R0,1(R14)       LENGTH MOVED
           AR  R1,R0           ADD TO OUTPUT POSN
           LA  R1,1(R1)        COS ASSMBLR REMOVED 1
           LA  R14,6(R14)      SKIP MVC
           B   S23LUP1
           SPACE
S23LA1   DS    0H
           EX  0,0(R14)        EXECUTE THE LA R15,VARYING STRING
           ST  R14,0(R13)      SAVE REGISTER 14 IN SAVE AREA
           LH  R14,0(R15)      LOAD LENGTH OF THE STRING
           LTR  R14,R14        SEE IF STRING LENGTH = 0
           BZ  RESET14         NO DATA TO MOVE
           BCTR R14,0
           EX  R14,ERRMUV
           LA  R1,1(R14,R1)    STEP 1 SO NEXT MOVE GOES ONTO RIGHT
*                              SPOT IN BUFFER
RESET14  DS    0H
           L   R14,0(R13)      RELOAD R14
           LA  R14,4(R14)      STEP OVER THE LA
           B   S23LUP1
* OOPS   WTO   'JOLE00-99 CANNOT ALLOCATE ERROR AREA'
*        ABEND 16,DUMP,STEP
ERRMUV   MVC   0(*-*,R1),2(R15) **** EXECUTED
         SPACE
S23END1  DS    0H
         LA    R14,2(R14)      BRANCH AROUND '0' AT END OF LIST
         L     R15,4(R13)       LOAD OLD SAVE ADDRESS
         ST    R14,12(R15)     RESET OLD RETURN ADDRESS
         MVC   0(3,R1),=C' AT'  SHIFT IN 'AT'
         MVC   4(4,R1),S23STMT                                    75003
         OC    S23STMT,S23STMT
         BNZ   S23SETL
         MVC   4(4,R1),STMT                                       75003
*        OC    4(4,R1),=C'0000' JCS NOTICED BINARY ZEROES IN THERE
S23SETL  LA    R14,S23MSSG-12 THE -8 IS FOR THE 'AT STMT'         75128
S23TEST0 CLI   4(R1),C'0'     LEADING ZERO?                       75003
         BNH   S23SR          -> NO                               75003
         MVC   4(4,R1),5(R1)  DROP ZERO                           75003
         BCT   R1,S23TEST0                                        75003
S23SR    DS    0H                                                 75003
         SR    R1,R14
         XC    #S23LNE2,#S23LNE2   CLEAR LENGTH                   76200
         CH    R1,#S23MAX          CHECK FOR A BIG MESSAGE        76200
         BNH   S23SHORT            ITS OK, KEEP GOING             76200
* NOW WE HAVE A MESSAGE THATS GREATER THAN 96 BYTES AND IF        76200
* WE DONT MAKE TWO LINES OUT OF IT, THE OS WRITER OR HASP...ECT   76200
* WILL CHOP IT OFF                                                76200
* SO WE ARE NOW GOING TO TAKE A LOOK AT THE MESSAGE FORM +96 BACK
* AND WHEN WE FIND A COMMA OR A BLANK THAT WILL END LINE 1 AND
* START LINE 2
         STH   R1,#S23LNE2         SAVE OLD LENGTH FOR LATER      76200
         LA    R15,S23MSSG         POINT TO THE START OF THE MSG  76200
         AH    R15,#S23MAX         GET TO +96                     76200
         LA    R1,30               STOP LOOKING AFTER 30 BYTES    76200
S23LOOK  DS    0H                                                 76200
         CLI   0(R15),C' '         IS IT A BLANK                  76200
         BE    S23ENDLK                                           76200
         CLI   0(R15),C','         HOW ABOUT A COMMA              76200
         BE    S23ENDLK                                           76200
         BCTR  R15,0               BACKUP,1 BYTE                  76200
         BCT   R1,S23LOOK          RETURN                         76200
S23ENDLK DS    0H                                                 76200
         LR    R1,R15              R1 = NEW END FOR LINE 1        76200
         LA    R14,#S23LREC   POINT TO START OF MESSAGE           76200
         SR    R1,R14              CALC NEW LENGTH FOR LINE 1     76200
         AH    R14,#S23LNE2        POINT R14 TO END OF MESSAGE    76200
         SR    R14,R15             CALC LENGTH FOR LINE 2         76200
         LA    R14,19(R14) LEAVE SOME BLANKS ON CONT LINE         76200
         STH   R14,#S23LNE2        SAVE IT FOR LATER              76200
         CLEAR S23LNE2                                            76200
         MVC   S23LNE2+15(L'S23LNE2-16),1(R15)      SAVE LINE 2   76200
S23SHORT DS    0H                                                 76200
         XC    #S23BLKS(8),#S23BLKS CLEAR VB DESCRIPTOR ETC       76200
           STH R1,#S23LREC
           LA  R1,4(R1)
           STH R1,#S23BLKS
           XC S23STMT,S23STMT
* GREAT,NOW WHERE ARE WE GOING TO PUT THIS FANTASTIC PIECE OF
*    INFORMATION ?
           TM  PRINT+48,X'10'
           BZ  S23WTO
           WRITE S23DECB,SF,PRINT,#S23BLKS
           CHECK S23DECB
S23WTO   DS    0H
* NOW IF THE SEVERITY IS >=12 THE MESSAGE IS TYPED ON THE CONSOLE,
*    OTHERWISE A WTO WITH ROUTCDE=11 IS QUITE SATISFACTORY,UNLESS
*    WE HAVE A PRINT DD CARD,IF WHICH CASE WE CAN RETURN NOW
           CLI S23SEV,3
           BL  S23TPRNT
* HERE A REAL WTO IS REQUIRED,SO SET UP ROUTE-CODES 2 & 11
           MVC #S23MSSG,=XL2'8000'
           LH  R15,#S23LREC
           LA  R15,#S23LREC(R15)
           MVC 0(4,R15),=X'04004020' DESC 6 RTE 11,2              75311
           CLI  VS,C'2'    MVS ?                                   DASD
           BNE  S23TNMVS   NOPE                                    DASD
           MVC 0(4,R15),=X'04004004' DESC 6 RTE 2,14 JESMSG        DASD
S23TNMVS DS    0H                                                  DASD
         WTO   MF=(E,#S23LREC)
           B  S23GOBAK
           SPACE 3
S23TPRNT DS    0H                                                 75311
         TM    PRINT+48,X'10' DID WE PUT MESSAGE ON PRINTER FIX-X 76200
         B     DYNP           FOR DYNAMIC VERSION, PRINT AGAIN !
         BO    S23GOBAK       YES, DON'T FILL WTP ON JCL LOGFIX-X 76200
* SET UP A WTO WITH ROUTCDE=11
DYNP       MVC #S23MSSG,=XL2'8000'
           LH  R15,#S23LREC
           LA  R15,#S23LREC(R15)
           MVC 0(4,R15),=X'00000020' ROUTCODE   11                75128
           CLI  VS,C'2'   MVS ??                                   DASD
           BNE  S23NMVS   NOPE                                     DASD
           MVC 0(4,R15),=X'00000004' ROUTCODE 14 FOR JESMSG        DASD
S23NMVS  DS    0H                                                  DASD
*          LA  R1,#S23LREC
         WTO   MF=(E,#S23LREC)
S23GOBAK DS    0H
         CLC   #S23LNE2,=X'0000'   DO WE HAVE A SECOND LINE       76200
         BE    S23GOBK2            NOPE                           76200
         LH    R1,#S23LNE2         LOAD LENGTH OF LINE2           76200
         XC    #S23LNE2,#S23LNE2   CLEAR                          76200
         MVC   S23MSSG,S23LNE2     OVERLAY OLD WITH NEW           76200
        CLI  S23LNE2,C' '  CHECK FOR BLANK SECOND LINE             DASD
        BNE  S23SHORT                                              DASD
        LR   R15,R1        LOAD LENGTH OF MESSAGE                  DASD
        BCTR R15,0         SUBTRACT 1 FOR EXECUTE INST             DASD
        EX   R15,S23CLCBL                                          DASD
        BE   S23GOBK2      ITS BLANK  LETS NOT PRINT IT            DASD
         B     S23SHORT            RETURN AND WRITE LINE2         76200
S23CLCBL CLC  S23LNE2+1(*-*),S23LNE2                              DASD
S23GOBK2 DS    0H                                                 76200
         CLI S23SEV,5           JOL TERMINAL ERROR ?
         BNE  S23LMRET
         AIF   (&X8).X8480
         JOLCLOSE (INSTRUCT,,PRINT,,RETN,,JOBQ),MF=(E,CALLAREA)
         AGO   .NX8480
.X8480   ANOP
         JOLCLOSE (INSTRUCT,,PRINT,,RETN),MF=(E,CALLAREA)
.NX8480  ANOP
         ABEND 1,DUMP STEP
S23LMRET DS    0H
         JOLRETN
         LTORG
         DC   80S(*)
*        PRINT ON
       TITLE 'UJELOCAT:LOCATE CATALOGED DATASETS'                  DASD
         JOLSAVE CSECT=UJELOCAT                                    DASD
*        AIF   (&X8).X8540
         L     R15,=V(E05VOLS)         LOAD CAMLIST ADDRESS        DASD
         USING VOLINFO,R15                                         DASD
         ST    R15,ELOLOCAT+12         POINT TO LOCATE AREA        DASD
         LA    R6,300(R15)             GO UP A FEW AND SAVE POINTERDASD
         MVC   0(44,R6),DSNAME         MOVE TO LOCATE AREA         DASD
         MVC   DSNAME,0(R6)            MOVE DSNAME IN              DASD
         LOCATE ELOLOCAT                                           DASD
         LTR   R15,R15                 DID LOACTE FIND ANYTHING ?? DASD
         BNZ   ELORETN4                NOPE                        DASD
         JOLRETN RC=0  WE FOUND OUR STIFF LETS LEAVE               DASD
ELORETN4 DS    0H                                                  DASD
         MVC  DSNAME,0(R6)            MOVE BACK ORGINAL DATA SET NADASD
         B    RETN4                   TELL THE CALLER WE FAILED    DASD
ELOLOCAT CAMLST NAME,DSNAME,,0                                     DASD
.X8540   ANOP
*        B    RETN4
           LTORG
           PRINT ON
           COPY UJEALLOC
           LTORG
         DC C'COMPILE DATE=&SYSDATE.,TIME=&SYSTIME.'               DASD
         LTORG                                                     DASD
         DS    0D
         PRINT GEN,NODATA
         AIF  (NOT &X8).NOX8MAC
         TITLE 'FIXED LOW CORE'
         XAMFLC  DSECT=YES
PSA      EQU   FLC
PSATOLD  EQU   FLCTOLD            FOR MVS,F4 COMPATIBILITY
         TITLE 'COMMUNICATIONS VECTOR TABLE'
         XAMCVT  DSECT=YES
         TITLE 'TASK CONTROL BLOCK    '
         XAMTCB  DSECT=YES
TCBFLGS1 EQU   TCBFLAG1       EQUIVALENT FIELDS ON F4,X8
         TITLE 'REQUEST BLOCK         '
         XAMRB   DSECT=YES
         TITLE 'FILE CONTROL TABLE    '
         XDDFCT
         TITLE 'JOB-STEP CONTROL BLOCK'
         XDDJSCB
JSCBLEN  EQU   *-JSCB         MY NAME FOR ITS LENGTH
JSCBDISP EQU   0              MVS,F4 NAME FOR DISPLACEMENT TO START
JSCBOPTS EQU   JSCBSTS
         TITLE 'COMMAND SCHEDULER CONTROL BLOCK'
         XDDCSCB
.NOX8MAC ANOP
           END
