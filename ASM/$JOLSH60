$JOLSH60   TITLE 'JOL TRANSIENT SCHEDULER AND INSTRUCTION HANDLER 6.0'
* JOL COPYRIGHT CLARKE COMPUTER SOFTWARE 1971,1972,1973,1974,1975,1976
* JOL COPYRIGHT CLARKE COMPUTER SOFTWARE 1980.
* JOL COPYRIGHT CLEM CLARKE  1980,1981,1982,1983.
* JOL COPYRIGHT CCS-JOL PTY LTD, 1984.
* JOL COPYRIGHT CCS-JOL PTY LTD, 1985.
* JOL COPYRIGHT CCS-JOL PTY LTD, 1986.
* JOL COPYRIGHT CCS-JOL PTY LTD, 1987.
* JOL COPYRIGHT Clem Clarke      2001.
* JOL COPYRIGHT Clem Clarke      2008.
* JOL COPYRIGHT Clem Clarke      2010.
           SPACE 3
* REFER TO INSTRUCTIONS ON COPYRIGHT NOTICE FORM NO CCS-E001.
           SPACE 3
*                   J             000000            L
*                   J            0      0           L
*                   J           0        0          L
*                   J          0          0         L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*        J          J         0            0        L
*         J        J           0          0         L
*          J      J             0        0          L
*           J    J               0      0           L
*            JJJJ                 000000            LLLLLLLLLLL
           SPACE 3
* LAST SOURCE UPDATE 28/7/1986   BY C.CLARKE
*   CHANGES:-
*     1. ALTER INITIAL MESSAGE TO 4.0A.
*     2. FIX CATLG OF GREATER THAN 5 VOLUMES.
*     3. SET LASTCC,MAXCC IF CATLG, DELETE FAILS.
*
* LAST SOURCE UPDATE 16/7/1985   BY CVC.
*   CHANGES:-
*     1. APPLY ZAPS TO SOURCE FOR CATLG AND PDQ PROBLEMS.
*     2. FIX CATLG MOD DATA SET ON DISK.
*     3. STOP (0) BEING ADDED TO DELETE MESSAGE.
*
* LAST SOURCE UPDATE 21/12/1983   BY CVC.
*   CHANGES:-
*     1. SUPPORT IBM MXS/XA OPERATING SYSTEM.
*
* LAST SOURCE UPDATE 9/3/1983   BY CVC.
*   CHANGES:-
*     1. PRINT SSI CORRECTLY.
*     2. DELETE GDG ALL CORRECTLY.
*
* LAST SOURCE UPDATE 26/8/1981   BY CVC.
*   CHANGES:-
*     1. FIX 800 BPI TAPE PROBLEM
*     2. ALLOW JOL TO USE PROGRAMS IN LPALIB
* FOLLOWING FIXES CODED, SEPT 7,1976
*
*CHG26028      PROVIDE SUPPORT FOR 'IF ERROR'
*CHG30002      AS ABOVE
*CHG30062      HIGHLIGHT ERROR MESSAGES ETC MORE
*JOL30112      PROVIDE SUPPORT FOR DELETE GDGALL
*JOL30114      ALLOW UP TO 5 LEVELS OF MACROS
*JOL30115      CLOSE FILES BEFORE ABENDING
*JOL30116      FIX DELETE TEMPORARY DATA-SETS
* ALSO UPDATE CAMLIST,SCRATCH ETC MACROS FOR VS RETURN CODES
********************************************************************
*
*            JOL EXECUTE 'INITIATOR/SCHEDULER'
*
*
*
*
*
*
* NOTE: MANY MACRO NAMES ARE THE SAME AS THOSE USED IN THE JOL
*     COMPILER,BUT THEIR GENERATED CODE DIFFERS VERY SLIGHTLY
*     FROM THE OTHER MODULES,EVEN THOUGH THE FUNCTION IS THE SAME
********************************************************************
           SPACE 1
***********************************************************************
*
*
* DUE TO THE FAILURE OF IBM JOBQ MANAGEMENT ROUTINES (EITHER TO MY
*    UNDERSTANGING OR IBM'S DOCUMENTATION) SOME 'EMERGENCY' TYPE
*    CODE ALTERATION IS GOING ON TO GET JOL TO FUNCTION UNDER
*    VS1. NOTE THAT MVS USES THE STANDARD IBM CODE.
*
* CODE MARCH 7,1976: ALL MARKED '*****' IN COLS 67-71
*    SEE ALSO  'UJEJOB' CSECT FOR CHANGES
*
***********************************************************************
           SPACE 3
           MACRO
           EYEBALL &A
           DS  0D
           DC  8CL4'&A'                                           75311
           DS  0D
           MEND
           SPACE 3
           SPACE 3
           MACRO
&NAME      JOLERR &STMT=STMT
.* THIS MACRO WILL PUT INTO A LOCATION A STRING OF CHARACTERS
.* THE STRING MAY BE IN A BUFFER OR JOL MAY ITSELF CONTROL
.*   THE WHERE-ABOUTS OF THE ERROR MESSAGE.
.*
.* SYSLIST(1) IS TAKEN TO BE THE ERROR SEVERITY AND ALSO THE
.*   ERROR NUMBER.
           LCLA &LITPOSN,&LITLEN
           LCLC &CSECT,&ERRNO
           LCLC &JOLERR,&CHAR1
           LCLA &LENGTH,&THIS,&NOVAR,&POSN,&L,&K,&STMTLEN
&STMTLEN   SETA 4
&CSECT     SETC '&SYSECT'(3,3)
&ERRNO     SETC '&SYSLIST(1)'(2,2)
&CHAR1     SETC '&SYSLIST(1)'(1,1)
           AIF ('&STMT' EQ 'STMT').ORDSTMT
           MVC S23STMT,&STMT MOVE NON-STANDARD STATEMENT NUMBER IN
.ORDSTMT   ANOP
*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*
&NAME      BAL 14,UJS23EP&CHAR1 LINK TO APPROPRIATE ERROR POINT
&JOLERR    SETC '&CSECT-&ERRNO'
ER&CSECT&ERRNO MVC 0(7,1),=CL7'&JOLERR' ERROR CODE IN CROSS-REF LIST
E&SYSNDX   EQU   ER&CSECT&ERRNO
&THIS      SETA  2
.LUP4      ANOP
           AIF (&THIS GT N'&SYSLIST).END
           AIF ('&SYSLIST(&THIS)'(1,1) EQ '#').VAR2
           AIF ('&SYSLIST(&THIS)'(1,1) EQ '''').LIT2
.* HERE IT SHOULD BE A CHAR VARIABLE
&L         SETA L'&SYSLIST(&THIS)
           MVC 0(&L,1),&SYSLIST(&THIS)         FIXED CHAR STRING
           AGO .ADD3
.LIT2      ANOP
.* NOW LOOK FOR DOUBLE QUOTES IN STRING TO CALCULATE THE CORRECT
.*   LENGTH
&LITPOSN   SETA 2                              START AFTER 1ST QOTE
&LITLEN    SETA K'&SYSLIST(&THIS)
&LITLEN    SETA &LITLEN-2
.TQUOTE2   AIF ('&SYSLIST(&THIS)'(&LITPOSN,2) NE '''''').NOTDBL2
&LITPOSN   SETA &LITPOSN+1
&LITLEN    SETA &LITLEN-1
.NOTDBL2   ANOP
&LITPOSN   SETA &LITPOSN+1
           AIF (&LITPOSN LT K'&SYSLIST(&THIS)).TQUOTE2
&K         SETA &LITLEN
           MVC 0(&K,1),=C&SYSLIST(&THIS)       MOVE LITERAL STRING
&POSN      SETA  &POSN+&K
           AGO .ADD3
.VAR2      ANOP
           LA 15,&SYSLIST(&THIS)           LOAD ADDRESS VARYING STRING
.ADD3      ANOP
&THIS      SETA &THIS+1
           AGO .LUP4
.END       DC  H'0'                            END LIST
*-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-*
           MEND
         SPACE 3
         MACRO
&NAME    JOLRETN &RC=0
&NAME    L     R13,4(R13)      RESET SAVE ADDRESS
         AIF ('&SYSLIST(1)' EQ '').R1412
         RETURN &SYSLIST(1),T,RC=&RC
         MEXIT
.R1412   RETURN (14,12),T,RC=&RC
         MEND
         SPACE 3
         MACRO
&NAME    JOLSAVE &AREA=,&CSECT=,&BASE=R11
         GBLA &REGEQU
         LCLC  &T,&T1,&SA                                         J50
&T       SETC  'KCP'.'&SYSNDX'.'A'                                J50
&T1      SETC  'KCP'.'&SYSNDX'.'B'                                J50
&SA      SETC  'KCP'.'&SYSNDX'.'C'                                J50
.* SEE IF EQUATES SET UP FOR THIS RUN YET OR NOT
         AIF (&REGEQU NE 0).NOEQU
&CSECT   START 0
R0       EQU 0
R1       EQU 1
R2       EQU 2
R3       EQU 3
R4       EQU 4
R5       EQU 5
R6       EQU 6
R7       EQU 7
R8       EQU 8
R9       EQU 9
R10      EQU 10
R11      EQU 11
R12      EQU 12
R13      EQU 13
R14      EQU 14
R15      EQU 15
&REGEQU  SETA 1
         AGO .NOCSECT
.NOEQU   ANOP
         AIF ('&CSECT' EQ '').NOCSECT
         LTORG
&CSECT   CSECT
.NOCSECT ANOP
.*AME    SAVE (14,12),,*
         B     &T-*(,R15)                                         J50
         DC    AL1(&T1-*-1),C'&CSECT &SYSTIME &SYSDATE'           J50
&T1      DS    0C                                                 J50
&SA      DS    18F                                                J50
&T       DS    0H                                                 J50
         STM   R14,R12,12(R13)                                    J50
         AIF   (N'&BASE EQ 1).ONEBASE
         USING  &CSECT,&BASE(1),&BASE(2)
         LR    &BASE(1),15
         LA    &BASE(2),2048(15)
         LA    &BASE(2),2048(&BASE(2))
         AGO   .HOUSE
.ONEBASE ANOP
         USING  &CSECT,&BASE
         LR    &BASE,15
.HOUSE   AIF   ('&AREA' EQ '').GENAREA
         MNOTE 12,'AREA NOW UNSUPPORTED'
.GENAREA ANOP
         LA    R15,&SA          BRANCH AROUND SAVE AREA
.HOUSE2  ST    R15,8(,R13)
         ST    R13,4(,R15)
         LR    R13,R15
         MEND
         SPACE 3
* THESE NEXT TWO MACROS ARE USED FOR READING AND WRITING JOBQ.
*    IF THE SYSTEM IS VS,THE VS JOBQ ROUTINES ARE CALLED,OTHERWISE
*    A STRAIGHT READ OR WRITE OPERATION IS PERFORMED.
           MACRO
&NAME      GETJOBQ &DECB,&TTR
&NAME      LA  R0,&DECB        LOAD 0 WITH DECB ADDRESS
           L   R1,&TTR         LOAD ADDRESS OF AREA WITH TTR FOR POINT
           BAL R14,GETJOBQ     BRANCH AND LINK TO POINT,READ,CHECK RTN
           MEND
           SPACE
           MACRO
&NAME      PUTJOBQ &DECB,&TTR
           LA  R0,&DECB        LOAD 0 WITH DECB ADDRESS
           AIF ('&TTR' EQ '').NOTTR
           L   R1,&TTR         LOAD R1 WITH TTR REQUIRED
           AGO .BAL
.NOTTR     SR  R1,R1           NO TTR,CLEAR REGISTER 1
.BAL       BAL R14,PUTJOBQ     BRANCH AND LINK TO POINT,WRITE CHECK RTN
           MEND
           MACRO
&NAME      CLEAR
.* THIS MACRO WILL CLEAR (SET TO ' ' OR 0) A NUMBER OF LOCATIONS
.* IF THE AREAS BEING CLEARED ARE CHARACTER,THE MACRO WILL MOVE
.* THE FIELD 'BLANKS' TO THE AREA.
.* IF THE AREA IS A HALF WORD,FULL WORD THEN RO WILL BE SET TO
.*   0 AND STORED
.* IF A DOUBLE WORK IF FOUND,OR A BIT FIELD,THEN AN XC TO ITSELF
.*   WILL BE GENERATED.
           LCLA &THISP,&ORIGL,&OFFSET,&L
           LCLC &IND,&INST,&LABEL
&LABEL     SETC '&NAME'
&THISP     SETA 1              START AT FIRST PARAMETER
&IND       SETC ' '            SET INDICATOR TO ' '
.LUP       AIF (&THISP LE N'&SYSLIST).CLEAR
           MEXIT
.CLEAR     ANOP
           AIF (T'&SYSLIST(&THISP) EQ 'C').CHAR
           AIF (T'&SYSLIST(&THISP) EQ 'B').BIT
           AIF (T'&SYSLIST(&THISP) EQ 'D').DBL
           AIF ('&IND' NE ' ').ST
&LABEL     SR  0,0             CLEAR 0
&IND       SETC '1'
.ST        AIF (T'&SYSLIST(&THISP) EQ 'H').HALF
           AIF (T'&SYSLIST(&THISP) EQ 'F').FULL
           AGO .DBL            DO AN XC THEN
           USING TKNX,R3
           AGO .ADD1
.HALF      ANOP
           STH 0,&SYSLIST(&THISP)  SET &SYSLIST(&THIS) TO 0
           AGO .ADD1
.FULL      ANOP
           ST  0,&SYSLIST(&THISP)  SET &SYSLIST(&THIS) TO 0
           AGO .ADD1
.DBL       ANOP
.BIT       ANOP
&LABEL     XC  &SYSLIST(&THISP),&SYSLIST(&THISP) SET TO 0
           AGO .ADD1
.CHAR      ANOP
           AIF (L'&SYSLIST(&THISP) GT 20).LONG
           AIF (L'&SYSLIST(&THISP) NE 1).MUVBLNK
&LABEL     MVI &SYSLIST(&THISP),C' ' MOVE 1 BLANK
           AGO .ADD1
.MUVBLNK   ANOP
&LABEL     MVC &SYSLIST(&THISP),BLANKS SHIFT BLANKS IN
           AGO .ADD1
.LONG      ANOP
&LABEL     MVI &SYSLIST(&THISP),C' ' SET FIRST BYTE TO ' '
.* NOW WE MUST MOVE +0 TO +1 ETC TILL ENTIRE STRING IS CLEARED
&ORIGL     SETA L'&SYSLIST(&THISP)
&L         SETA L'&SYSLIST(&THISP)-1
&OFFSET    SETA 1
.CLRLUP2   AIF (&L LE 256).ONEMVC
           MVC &SYSLIST(&THISP)+&OFFSET.(256),&SYSLIST(&THISP)-1+&OFFSE*
               T PROPOGATE
&OFFSET    SETA &OFFSET+256
&L         SETA &L-256
           AGO .CLRLUP2
.ONEMVC    MVC &SYSLIST(&THISP)+&OFFSET.(&ORIGL-&OFFSET),&SYSLIST(&THIS*
               P)-1+&OFFSET
.ADD1      ANOP
&THISP     SETA &THISP+1
&LABEL     SETC ' '
         AGO .LUP
         MEND
         TITLE 'JOL SCHEDULER MAIN-LINE'
         COPY  JOLGLOBL                                           J50
*        GBLC  &TYPE
&TYPE    SETC    'SCHED'
         $UJEPARM
         PRINT DATA                                               75311
***********************************************************************
*                                                                     *
* CODE FOR IF ERROR IS INCORPORATED IN THIS DESCRIPTION OF THE MAIN-  *
*  LINE ROUTINE                                                       *
*                                                                     *
*        CALL  UJE98INI;      /* IF ANY ERRORS (NO DD'S FOR SCHEDULER,*
*                                  ETC),                              *
*                             OR IF PROBLEM PROGRAM RETURNED A VALUE  *
*                             THAT CAUSES JOB TO BE FLUSHED,          *
*                             A NON-ZERO RETURN CODE IS GIVEN, AND    *
*                             THE JOB WILL BE FLUSHED.                *
*                        NOTE:- ABENDS DO NOT CAUSE AN ERROR HERE.    *
*                             */                                      *
*        IF R15,=0 THEN                                               *
*        DO;                                                          *
*           SET GOBACK /* TO OS */ ON;                                *
*           RETURN 4000;                                              *
*        END;                                                         *
*                                                                     *
*        CALL  UJE50RD;       /* READ A STMT FROM 'INSTRUCT' FILE */  *
*        IF R15>=0 GO TO EOF; /* GO TO END OF JOB */                  *
*                                                                     *
*        SET  R4=COND(LEVEL*8 + NEST);                                *
*                                                                     *
*        IS INSTRUCT='IF' ?                                           *
*        YES, DO;                                                     *
*                                                                     *
*              SET 0(R4)='T';                                         *
* E00CLIF:     CALL IF;                                               *
*              IF TRUE        /* CHECKS FOR ABEND, AND IF 'ERROR' */  *
* NEW          THEN DO;                                               *
* NEW               CALL UJE50RD;                                     *
* NEW               IF R15>=0,                                        *
* NEW               GO TO EOF;                                        *
* NEW               IF 'IF' GO TO E00CLIF; /* TEST NEXT IF IN CHAIN*/ *
* NEW               ELSE GO TO E00EXECI;(EXECUTE INSTRUCTION) ;       *
*              END;                                                   *
* SKIP:        ELSE SKIP TILL MATCHING END ETC;                       *
*                                                                     *
*        END;                                                         *
*                                                                     *
* NEW    IF ABEND OCCURED                                             *
* NEW      AND CURRENT LEVEL,NEST                                     *
* NEW      <=  ERROR LEVEL,NEST (LEVEL,NEST ABEND OCCURED AT)         *
* NEW      THEN DO;           /* IE, SKIP INSTRUCTION BECAUSE ABEND*/ *
* NEW          CLEAR INERROR  /* CLEAR ERROR LOOP INDICATOR*/         *
* NEW          GO TO SKIP;    /* ALLOWS FOR IF ERROR, DO; */          *
* NEW      END;               /* ETC */                               *
*    /* NO ABEND */                                                   *
* EXECUTE-INSTRUCTION:        /* BRANCHED TO BY 'IF TRUE'             *
*                             ROUTINE ABOVE, THEREBY SKIPPING         *
* NEW                         THE 'IF ABEND AND LEVELS' ABOVE.        *
* NEW                                                                 *
* NEW                         HENCE, IF ERROR WILL FUNCTION */        *
*                                                                     *
*                                                                     *
*        IF A 'DO'                                                    *
*        THEN DO;                                                     *
*              NEST=NEST+1; GO TO READ;                               *
*        END;                                                         *
*                                                                     *
*        IF AN 'END'                                                  *
*        THEN  DO;                                                    *
*              NEST=NEST-1;                                           *
*              IF NEST=0                                              *
*              THEN LEVEL=LEVEL-1;                                    *
*              GO TO READ;                                            *
*        END;                                                         *
*        IS IT AN 'ELSE' ?                                            *
*        YES, DO;                                                     *
*              IS 0(R4)='T'                                           *
*              YES, ELSE MUST BE FALSE, GO TO SKIPLOOP;               *
*              NO,GO TO READ;                                         *
*        END;                                                         *
*                                                                     *
*  /* OTHER */                                                        *
*                                                                     *
*        BRANCH TO PROCESSING ROUTINE                                 *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE
         JOLSAVE CSECT=UJE00SH,BASE=R12
         L    R3,0(R1)
         ESTAE DMPEXT                                             J50
         USING PARMAREA,R3
         USING    TABLES,R5
         L    R5,=A(TABLES)
*        L     R15,=A(CHKFLG)                                     J50
         XI    CHKFLG,X'80'                                       J50
E00VSSTR EQU   *                                                  74365
         CALL  UJE98INI         INITIALISE ROUTINES
         LTR   R15,R15           INIT FAIL OR USER ABEND ?
         BZ    E00FIRST
BADRETN  EQU *
         MVI GOBACK,C'1'
         BAL   R11,UJEFILES   GO CLOSE ALL FILES
         JOLRETN RC=4000       CANCEL JOB NOW
E00FIRST EQU     *
E00READ  EQU *
E00MAINL EQU *                 THIS IS THE MAIN-LINE.
         CALL UJE50RD          READ NEXT STATEMENT
         LTR R15,R15           READ OK (EOF MAYBEE)
         BNZ E00EOF            EOF,RETURN AFTER SETTING END JOB
*                              INDICATORS.
           LH  R4,LEVEL        LEVEL INDICATOR
           SLL R4,3            *8 (WE ALLOW 8 NESTS PER LEVEL)
           LH R0,NEST
           AR R4,R0
           LA  R4,COND(R4)     THERE,NOW WE CAN LOOK AT 'CONDS'
           CLI LABEL,C' '
           BNE E00LABOK
           MVC LABEL(2),=C'$$'
           MVC LABEL+2(4),STMT
E00LABOK   EQU  *
           CLC =C'IF ',ICOMMAND  IF?
           BNE E00TDO          NO,GO TEST FOR A DO
* OK,CALL THE IF PROCESSOR AND TEST FOR TRUE OR FALSE
           MVI 0(R4),C'T'      SET COND INITIALLY 'TRUE'
           CALL UJE04IF
           LTR R15,R15         IF 0,IT WAS A TRUE 'IF'
         BNZ   E00IFRD0       FALSE, SKIP INSTRUCTION(S) CHG26028 76200
* IF IS TRUE HERE                                        CHG26028 76200
         CALL  UJE50RD        READ NEXT INSTRUCTION      CHG26028 76200
         LTR   R15,R15        GET IT ?                   CHG26028 76200
         BNZ   E00EOF         NO, GO TO EOF ROUTINE      CHG26028 76200
         B     E00EXECI       YES, GO AND PERFORM IT     CHG26028 76200
           SPACE 3
* NOW THE 'IF' IS FALSE
E00IFRD0   MVI 0(R4),C'F'      SET COND TO 'FALSE'
E00IFRD1   CALL UJE50RD        READ THE NEXT INSTRUCTION
           LTR R15,R15
           BNZ E00EOF
           SPACE
E00SKIP  EQU   *                                         CHG26028 76200
           CLC =C'IF ',ICOMMAND  IF THEN...IF THEN SITUATION?
           BE  E00IFRD1        YES,SO SKIP THIS ONE NOW
           CLC =C'MACRO ',ICOMMAND   IS IT A MACRO HEADER ?
           BE E00IFLUP         START SKIPPING UNTIL MATCHING 'END'
           CLC =C'DO ',ICOMMAND IS IT A 'DO;
           BE E00IFLUP         START SKIPPING UNTIL MATCHING 'END'
* HERE IT IS AN ORDINARY INSTRUCTION,AND WE HAVE 'SKIPPED ' IF
*     WE GO AND READ A NEW ONE NOW
           B  E00READ
           SPACE 3
E00IFLUP   EQU  *
* NOW WE HAVE FOUND A MACRO OR A DO
           LA R4,1             SET NUMBER OF OUTSTANDING ENDS TO 1
E00IFRD    EQU  *
           CALL UJE50RD        GET THE NEXT INSTRUCTION
           LTR R15,R15
           BNZ E00EOF          END OF INPUT FILE
           CLC =C'END ',ICOMMAND
           BNE E00TIFMC        GO TEST IF INNER MACRO OR DO
           SH R4,=H'1'         -1 FROM END COUNTER
           BZ  E00READ         GOOD OH,REACHED END OF FALSE LOOP
           B  E00IFRD
           SPACE 3
E00TIFMC   EQU  *
           CLC =C'MACRO ',ICOMMAND
           BE  E00ADD1
           CLC =C'DO ',ICOMMAND
           BNE E00IFRD
E00ADD1    LA R4,1(R4)         UP THE NUMBER OF OUTSTANDING 'ENDS'
           B  E00IFRD          AND READ A NEW INSTRUCTION
*  END IF PROCESSING
           SPACE 3
E00TDO     EQU  *
E00TERR  CLI   ERRORIND,0     HAS AN ABEND OCCURED ?     CHG26028 76200
         BE    E00TDO2        NO, NOT YET                CHG26028 76200
* AN ABEND HAS BEEN DETECTED SOMEWHERE.                  CHG26028 76200
*******************************************************************DASD
*  IF ERROR SWITCH SETTINGS USING FIELD "INERRORL"                *DASD
*                                                                 *DASD
*  BYTES 0-3 ON = IF ERROR LOGIC IN PROCRESS                      *DASD
*           OFF = NO IF ERROR LOGIC REACHED AS YET OR             *DASD
*                 CURRENTLY RUNNING IF ERROR AT ABEND LEVEL       *DASD
*  BYTES 4-7 ON = IF ERROR LOGIC REACHED AND ABEND OCCURED        *DASD
*           OFF = NO ABEND OCCURED WITHIN IF ERROR LOGIC          *DASD
*******************************************************************DASD
         TM     INERRORL,X'0F' IF ERROR ON WITH AND ABEND ?        DASD
         BZ     E00SKIP      NOPE   LETS SKIP ANY RUNNING AFTER ABEDASD
         CLC   LEVEL(L'LEVEL+L'NEST),ERRLEVEL            CHG26028 76200
         BH    E00TDO2        OK, IF ERROR THEN DO LOOP  CHG26028 76200
         MVI   INERRORL,X'0F' TURN OFF 'IN ERROR LOOP'   CHG26028  DASD
         B     E00SKIP        SKIP INSTRUCTION(S)        CHG26028 76200
E00TDO2  EQU   *                                         CHG26028 76200
E00EXECI EQU   *                                         CHG26028 76200
         SPACE 2                                         CHG26028 76200
           CLC =C'DO ',ICOMMAND IS IT A 'DO'
           BNE E00TMAC         NO,TEST IF 'MACRO'
           LH  R1,NEST         ADD
           LA  R1,1(R1)            1 TO
           CH  R1,=H'8'                NEST
           BH  E00DOERR            IF NOT
           STH R1,NEST         T00 BIG
           B   E00READ         AND READ A NEW RECORD
E00DOERR   JOLERR 505,'TOO MANY DOS'   (THIS ABENDS,U0001)
           SPACE 3
E00TMAC    CLC =C'MACRO ',ICOMMAND
           BNE E00TEND
           LH  R1,LEVEL
           LA  R1,1(R1)
         CH    R1,=H'7'                                  JOL30114 76200
           BL  E00MACOK
           JOLERR 508,'TOO MANY LEVELS'  (ABENDS TOO)
E00MACOK   STH R1,LEVEL
           LA R1,SAVENEST(R1)
           MVC 0(1,R1),NEST+1 SAVE THE NEST SO WE CAN RESET AT MACRO
*                              END SO AS NOT TO LOSE OURSELVES
           XC  NEST,NEST
           B   SETMACRO        TRUE 'LOOP',SET UP MACRO START
           SPACE 3
E00TEND    CLC =C'END ',ICOMMAND WELL,PERHAPS IT IS AN 'END'
           BNE E00TELSE        NOPE,GO TEST IF IT IS AN'ELSE' THEN
           SPACE
           LH  R1,NEST         NOW REDUCE 'NEST'
           SH  R1,=H'1'
           BM  E00ENDMC        IF <0 IF IS A 'MACRO' END
           STH R1,NEST
           B   E00READ        *********************** MARCH 12 76
           BCTR R4,0           -1 FROM R4                         75311
           MVI 0(R4),C' '      CLEAR COND                         75311
           B   E00READ
           SPACE 3
E00ENDMC   EQU *
* NOW THE'MACRO END' REQUIRES SPECIAL ATTENTION BECAUSE WE MUST
*     STORE THE HIGHEST RETURN CODE FROM THE PROGRAMS EXECUTED
*     BY THE MACROS.
           LH R1,LEVEL
           LA R15,SAVENEST(R1)
           SH R1,=H'1'
           BNM E00MACEN
           JOLERR 506,'TOO MANY ENDS'  (ABENDS)
           SPACE 3
E00MACEN   EQU  *
           STH R1,LEVEL
           MVC NEST+1(1),0(R15)
           SPACE 3
** STORE THE HIGHEST RETURN CODE FROM THE MACRO
           LA R7,IDSTART
           LH R1,NOIDS
           MH R1,=H'18'
           LR R15,R7
           AR R7,R1
           LH R14,=H'-18'
           LR R1,R7
           USING IDOVLY,R1
           MVC DBL,IDRETN
           L R7,DBL
**** CHECK FOR A DEAD MARCO HEADER WITH A -1 RETURN CODE AND BYPASSDASD
           CLC  DBL(4),=F'-1'                                      DASD
           BNE E00LUP10
           SR R7,R7
E00LUP10   CLC IDNAME,=CL8'MACRO'
           BE  E00GMAC
           MVC DBL,IDRETN
**** CHECK FOR A DEAD MARCO HEADER WITH A -1 RETURN CODE AND BYPASSDASD
           CLC  DBL(4),=F'-1'                                      DASD
           BE   E00BXH1                                            DASD
           C R7,DBL
           BH  E00BXH1                                             DASD
*          BL  E00BXH1                                             DASD
           L   R7,DBL
E00BXH1    BXH R1,R14,E00LUP10
           JOLERR 507,'NO MACRO START'
E00GMAC    ST R7,CALLAREA
           MVC IDRETN,CALLAREA
           MVC IDNAME,=CL8' '  TO GET RIGHT EFFECT FOR NESTED MACROS
           B   E00READ
           SPACE 3
E00TELSE   EQU *
* NOW THE 'ELSE' MUST BE TESTED
           CLC =C'ELSE ',ICOMMAND
           BNE E00TFALS       NOT ELSE,TEST IF FALSE 'LOOP'
           CLI 0(R4),C' ' WAS AN 'IF' JUST PROCESSED ?
           BNE E00ELSOK
           JOLERR 402,'ELSE IGNORED'
           SPACE 3
E00ELSOK   EQU *
           CLI 0(R4),C'F'      LAST FALS ?
           BNE E00TLTRU
           MVC 0(2,R4),=C'  '      TURN OFF COND CODE ALTOGETHER
           B  E00READ
E00TLTRU   B  E00IFRD1    GO JOIN 'IF' FALSE PROCESSOR
           SPACE 3
E00TFALS   EQU *
E00ORD     EQU *
           CLEAR ISRUN
           L   R1,=A(JE00TBL1) LOAD ADDRESS OF TABLE WITH THE
*                              INSTRUCTION NAMES AND THE ADDRESSES
*                              OF THE ROUTINES TO HANDLE THEM.
           LM  R7,R9,0(R1)     LOAD BXLE ADDRESS CONSTANTS FOR
*                              THE ABOVE TABLE.
E00FINDR   EQU  *
           CLC ICOMMAND,0(R7)   COMPARE INSTRUCTION TO THAT IN TABLE
           BE  E00GOTRT        GOT THE ROUTINE TO HANDLE IT.
           BXLE  R7,R8,E00FINDR
E00ERROR   EQU  *
           JOLERR 503,'INVALID INSTRUCTION ''',ICOMMAND,               *
               ''' IN SCHED'
           SPACE 3
E00GOTRT   L   R15,8(R7)       LOAD ROUTINE ADDRESS
           BALR R14,R15
           CLI ISRUN,C'1'      WAS A RUN JUST PROCESSED ?
           BE  E00FNDRN        YES,TWAS A RUN
           LTR R15,R15         DID PROCESSOR HANDLE NORMAL INSTRUCTION
*                              (EG TYPE,DELETE ETC??)
           BZ  E00MAINL        YES,SO TRY NEXT INSTRUCTION.
* HERE AN INSTRUCTION WAS EXECUTED,BUT RETURNED A NON-ZERO
*     CODE.
           CH  R15,=H'4'       RETURN TO OS AFTER SKIPPING TO
*                              THE RIGHT JOB STEP ?
           BE E00STPON         STEP ON TO A NEW OS STEP.
           CH R15,=H'4000'     STOP ETC EXECUTED ?
           BE BADRETN
E00CLRC    MVC 0(2,R4),=CL2' '
           B  E00MAINL
           B  *+4
           B  *+4
           B  *+4
           B  *+4
*     SET THE INDICATOR WHICH TELLS OUR CALLER (THE MONITOR)
*     TO  RETURN TO OS SO IT CAN SKIP STEPS (OR CANCEL THE JOB)
           SPACE 3
           SPACE 3
RETURN     EQU  *                                                 74365
E00EOF         EQU  *
* WE HAVE READ AN EOF ON THE INSTRUCTION FILE,SO WE WANT TO
*     GET TO THE END OF THE JOB
*                                                        CHG26028 76200
* IF AN ABEND HAS OCCURED, WE SHOULD SET A RETURN OF     CHG26028 76200
*  4000 SO THAT THE JOB WILL TERMINATE AS QUICKLY AS     CHG26028 76200
*  POSSIBLE (LETS NOT WASTE TOO MUCH TIME...)            CHG26028 76200
         SPACE 1                                         CHG26028 76200
         CLI   ERRORIND,0     DID AN ERROR OCCUR ?       CHG26028 76200
         BE    E00EOF2        NO, SO TERMINATE NICELY    CHG26028 76200
*                             (IF SLOWLY...)             CHG26028 76200
         MVC   LASTCC+2(2),=H'4000' SET RC=4000          CHG26028 76200
         B     RETNNOW        CLOSE FILES, RETURN.       CHG26028 76200
E00EOF2     LA R11,1            SET EOF INDICATOR ON
           MVC GOTOLAB,=XL8'FFFFFFFFFFFFFFFF' SET IMPOSSABLY HIGH LABEL
*                              NUMBER IN GOTOLAB,SO WE WILL MARK ALL
*                              THE STEPS UNTIL EOJ WITH COND=ONLY
           B  E00FINDS         FIND THE NEXT OS STEP
           SPACE 3
E00STPON   EQU *
           SR  R11,R11         SET EOF INDICATOR OFF
* NOW WE HAVE TO ORGANISE FOR OS TO STEP ON TO ANOTHER
*     STEP FOR US.
* WE CAN BE NASTY (SET NEXT STEP SCT TO ANOTHER STEP WAY DOWN
*     THE QUEUE)
* OR WE CAN BE KIND,IE SET UP A FEW COND=ONLY'S AND LET OS
*     GET THERE ITSELF.
* WE COULD BE LUCKY,I SUPPOSE,AND THE NEXT STEP WE WANT
* COULD REALLY BE THE NEXT OS STEP.
          SPACE
* NOW IF IT WAS A RUN STATEMENT WE WERE TOLD TO STEP ON FOR,
* THE STEP WE WANT MUST BE THERE.
*     IF IT WAS A CATLG ETC THAT WE HAD TO STEP ON FOR,
* WE COULD FIND THAT THE ACTUAL STEP WON'T BE THERE BECAUSE
* THE GENERATOR MAY HAVE CONBINED SEVERAL STEPS TO CUT DOWN
* THE NUMBER OF OS STEPS PRODUCED. IN THAT CASE,WE MERELY
* FIND A STEP THAT IS LESS THAN OR EQUAL,AND BRANCH TO IT
          SPACE
E00FINDS  EQU *
*          MVI SCTANSCT+3,0     ***** SET Z=0 (OK,ONLY READ)
           CLC SCTANSCT,=A(0)   LAST STEP IN JOB ? (THE NEXT ONE*****)
            BNE E00PNT         NOT EOF ON JOBQ
           LTR R11,R11         EOF ON MY Q?
           BNZ E00TEST         YES,SO MERELY RETURN TO OS
E00NOSTP   JOLERR 504,'CANNOT FIND STEP ',GOTOLAB
           SPACE 3
E00PNT     EQU *
           GETJOBQ SCTDECB,SCTANSCT READ THE SCT,AFTER POINTING
* NOW IS IT THE STEP WE WANT ?
           CLC SCTSNAME,GOTOLAB
           BE  E00GOTRS        GOT RIGHT STEP
* NOW AS MENTIONED EARLIER,WE MAY HAVE GONE TOO FAR IT WE WERE
*     DOING A SCRATCH FOR US.
* HOWEVER (3.0) WE MAY HAVE A REAL STEP NAME ON THE GENERATED JCL 75311
*  AND IF SO WE MUST CONTINUE EXAMINING THE JOBQ                  75311
           CLC =C'$$',GOTOLAB  REAL STEP Ý JOL STEP NAME ?        75311
           BNE E00REWR         REAL, SO TOSS THIS SCT BACK WITH   75311
*                              COND=ONLY, AND CONTINUE            75311
           SPACE 1                                                75311
           BH E00GOTRS         WELL IT WILL DO ANYWAY EVEN IF IT
*                              IS A LITTLE HIGH
           SPACE
* NOW THE SCT IN CORE MUST BE REWRITTEN WITH COND=ONLY UNLESS
*     IT IS THE CURRENT OS STEP
E00REWR    EQU *                                                  75311
           CLC JCTSSTR(3),SCT  CURRENT OS STEP ?
           BE E00TEST          YES,SO DON'T UPDATE AND OUTPUT
* SET COND=ONLY SO NEXT STEP (THIS SCT IN CORE) WON'T RUN
           MVC SCTABCND(3),=X'010000'
           PUTJOBQ SCTDECB     OUTPUT SCT AGAIN
           B E00FINDS
           SPACE 3
E00GOTRS   EQU *
E00TEST   EQU  *
           POINT RETN,TTR$RETN
           WRITE E00RET2,SF,RETN,READAREA,'S'
           CHECK E00RET2
           SPACE 3
RETNNOW    EQU *
           MVI GOBACK,C'1'
           CLI IBMRTN,C' '     ARE WE USING AN IBM ROUTINE TO     *****
*                              ACCESS JOBQ ?                      *****
           BE  E00NDEL1        NO, SO DON'T TRY TO DELETE IT      *****
           DELETE EPLOC=IBMRTN YES, DELETE WHICH EVER ROUTINE     *****
E00NDEL1   EQU *                                                  *****
*          CLOSE (INSTRUCT,,PRINT,,RETN,,JOBQ)                    *DASD
           BAL   R11,UJEFILES   GO CLOSE ALL FILES                 DASD
           L   R15,LASTCC                                         75311
           JOLRETN RC=(15)                                        75311
E00FNDRN   EQU  *
           LTR R15,R15         DO WE HAVE TO SKIP TO A NEW
           BNZ E00STPON        OS STEP FOR THIS RUN ?
           SPACE 3
SETMACRO   EQU  *
* RUN IT NOW
           LH  R1,NOIDS
           LA  R1,1(R1)
           CH  R1,MAXIDS
           BL  MUVNAME
           LH  R1,MAXIDS
           CVD R1,DBL
           UNPK DDPRIM,DBL
           OI  DDPRIM+L'DDPRIM-1,X'F0'
*******************************************************            DASD
* NOW BEFORE ABENDING WE WILL TAKE A LOOK AT THE RETN *            DASD
* TABLE FOR A USED MACRO HEADER AND OVERLAY IT MAKING *            DASD
* ROOM FOR 1 NEW GUY                                  *            DASD
*******************************************************            DASD
         LH    R15,NOIDS      LOOK THIS MANY TIMES                 DASD
         LA    R1,18                                               DASD
         LA    R1,IDSTART(R1) START LOOKING HERE                   DASD
         USING IDOVLY,R1                                           DASD
SLIDELOP CLC   IDNAME,=CL8'MACRO' IS THIS GUY USED ?               DASD
         BNE   SLIDEUP        YEA MOVE IT UP                       DASD
         LA    R1,18(R1)      UP TO NEXT GUY                       DASD
         BCT   R15,SLIDELOP                                        DASD
* WELL GUY WHAT NOW ???????                                        DASD
           JOLERR 501,'MAX ',DDPRIM,' STEPS EXCEEDED'
SLIDEUP  MVC   0(18,R1),18(R1) SLIDE THE REST UP 1                 DASD
         LA    R1,18(R1)      INCR TO NEXT SLOT                    DASD
         BCT   R15,SLIDEUP    LETS DO EM ALL                       DASD
         LH    R1,NOIDS       NOW LOAD NO OF IDS AGAIN             DASD
MUVNAME    STH R1,NOIDS
           MH  R1,=H'18'
           LA R1,IDSTART(R1)
           USING IDOVLY,R1
           MVC IDSTMT,STMT
           OC IDSTMT,=C'0000'
           MVC IDNAME,TASKLABL
           MVC IDNEST,NEST
           MVC IDLEVEL,LEVEL
           MVC IDRETN,=F'-1'
           CLC =CL8'MACRO',ICOMMAND
           BNE NOTMACH
           MVC IDNAME,=CL8'MACRO'
           B  E00MAINL
NOTMACH    EQU  *
* WE MUST NOW WRITE THE PROGRAM NAME IN THE PGM FIELD OF THE SCT
*    SO THAT SMF WILL BE OK
           GETJOBQ SCTDECB,JCTSSTR GET SCT,AFTER POINT
           CLC =C'$JOLMN',SCTPGMNM    FIRST PROGRAM GETS SMF RECORD 3.1
           BNE E00SMF1
           MVC SCTPGMNM,RUNNAME
E00SMF1    EQU   *
           PUTJOBQ SCTDECB     RE-WRITE SCT
* OK LET'S XCTL
           POINT  RETN,TTR$RETN
           WRITE DECBRET1,SF,RETN,READAREA,'S'
           CHECK  DECBRET1
           SPACE 1                                                74365
           CLI VS,C' '         ARE WE RUNNING UNDER VS ?          74365
* IF WE ARE,WE WILL ATTACH NOW RATHER THAN XCTLING AND CLOSING    74365
*          AS THIS IS FASTER AND VS CAN ROLL US OUT QUICKLIY      74365
           BNE E00ISVS         IS VS,DO THINGS DIFFERENTLY        74365
           CLI IBMRTN,C' '     ARE WE USING AN IBM ROUTINE TO     *****
*                              ACCESS JOBQ ?                      *****
           BE  E00NDEL2                                           *****
           DELETE EPLOC=IBMRTN YES, DELETE IT                     *****
E00NDEL2   EQU *                                                  *****
*          CLOSE (INSTRUCT,,PRINT,,RETN,,JOBQ)                    *DASD
           BAL   R11,UJEFILES   GO CLOSE ALL FILES                 DASD
           MVC DBL(4),STMT    SAVE STATEMENT NUMBER WHILE         75128
*                              PROBLEM PROGRAM IS EXECUTING
           L   R1,ATASKPRM                     LOAD ADDR OF PARAMETER
           ST R1,CALLAREA
           MVI CALLAREA,X'80'
           L   R13,4(R13)                      RESET SAVE ADDR
           L   R14,12(R13)                     RESET RETURN ADDR
           XCTL (2,12),DE=RUNNAME,DCB=0,MF=(E,CALLAREA)
           SPACE 3                                                75311
E00ISVS    MVC DBL,STMT        SHIFT STATEMENT NUMBER             75311
* 3.0 - MVS CODE                                                  75311
*                                                                 75311
* FOR 3.0 WE WILL ATTACH THE PROBLEM PROGRAM UNDER THE MONITOR,   75311
* THAT IS, WE SHALL RETURN AS USUAL.                              75311
*                                                                 75311
* LATER, WHEN THIS CODE IS RE-ENTRANT, IT WILL BE MORE            75311
* EFFICENT TO ATTACH IT HERE, BUT VS1 IS A BIT OF A PROBLEM       75311
* BECAUSE IT DOESN'T HAVE 16MEGABYTES TO PLAY WITH.               75311
           BAL   R11,UJEFILES   GO CLOSE ALL FILES                 DASD
           JOLRETN RC=0        UJEMON WILL LOOK AT 'VS' TOO.      75311
*  D  *    MVC CALLAREA(4),ATASKPRM                                DASD
*  E  *    MVI CALLAREA,X'80'                                      DASD
*  A  *    XC TASK2ECB,TASK2ECB                                    DASD
*  D  *    LA R1,CALLAREA                                          DASD
*     *    ATTACH DE=RUNNAME,ECB=TASK2ECB          74365           DASD
*  M  *    LR  R11,R1          SAVE TCB ADDRESS                    DASD
*  V  *    WAIT 1,ECB=TASK2ECB                                     DASD
*  S  *    MVC TASKRETN(1),X'1D'(R11) SHIFT IN ABEND CODE          DASD
*     *    MVC TASKRETN+1(3),TASK2ECB+1 AND RETURN CODE            DASD
*  C  *    ST R11,CALLAREA                                         DASD
*  O  *    DETACH CALLAREA                                         DASD
*  D  *    B E00VSSTR          BACK TO MAINLINE                    DASD
*  E  *    B *+4                                                   DASD
*     *    B *+4                                                   DASD
*     *    B *+4                                                   DASD
*************************************************************      DASD
*  CLOSE ANY OPEN FILES BEFORE RETURNING TO THE MONITOR     *      DASD
*        MVS  WILL ABEND-C03                                *      DASD
*************************************************************      DASD
UJEFILES EQU   *                                                   DASD
         ST    R11,UJEFILSV                                        DASD
         LA    R14,INSTRUCT                                        DASD
         BAL   R11,UJEFCLSE                                        DASD
         LA    R14,PRINT                                           DASD
         BAL   R11,UJEFCLSE                                        DASD
         LA    R14,RETN                                            DASD
         BAL   R11,UJEFCLSE                                        DASD
         LA    R14,JOBQ                                            DASD
         BAL   R11,UJEFCLSE                                        DASD
         L     R11,UJEFILSV                                        DASD
         BR    R11                                                 DASD
UJEFCLSE EQU   *                                                   DASD
         TM    48(R14),X'10'  IS FILE OPEN ??                      DASD
         BZ    0(R11)         NOPE  RETURN                         DASD
         CLOSE ((14))         CLOSE THIS GUY                       DASD
         BR    R11            RETURN                               DASD
UJEFILSV DS    F              SAVE AREA FOR RETURN LOCATION        DASD
*
* THE FOLLOWING LOCATIONS ARE USED FOR READING AND WRITING
*  THE SYSTEM JOBQ
*
* LOCN 1 CONTAINS THE TTR OF THE RECORD WRITTEN
* LOCN 2 CONTAINS THE ADDRESS (IN DISPACEMENT FORM) OF THE AREA
*  TO BE USED AS THE READ/WRITE AREA
*
JCTDECB  DC    F'0'
         LA    R1,JCT         EXECUTED ***
         SPACE
SCTDECB  DC    F'0'
         LA    R1,SCT
         SPACE
PDQDECB2 DC    F'0'
         LA    R1,PDQ
         SPACE
SIOTDECB DC    F'0'
         LA    R1,SIOT
         SPACE
JFCBDECB DC    F'0'
         LA    R1,INFMJFCB
         SPACE
PDQDECB  DC    F'0'
         LA    R1,PDQBLK
           SPACE 3
ISINPDQ    DS CL1
ISRUN      DC C' '
RETNBLKS   DS  H
PDQDSNNO   DS  H
GOTOLAB    DS  CL8
APDQDIR    DS  A
SVC35      EQU 35
           SPACE 3
STMT       DC  CL4'  10'
LABEL      DS  CL8
COMMAND    DS  CL8
GETATKN   LA R1,TKNX
          L  R15,=V(UJCGETKN)
          BR R15                                                  75128
          SPACE 3
           SPACE 3
* GET/PUT JOBQ ROUTINES CALLED BY GETJOBQ/PUTJOBQ MACROS
* ON ENTRY R0-> CONTROL AREA CONTAINING TTR SAVE SPACE, AND A(AREA)5128
*          R1-> TTR REQUIRED                                      74365
*
* A SEPERATELY ASSEMBLED CSECT CALLED UJEJOBQ IS RESPONIBLE
*  FOR ACTUALLY CALLING THE IBM MODULE 'IEFQMRAW' TO DO THE
*  JOBQ TRANSFERS
*
*  THE PARAMETERS 'UJEJOBQ' WANTS ARE :-
*  R1-> :-
*     1. A(RECEIVE/WRITE AREA)
*     2. A(TTR POINTER)
*     3. TRANSFR TYPE 4=READ ETC
*     4. A(IEFQMRAW)               IBM ROUTINE
*
GETJOBQ  MVI   CALLAREA+11,4   READ INDICATOR TO PUT IN IEFQMRAW
         B     E00JOBQ
PUTJOBQ  MVI   CALLAREA+11,X'03'  WRITE INDICATOR FOR QM          75128
         LR  R15,R0        GET CONTROL AREA ADDRESS
         L   R1,0(R15)     GET TTR FROM SAVED AREA
E00JOBQ  LR    R15,R0         LOAD R15 A(CONTROL BLOCK)           75128
         IC    R1,=AL1(0)     SET BOTTOM BYTE TO 0                 3.1
         ST    R1,0(R15)      STORE TTR REQD IN CONTROL BLOCK     75128
         ST    R1,CALLAREA+4  AND IN PARM FOR UJEJOBQ             75128
         EX    R0,4(R15)      EXECUTE LA INSTRUCTION TO FIND      75128
*                             ADDRESS OF AREA TO READ/WRITE       75128
         ST    R1,CALLAREA    SET PARM(1)                         75128
         MVC   CALLAREA+12(4),AQMRAW SHIFT A(IEFQMRAW)            75128
         B    *+4    ******************************************
         B    *+4    ******************************************
         ST    R14,IEFQRETN    SAVE RETURN ADDRESS
         LA    R1,CALLAREA    SET R1 UP PROPERLY                  75128
         L     R15,=V(UJEJOBQ) LOAD JOL'S INTERFACE TO IEFQMRAW   75128
         BALR  R14,R15         AND BRANCH TO IT                   75128
         LTR   R2,R15         DID WE MANAGE FUNCTION ?            75128
         BZ E00RMODE
         JOLERR 509,'UNABLE TO READ/WRITE JOBQ'                   75128
         SPACE
E00RMODE EQU   *                                                  75128
*        UNSUP      LA R1,X'24' SVC 107                           75128
         L     R1,CALLAREA+4  RELOAD TTR FOR CALLER IN CASE HE WANT5128
         L     R14,IEFQRETN    LOAD RETURN ADDRESS
         BR    R14             AND GO BACK
         SPACE 3
E00FXVOL MVI     VOL,C' '  CLEAR TO BLANKS                         DASD
         MVC     VOL+1(L'VOL-1),VOL                                DASD
         LA R1,VOL-1                                              74365
         LA R15,DDVOLUME                                          74365
E00SHFTC MVI 0(R1),C','       SHIFT IN COMMA TO SEPERATE VOLS    74365
         MVC 1(6,R1),0(R15)    SHIFT IN A VOLUME                  74365
           LA  R1,6(R1)        STEP OVER ',VOLUME'                 DASD
           LA R15,6(R15)       STEP OVER VOLUME                   74365
         CLI   0(R1),C' '      DROP EXTRA BLANKS (IF L'VOL<6)     74365
           BNE *+8             NOT BLANK                          74365
         BCT   R1,*-8          IS BLANK,DROP R1 BY 1              74365
           LA  R1,1(R1)        SKIP TO NEXT POSITION              75311
           CLI 0(R15),C' '     LAST VOL ?                         74365
           BE E00SETVL         YEP, OUT WE GO (NEARLY)            74365
           C R15,=A(DDVOLUME+30)   END LIST                       74365
           BNH E00SHFTC
E00SETVL   S  R1,=A(VOL-1)                                       75003
           STH  R1,#VOL
           BR R14                                                 74365
UJS23EP5   LA  R1,5
           B   UJS23SET
UJS23EP4   LA  R1,4
           B   UJS23SET
UJS23EP3   LA  R1,3
           B   UJS23SET
UJS23EP2   LA  R1,2
           B   UJS23SET
UJS23EP1   LA  R1,1
           B   UJS23SET
UJS23EP0   SR  R1,R1
UJS23SET   EQU *
           STC R1,S23SEV
           L   R15,=V(UJS23ER)
           BR  R15
AMSGS    DC    A(MSGSECT)                                         J50
* WILL EVENTUALLY RETURN TO R14 ADDRESS
#S23MAX  DC    H'110'              MAX WTO OR LREC SIZE           76200
#S23LNE2 DS    H                   LINE 2 LENGTH                  76200
S23LNE2  DS    CL100               LINE 2 WORK AREA               76200
S23SEV   DS    CL1
S23STMT  DC    XL4'00000000'
#S23BLKS DS    H
         DS    H
#S23LREC DS    H
#S23MSSG DS    H
S23MSSG  DS    CL150                                              74365
         DS    F                                                  75003
#VOL     DC    H'0'                                               75311
VOL      DC    CL50' '                                            75311
TASK2ECB DC    F'0'                                               74365
         DS    F               SPARE
RUNBLDL  DS    0D
         DC    H'1'
         DC    H'68'
RUNNAME  DS    CL8
RUNTTRK  DS    CL4
RUNZ1    DS    CL1
RUNC1      DS  CL1
RUNUSDTA   DS  CL68
UJ00ANS    DS 3F
UJE00DDM    DC CL8'$$PRNT'
           ENTRY RETN,INSTRUCT,PRINT  ******FOR LINK MAP ******   75128
           PRINT NOGEN
RETN       DCB DDNAME=$$INST,DSORG=PO,MACRF=W,                  80290  *
               DEVD=DA,RECFM=FB,LRECL=80,                              *
               BLKSIZE=2560                                        DASD
INSTRUCT   DCB DDNAME=$$INST,DSORG=PO,MACRF=(R,W),DEVD=DA
PRINT      DCB DDNAME=$$PRNT,DSORG=PS,DEVD=DA,RECFM=VB,LRECL=126,      *
               BLKSIZE=136,MACRF=W
JOBQ       DCB DDNAME=$$JOBQ,DSORG=PS,MACRF=(WP,RP),DEVD=DA       *****
           ENTRY JOBQ                                             *****
TEMPDCB  DCB   DDNAME=$$INST,DSORG=PO,MACRF=R,           JOL30116 76200*
               DEVD=DA,EXLST=TEMPEXIT                    JOL30116 76200
TEMPEXIT DS    0A                                        JOL30116 76200
         DC    X'87',AL3(JFCBDSNM)                       JOL30116 76200
ATIOT      DS  A
ATCB       DS  A               ADDRESS OF TCB
AQMRAW   DS    A(0)           IEFQMRAW JOB Q RTN ADDRESS          75128
IBMRTN     DC  CL8' '          NAME OF LOADED IBM ROUTINE TO ACCES*****
*                              THE SYSTEM JOB QUEUE               *****
JCTTTR     DC  A(0)            ADDRESS Ý TTR OF THE JCT (EACH     *****
*                              SYSTEM IS A LITTLE DIFFERENT)      *****
           SPACE 3
           PRINT GEN
#DSNAME    DS 0H
#DSN       DC  H'10'         INITED ONLY FOR TESTS
DSN        DS   0CL44
DSNAME     DC  CL44'NOT INIT'
           SPACE 3
* THIS TABLE IS USED BY THE SCRATCH AND CATLG ROUTINES
*     ALTHOUGH THE JOL PROCESSOR KNOWS WHAT TYPE OF UNIT A 'DD' CARD
*     IS FOR,TO SAVE SPACE IN THE PROCESSOR IT IS NOT CONVERTED
*     TO A FULL IBM UNIT (AND OF COURSE THE USER MAY SPECIFY HIS
*     OWN GENERIC UNIT)
* THIS TABLE IS USED ONLY WHEN A SCRATCH OR CATALOG WAS GIVEN
*     AND THE USER DID NOT CREATE THE DATA-SET IN THIS JOB,AND
*     THERE-FORE OS MAY NOT HAVE CONVERTED IT INTO A NICE LOOKING
*     UMIT FOR US.
HEXUNITS   DC A(*+12)
           DC A(5)
           DC A(HEXUNITE-5)
         COPY  UNITABLE                                            DASD
HEXUNITE   EQU *
         PUSH  USING                                              J50
DMPEXT   DS    0F                                                 J50
         STM   R14,R12,12(R13)                                    J50
         LR    R12,R15                                            J50
         USING  DMPEXT,R12                                        J50
         LA    R3,REGS                                            J50
         ST    R13,4(,R3)                                         J50
         ST    R3,8(,R13)                                         J50
         LR    R13,R3                                             J50
         OPEN  (JOLDUMP,OUTPUT)                                   J50
         LTR   R15,R15                                            J50
         BNZ   DMP010                                             J50
         SNAP  DCB=JOLDUMP,                                       J50  .
               SDATA=(SWA,TRT,LSQA,CB,Q),                         J50  .
               PDATA=(SA,ALLPA,PSW,SPLS)                          J50  .
                                                                  J50
         CLOSE JOLDUMP                                            J50
DMP010   DS    0H                                                 J50
         L     R13,4(,R13)                                        J50
         L     R1,24(,R13)                                        J50
         SETRP RC=0,DUMP=YES,REGS=(14,12)                         J50
REGS     DS    18F                                                J50
JOLDUMP  DCB   DDNAME=JOLDUMP,LRECL=125,DSORG=PS,MACRF=W,         J50  .
               BLKSIZE=882,RECFM=VAB                              J50
         POP   USING                                              J50
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           LTORG
           DS  0D
RETNAREA   EQU *
READAREA   DS CL2560                                               DASD
         ORG   READAREA
TTR$RETN   DS  F               CONSTRUCTED BY BLDL IN SCHEDULER
TTR$INST   DS  F               CONSTRUCTED BY BLDL IN SCHEDULER
NOIDS      DS  H          CURRENT NO OF IDS
LEVEL      DC H'0'
NEST       DC H'0'
COND       DC  CL50' '
ERRORIND DC    X'00'          SET ON IF ABEND            CHG26028 76200
INERRORL DC    X'00'          ON IF CURRENTLY DOING ERRORCHG26028 76200
* NOTE:- DO NOT SEPERATE NEXT TWO LOCATIONS              CHG26028 76200
ERRLEVEL DC    H'0'           SET BY 'UJE04IF' WHEN -    CHG26028 76200
ERRNEST  DC    H'0'           'IF ERROR' FOUND           CHG26028 76200
SAVENEST   DC  XL6'00'
MAXCC      DC  F'0'
LASTCC     DC  F'0'
JOLSVC     DC  X'0A0D'         SVC FROM 'OPTION' INSTRUCTION      75311
IDSTART    EQU *
         ORG
           SPACE 3
*        IHASDWA  LIST=YES  (was KAA)                             J50
         IHASDWA                                                  J50
TABLES CSECT
         COPY DDDSNDET                                            75128
         ORG   DDDSNDET                                           75128
         COPY PGMDETS                                             75128
         SPACE 3                                                  75128
           ORG
           DS  0H
MAXIDS     DC  AL2((READAREA+L'READAREA-IDSTART)/18)
           DC  AL2(0)
BLANKS     DC CL20' '
           LTORG
           EYEBALL JCT
JCT        DS  0D
         IEFAJCTB
         AGO .MVSJCT1
JCT        DS  CL176
           ORG JCT+8
JCTJOBMN   DS  CL8             JOB-NAME
           ORG JCT+24
JCTPDIP    DS  A               QUEUE ADDRESS OF THE PDQ
JCTAGDG    DS  A               QUEUE ADDRESS OF THE GDG BIAS TABLE
JCTASCT1   DS  A               QUEUE ADDRESS OF THE FIRST SCT
JCTASMB1   DS  A               QUEUE ADDRESS OF THE FIRST SMB
JCTAPCT    DS  A               QUEUE ADDRESS OF THE JOB ACCT
JCTASCD1   DS  A               QUEUE ADDRESS OF THE FIRST SCD
JCTADSB    DS  A               QUEUE ADDRESS OF THE LAST DSB
           ORG JCT+88
JCTADSN    DS  A               QUEUE ADDRESS OF DSENQ TABLE.
JCTREGN    DS  AL2
JCTQID     DS  AL1
JCTSNUMB   DS 0AL1
JCT#STPS   DS  AL1             NO OF STEPS
           ORG JCT#STPS
JCTSTEP    DS  AL1
           ORG JCT+107
JCT#TRKS   DS  AL1             NUMBER TRKS OF JOBQ USED THIS JOB
           ORG JCT+112
JCTSSTR    DS  A               QUEUE ADDRESS OF CURRENT (I.E NOW
*                              EXECUTING) SCT
           DS CL60
.MVSJCT1     ANOP
           EYEBALL SCT
SCT        DS  0D
         IEFASCTB
         AGO .MVSSCT1
SCT        DS  CL176
           ORG SCT+12
SCTASIOT   DS  CL3             QUEUE ADDRESS OF NEXT SIOT
           ORG SCT+20
SCTANSCT    DS  AL3             TTR OF NEXT SCT
           ORG SCT+36
SCTAVOLT   DS  AL3             TTR OF VOLT
           ORG SCT+44
SCTPROC    DS CL8
SCTSNAME    DS CL8
           ORG SCT+64
SCT#SIOT   DS  AL1             NO OF SIOTS IN THIS STEP
           ORG SCT+108
SCTPGMNM    DS CL8              PROGRAM NAME
           ORG SCT+121
SCTCOND1   DS  AL2             COND 1
SCTOP1     DS  AL1             OPERATOR 1
SCTACON1   DS  AL3             ADDRESS OF SCT REFERRED TO BY COND
           ORG SCT+160
SCTABCND   DS  AL2             ABEND (OR EIGHTH) COND CODE
SCTOP8     DS  AL1
SCTACON8   DS  AL3
.MVSSCT1       ANOP
           EYEBALL SIOT
SIOT     DS    0D
         IEFASIOT
         AGO .MVSSIOT
SIOT       DS  CL176
           ORG SIOT+4
SIOTDDNM   DS  CL8             DDNAME IN SIOT
           ORG SIOT+28
SIOTASIO   DS  A               ADDRESS OF NEXT SIOT
SCTPJFCB   DS  A               ADDRESS OF CORRESPONDING JFCB TO THIS
*                              SIOT
           ORG SIOT+49
SIOT#VOT   DS  AL1             NUMBER OF VOLS IN THIS STEPS VOLT
SIOTRELV   DS  AL2             RELATIVE POINTER TO VOL TBL ENTRY
SIOTDDNO   DS  AL1             INTERNAL DD NUMBER
SIOT#UNI   DS  AL1             #OF UNITS FOR THIS DATA SET
SIOT#VOL   DS  AL1             #OF VOLS
SCTSDISP   DS  AL1             BIT 0-RESERVED
*                              BIT 1 RETAIN VOLUME
*                              BIT 2 PRIVATE VOLUME
*                              BIT 3 PASS DATA SET
*                              BIT 4 KEEP DATA SET
*                              BIT 5 DELETE DATA SET
*                              BIT 6 CATALOG DATA SET
*                              BIT 7 UNCATLG DATA SET
           ORG SIOT+58
SIOTIND3   DS  AL1
*                              BIT 0 VREF TO DSNAME
*                              BIT 3 VREF IN STEP
*                              BIT 4 SYSOUT SPECIFIED
*                              BIT 5 NEW DATA SET
*                              BIT 6 MOD DATA SET
*                              BIT 7 OLD OR SHR DATA SET
           ORG SIOT+59
SIOTIND4   DS  AL1
*                              BIT 2 NO PDQ PROCESSING
*                              BIT 6 DSN IS IN PDQ
*                              BIT 7 OLD OR MOD DATA SET =0
*                              BIT 7 NEW DATA SET = 1
           ORG SIOT+60
SCTUTYPE   DS CL8
           ORG SIOT+84
SIOTADSB   DS  AL3,CL1         QUEUE ADDRESS OF DSB IF SYSOUT SPECIFIED
SIOTNDSB   DS  AL4             QUEUE ADDRESS OF NEXT DSB
           ORG SIOT+92
SIOTCDSP   DS  AL1             CONDITIONAL DISPOSITIONS
*                              BIT 3 DD IS NOT PRIVATE
*                              BIT 4 KEEP
*                              BIT 5 DELETE
*                              BIT 6 CATLG
*                              BIT 7 UNCATLG
SIOTLPDQ   DS  AL3             ADDRESS OF LAST SIOT TO PASS DATA SET
.MVSSIOT ANOP
           ORG
           EYEBALL PDQ
           DS  0D
PDQ        DS CL176
           ORG PDQ
PDQDSN1    DS  CL44            DSNAME 1 IN PASSED DATA SET QUEUE
PDQDSN2    DS  CL44            DSNAME 2 IN PASSED DATA SET QUEUE
PDQDSN3    DS  CL44            DSNAME 3 IN PASSED DATA SET QUEUE
PDQENTRY   DS  CL1             NUMBER OF ENTRIES IN THIS PDQ
PDQRESD    DS  CL35            JUNK OR SOMETHING
PDQABLK    DS  CL3,CL1         ADDRESS OF ASSOCIATED PDQ BLOCK
PDQNPDQ    DS  CL3,CL1         ADDRESS OF NEXT PDQ DIRECTORY
*THESE FIELDS CORRESPOND TO THE MVS PASSED DATA SET INFORMATION
* BLOCK.
***** IT IS NOT POSSIBLE TO USE AN MVS MACRO FOR THIS FUNCTION
* AS ONE DOES NOT EXIST.
*****
* THIS IS THE ONLY BLOCK THAT HAS CHANGED FROM
* MVT TO MVS ************(SO FAR....) ******
          ORG  PDQ
PDIBLOCK  EQU   *
PDINPDIP  DS   AL3   ADDRESS OF NEXT PDI SVA
PDICTR    DS   AL1   NUMBER OF DSNAMES IN THIS BLOCK
PDIBNXTP  DS   A     NEXT PDI BLOCK (DIFFERS FROM PDINPDIP
*                    ABOVE, AS IT POINTS DIRECTLY AT THE BLOCK,
*                    NOT -16 AS PDINPDIP).
PDIDSNAM  DS   CL44  1ST DSNAME
PDIUNWA   DS   CL1   PASS Q INDICATORS
*                    BIT 0 ON IF INITIAL STATUS=OLD
*                    BIT 1 ON IF CURRENT STATUS=OLD
*                    BIT 2 ON IF PASS,OFF IF RECIEVED
*                    BIT 6 ON IF DSNAME IS A JOBLIB
PDIRESVD  DS   CL1   RESERVED
PDISTPNO  DS   H     STEP NUMBER THAT PASSED
PDISIOTA  DS   AL3,AL1 SVA OF SIOT THAT PASSED DSN
PDISIOTP  DS   A     USED FOR SIOT IN ALLOCATION ONLY.
* THE ABOVE FIELDS ARE REPEATED THREE TIMES.
          ORG  PDIDSNAM
PDIDSN1  DS   CL44
PDITERM1 DS   CL1
PDIRESV1 DS   CL1
PDISTN1  DS   H
PDISIOT1 DS   AL3,AL1
PDISIOW1 DS  A
PDILEN   EQU   *-PDIDSN1
PDIDSN2  DS   CL44
PDITERM2 DS   CL1
PDIRESV2 DS   CL1
PDISTPN2 DS   H
PDISIOT2 DS   AL3,AL1
PDISIOW2 DS   A
PDIDSN3  DS   CL44
PDITERM3 DS  CL1
PDIRESV3 DS   CL1
PDISTPN3 DS   H
PDISIOT3 DS   AL3,AL1
PDISIOW3 DS   A
           ORG
           EYEBALL PDQBLOCK
           DS  0D
PDQBLK     DS   CL176          PASSED DATA SET QUEUE BLOCK
           ORG PDQBLK
PDQCSTEP   DS  CL1             CURRENT STEP NUMBER (OR LAST USE
*                              OF THIS DATA SET)
PDQDDNO    DS  CL1             CURRENT DD NUMBER
PDQTERM    DS  CL1             PDQ TERMINATION WORK AREA
*    IF PDQTERM=B'0010' DD-CARD SAID NEW,PASS
*    IF PDQTERM=B'0100' DD-CARD SAID OLD,KEEP (IE NOT PASSED NOW)
*    IF PDQTERM=B'1110' DD-CARD SAID OLD,PASS (OLD,CURRENT STATUS=OLD)
*    IF PDQTERM=B'1010' DD-CARD SAID OLD,DELETE (OLD,NOT PASSED)
* IT APPEARS THAT ONCE THE CURRENT STATUS BIT IS 0,ANY REFERENCE
*    TO THE DATA SET NAME IS IGNORED (I.E AS THOUGH NEVER ON PDQ).
*
*
PDQ#UCB    DS  CL1             NUMBER OF UCB'S
PDQAJFCB   DS  CL3,CL1         QUEUE ADDRESS OF THIS JFCB
PDQASIOT   DS  CL3             QUEUE ADDRESS OF THIS SIOT
PDQSSTEP   DS  CL1             CURRENT STEP NUMBER (WHICH APPEARS
*                              TO BE ALWAYS THE SAME AS PDQCSTEP ABOVE)
PDQUCBS    DS  CL40
PDQUACBO   DS  CL3,CL1         ADDRESS OF PDQ OVERFLOW BLOCK
PDQBLKLN   EQU *-PDQBLK
* THE ABOVE FIELDS ARE REPEATED TWICE (IE 3 DATA SET DETAILS ALLOWED)
           ORG
           SPACE 3
           EYEBALL JFCB
         IEFJFCBN   LIST=YES                                      76200
QMPA       DS  0D              USED FOR VS CURRENTLY
QMPAJOB    DS  CL8             JOB NAME OR NO-WORK-CHAIN ELEMENT
QMPAFUNC   DS  CL1             FUNCTION CODE
QMPAFLTR   DS  CL2             NN OF 1ST LOGL TRACK ASSIGNED TO ENTRY
QMPANOTR   DS  CL1             NUMBER OF RECORDS ASSIGNED IN THIS TRACK
QMPANXTL   DS  CL2             NN OF NEXT LOGICAL TRACK
QMPANOLT   DS  CL1             NUMBER OF LOGICAL TRACKS ASSIGNED
QMPAJBCD   DS  CL1             JOB TYPE CODE
QMPAJBST   DS  CL1             JOB STATUS CODE
QMPAPRTY   DS  CL1             JOB PRIORITY
QMPANXTQ   DS  CL2             NN OF NEXT QUEUE ENTRY
QMPAQID    DS  CL2             QUEUE ENTRY IDENTIFICATION
QMPAORCL   DS  CL1             ORIGIN CLASS ID
QMPARES1   DS  CL1             RESERVED
QMPATRKS   DS  A               ADDRESS TRACK STACKING PARM LIST
QMPAIND    DS  CL1
           ORG QMPAIND
QMPAAECB   DS  A               ADDRESS OF USERS ECB/IOB
QMPANORC   DS  CL1             1ST 4 BITS=NO OF RECORDS TO ASSIGN
*                              2ND 4 BITS=NO OF RECORDS TO READ/WRITE
QMPAAEXT   DS  AL3             ADDRESS OF EXTERNAL PARAMETER AREA
IEFQATCB   DS  A               ADDRESS OF TCB
IEFQAREC   DS  A               ADDRESS OF RECORD BUFFER
IEFQAQMP   DC  A(QMPA)         ADDRESS OF QMPA
IEFQTTR    DS  A               TTR OF REQUESTED RECORD
IEFQRCLN   DC AL2(176)
IEFQFUNC   DC AL2(0)
IEFQDECB   DS  A               WORK AREA(NOT REQUIRED BY IEFQMMAC)
           DS 0D
           EYEBALL INST
INST       DS  H                               INSTRUCTIONS USE THIS
*                                              AREA AS WORK AREA AND
*                                              THEY ARE WRITTEN FROM
*                                              HERE
           ORG INST
ILENGTH    DS  H                               LENGTH OF RECORD
           DC  H'0'                            FOR VB RECORD DESCRIPTOR
II         DC  C'I'                            RECORD TYPE
ILABEL     DS  CL8                             STATEMENT LABEL
ISTMT      DS  CL4                             STATEMENT NUMBER
ILEVEL     DS  CL1
INEST      DS  CL1
ICOMMAND   DS  CL8                             INSTRUCTION EG 'TYPE'
IBODY      EQU *-ILENGTH                       LENGTH OF FIXED
*                                              PART OF RECORD
ITEXT    DS    CL150                                              75128
           SPACE 3
           EYEBALL TKNX
           COPY  TKNX
           ORG TKNSTRG-IBODY-2
INSTRDA    EQU  *
            ORG
           DS 0D
           LTORG
INSCSECT   CSECT
JE00TBL1   DC  A(JE00TBL2)
           DC  A(12)
           DC  A(JE00END2-12)
JE00TBL2 DC    CL8'RUN     ',V(UJE20RUN)
         DC    CL8'C       ',V(UJE05CAT)        CATLG
         DC    CL8'U       ',V(UJE06UNC)        UNCATLG
         DC    CL8'K       ',V(UJE07KEE)        KEEP
         DC    CL8'S       ',V(UJE08SCR)        SCRATCH
         DC    CL8'D       ',V(UJE09DEL)        DELETE
         DC    CL8'RETURN',V(UJE23RET)                            74365
         DC    CL8'TYPE    ',V(UJE10TYP)
         DC    CL8'DISPLAY ',V(UJE11DIS)
         DC    CL8'SIGNAL  ',V(UJE12SIG)
         DC    CL8'STOP    ',V(UJE13STP)
         DC    CL8'OPTIONS ',V(UJE31OPT)                          75311
JE00END2 EQU   *
PARMAREA DSECT
TASKLABL DC    CL8' '          STEP-NAME (I.E LABEL IN JOL TERMINOLOGY)
TASKNAME DC    CL8' '          NAME OF PROGRAM BEING EXECUTED AS A
*                            SUBTASK
APARM    DS    A
ATASKPRM DS    A               ADDRESS OF GOTTEN STORAGE FOR PARAMETERS
TASKSSI  DC    CL4' '          SSI OF THE SUB-TASK
TASKRETN DC    F'0'            RETURN CODE FROM TASK
TASKECB  DC    F'0'            EVENT CONTROL BLOCK FOR TASK
TASKIND  DC    C' '            SET TO 1 AFTER SCHEDULER CALLED
*                            THE FIRST TIME.
GOBACK   DC    C' '            NOT BLANK MEANS RETURN TO OS NOW
*                                                         ***
INSTREOF DC    C' '            SET TO 1 ON EOF WHEN READING
*                            INSTRUCTIONS.
VS       DC    CL1' '          ¬='' IF VS SYSTEM                  75311
DBL      DS    D               WORK AREA ONLY
CPUID    DS    0D                                                 J50
CALLAREA DS    9F             WORK AREA ONLY FOR PARAMETERS BASICALLY
IEFQRETN DS    A               RETURN ADDRESS
PCCA     DS    A
RUNDATE  DS    F
CHKFLG   DC    P'0'                                               J50
         DS    0D
PARML    DS    CL3000          LONG PARAMETER SUPPORT NOV 26 2010 J60
IDOVLY   DSECT
IDSTMT   DS CL4
IDNAME   DS CL8
IDRETN   DS CL4
IDLEVEL  DS CL1
IDNEST   DS CL1
********  VOLINFO DSECT USED TO REFERENCE A CAMLST *************   DASD
VOLINFO  DSECT                                                     DASD
NOVOLS   DS    H                                                   DASD
CATDEV   DS    XL4                                                 DASD
CATVOL   DS    CL6                                                 DASD
CATLABEL DS    H                                                   DASD
UCBS     DSECT ,                                            FIX-X 76200
         IEFUCBOB  LIST=YES                                 FIX-X 76200
         COPY   UJE04IF2
           TITLE 'UJE05CAT:CATALOG DATA SET'
          JOLSAVE CSECT=UJE05CAT
* THIS ROUTINE DOES THE CATALOGUING
* NOW:- WE FACE MANY PROBLEMS WHEN DOING A 'CATLG' (OR A KEEP)
* FIRST,WE SHALL CALL THE KEEP ROUTINE WHICH READS THE ODD
*     JFCB,FIXES PDQ'S ETC
           CLI ICOMMAND,C'U'   UNCATALOG CALLING ME TO PRINT
*                              ERROR MESSAGES ?
*          BNE E05DOCAT
           BE E05PRNTE
           CLI ICOMMAND,C'D'   DELETE CALLING ME TO PRINT ERR?
           BE E05PRNTE
E05DOCAT   EQU  *
           SPACE 3
          CALL UJE07KEE   KEEPS THE DATA SET.
           LTR R15,R15
           BZ  E05TVOLS
           LR  R2,R15
           CH  R15,=H'4'       DOES KEEP WANT TO SKIP TO A NEW OS STEP?
           BNE E05KEEPE        NO,THERE WAS A REAL ERROR
           JOLRETN RC=4
E05KEEPE   LA  R2,32
E05UNSUC   EQU *
           JOLERR 202,                                                 *
               'DSID ''',DDDSID,''' DSNAME ''',#DSNAME,''' KEPT ON VOL(*
               S) ',#VOL,' BUT NOT CATALOGED BECAUSE:-'          85196
           B  E05PRNTE
E05TVOLS   EQU *
          ST   R15,TASKRETN       SAVE FOR LASTCC TESTS           86211
* AT THIS POINT WE MIGHT HAVE TO DO SOME EXTRA WORK BEFORE WE CAN  DASD
* CATALOG THIS DATASET                                             DASD
* FIRST IF THE JFCBNVOL (NUMBER OF VOLUMES) EXCEEDS 5              DASD
* THE REST OF THE VOLUME SERIAL NUMBERS ARE RECORDED IN            DASD
* A JFCB EXTENSION BLOCK AT 15 A CRACK                             DASD
* SO IF WE SUPPORT GREATER THAN 5 WE MUST ALLOW FOR THE            DASD
* O.S. MAXIMUN OF 255.                                             DASD
         CLC   JFCBNVOL,=AL1(L'JFCBVOLS/6) > 5 VOLUMES ?           DASD
         BNH   EO5TOLOW             NOPE DO THIS THE OLD WAY       DASD
         LA    R14,E05UNIT          POINT TO CATALOG AREA          DASD
         SR    R15,R15              CLEAR REG-15                   DASD
         IC    R15,JFCBNVOL         INSERT VOLUME COUNT            DASD
EO5STUFF EQU   *                                                   DASD
         MVC   0(4,R14),SCTUTYPE    PLUG IN UNIT TYPE              DASD
         MVC   4(6,R14),BLANKS      CLEAR VOLUME SERIAL            DASD
* IF DISK, DON'T PUT IN FLSQ NUMBER                         CVC   85196
         MVC   10(2,R14),=H'0'      ZERO FILE SEQ #         CVC   85196
         CLI   SCTUTYPE+2,UCB3TAPE TAPE DEVICE ?            CVC   85196
         BNE   E05DA          NO->                          CVC   85196
         MVC   10(2,R14),JFCBFLSQ   PLUG IN FILE SEQ #             DASD
E05DA    LA    R14,12(R14)          POINT TO NEXT AREA             DASD
         BCT   R15,EO5STUFF         DO THE REST                    DASD
         XC    0(12,R14),0(R14)     CLEAR NEXT AREA                DASD
* NOW PLUG IN THE FIRST 5 VOLUMES SERIALS FROM THE JFCB            DASD
         LA    R15,5                STOP AFTER 5                   DASD
         LA    R14,E05UNIT          POINT TO CATALOG AREA          DASD
         LA    R1,JFCBVOLS          POINT TO FIRST 5 VOLUMES       DASD
E05STJ5  EQU   *                                                   DASD
         MVC   4(6,R14),0(R1)       MOVE IN VOLSER                 DASD
         LA    R1,6(R1)             POINT TO NEXT VOLUME           DASD
         LA    R14,12(R14)          POINT TO NEXT AREA             DASD
         BCT   R15,E05STJ5          RETURN FOR THE REST            DASD
         ST    R14,E05START         SAVE THIS GUY FOR LATER        DASD
         SR    R15,R15              CLEAR REG-15                   DASD
         IC    R15,JFCBNVOL         INSERT # VOLUMES IN R15        DASD
         SH    R15,=H'5'            BACKOFF 5                      DASD
         STH   R15,E05#VOLS         SAVE IT                        DASD
* NOW READ THE JFCB EXTENSION BLOCK POINTER TO BY JFCBEXAD OF THE JDASD
         MVC   JFCBETTR,JFCBEXAD    PUT ON A WORD BOUNDARY         DASD
GJFCBX   GETJOBQ JFCXDECB,JFCBETTR  GET EXTENSION BLOCK            DASD
         MVC   JFCBETTR,JFCBXTTR    MOVE NEXT GUY TO POINTER       DASD
         LH    R15,E05#VOLS         GET NUMBER OF VOLS LEFT        DASD
         LA    R1,15                LETS STOP AFTER 15             DASD
         L     R14,E05START         START MOVING VOLSERS TO HERE   DASD
         LA    R2,JFCBXVOL          POINT TO EXTRA VOLSER AREA     DASD
GJFCBXM  MVC   4(6,R14),0(R2)       MOVE HIM IN                    DASD
         SH    R15,=H'1'            BACKOFF R15 BY 1               DASD
         BZ    E05DONE              IF ZERO THATS IT               DASD
         LA    R14,12(R14)          UP TO NEXT AREA                DASD
         LA    R2,6(R2)             UP TO NEXT VOLSER IS JFCBX     DASD
         BCT   R1,GJFCBXM           GO BACK FOR THE REST,          DASD
         STH   R15,E05#VOLS         SAVE THE # OF VOLS LEFT        DASD
         ST    R14,E05START         SAVE NEXT AREA ADDRESS         DASD
         B     GJFCBX               GET THE REST OF THE EXTENSION BDASD
EO5TOLOW EQU   *                                                   DASD
* NOW LETS DO THE CATALOG,SHALL WE ?
           XC E05VOLS(E05ETBL-E05VOLS),E05VOLS CLEAR TABLE INITIALLY
           MVC E05VOLX+(0*(L'E05UNIT+L'E05VOLX+L'E05LABEL)),DDVOLUME+0
           MVC E05VOLX+(1*(L'E05UNIT+L'E05VOLX+L'E05LABEL)),DDVOLUME+6
           MVC E05VOLX+(2*(L'E05UNIT+L'E05VOLX+L'E05LABEL)),DDVOLUME+12
           MVC E05VOLX+(3*(L'E05UNIT+L'E05VOLX+L'E05LABEL)),DDVOLUME+18
           MVC E05VOLX+(4*(L'E05UNIT+L'E05VOLX+L'E05LABEL)),DDVOLUME+24
           MVC E05UNIT+(0*(L'E05UNIT+L'E05VOLX+L'E05LABEL)),SCTUTYPE
           MVC E05UNIT+(1*(L'E05UNIT+L'E05VOLX+L'E05LABEL)),SCTUTYPE
           MVC E05UNIT+(2*(L'E05UNIT+L'E05VOLX+L'E05LABEL)),SCTUTYPE
           MVC E05UNIT+(3*(L'E05UNIT+L'E05VOLX+L'E05LABEL)),SCTUTYPE
           MVC E05UNIT+(4*(L'E05UNIT+L'E05VOLX+L'E05LABEL)),SCTUTYPE
* IF DISK, DON'T PUT IN FLSQ NUMBER                         CVC   85196
           MVC   E05LABEL,=H'0'       ZERO FILE SEQ #       CVC   85196
           CLI   SCTUTYPE+2,UCB3TAPE TAPE DEVICE ?          CVC   85196
           BNE   E05DA2         NO->                        CVC   85196
           MVC E05LABEL,JFCBFLSQ
E05DA2     MVC E05LABEL+(1*(L'E05UNIT+L'E05VOLX+L'E05LABEL)),=H'1'
           MVC E05LABEL+(2*(L'E05UNIT+L'E05VOLX+L'E05LABEL)),=H'1'
           MVC E05LABEL+(3*(L'E05UNIT+L'E05VOLX+L'E05LABEL)),=H'1'
           MVC E05LABEL+(4*(L'E05UNIT+L'E05VOLX+L'E05LABEL)),=H'1'
           XC E05#VOLS,E05#VOLS
E05DONE EQU   *                                                    DASD
***** TO SUPPORT RECAT, BLDX (AGAIN)
**SEPT 75
           MVI   E05CAT,100  CATALOG INDICATORS
           MVI   E05CAT+1,0  TURN OFF BLDX ENTRY
           MVC E05#VOLS+1(1),JFCBNVOL SHIFT IN NUMBER OF VOLUMES
           LA R1,DSNAME
           ST R1,E05CAT+4
           CLI DDMBR+1,C'+'      GENERATION DATASET ?             75311
           BE  E05NOBLD        YES,DON'T CATALOG WITH BUILD INDEX
           CLI DDMBR,C'('      GENERATION DATASET ?
         BE    E05NOBLD        YES,DON'T CATALOG WITH BUILD INDEX
         CLI VS,C'2'   MVS                                         DASD
         BE  E05NOBLD  YEP  MVS WILLNOT RECAT WILL BLDX ON         DASD
         OI  E05CAT+1,X'40'                                       75128
E05NOBLD EQU *
* NOW TEST RE-CATLG FUNCTION
         IFNULL DDLABTYP,E05NALWA
* ALWAYS HERE
         MVI E05CAT,X'54'  TURN ON RE-CATLG BIT                   75311
         CATALOG E05CAT                                           75311
         LTR     R15,R15   DID WE RECATLG IT?                     75311
         BZ   E05SUCES YES                                        75311
* NOW RECATLG FAILED, SO ATTEMPT STRAIGHT CATLG THEN              75311
         MVI   E05CAT,X'64'                                       75311
E05NALWA EQU   *
         CATALOG E05CAT                   DO THE CATALOG
         LTR R15,R15
         BNZ E05ERR
E05SUCES EQU *
* NOW WE MUST CHECK AGAIN FOR GREATER THAN 5 VOLUMES BECAUSE       DASD
* ALL OF THE VOLUMES MIGHT NOT FIT ON 1 MESSAGE                    DASD
         LH    R14,E05#VOLS         LOAD VOL COUNT                 DASD
         XC    E05#VOLS,E05#VOLS    CLEAR VOL COUNT                DASD
         CH    R14,=H'5'            > 5 VOLUMES                    DASD
         BNH   E05SUCE2             NO   LETS DOIT THE OLD WAY     DASD
         SH    R14,=H'5'            SUBTRACT 5                     DASD
         STH   R14,E05#VOLS         STORE BACK FOR LATER           DASD
         MVI   DDVOLUME,C' '        MOVE IN JUST THE 1ST FIVE      DASD
         MVC   DDVOLUME+1(L'DDVOLUME-1),DDVOLUME                   DASD
         MVC   DDVOLUME(L'JFCBVOLS),JFCBVOLS                       DASD
         BAL   R14,E00FXVOL         MOVE TO #VOL,VOL EDITTED       DASD
         L     R15,=A(E05UNIT+60)   POINT TO 6TH VOLSER IN CAMLST  DASD
         ST    R15,E05START         SAVE FOR LATER                 DASD
E05SUCE2 EQU     *                                                 DASD
           JOLERR 101,'DSID ''',DDDSID,''' DSNAME ''',                 *
               #DSNAME,''' CATALOGED ON VOL(S) ',#VOL             74365
          LH    R14,E05#VOLS        LOAD NUMBER OF VOLS LEFT       DASD
          LTR   R14,R14             ALL DONE                       DASD
          BZ    E05GOODR            YES SIR LETS GO                DASD
E05LMSGS EQU     *                                                 DASD
          L     R15,E05START        POINT TO NEXT AREA             DASD
          MVI   DDVOLUME,C' '       CLEAR CONSTRUCT AREA           DASD
          MVC   DDVOLUME+1(L'DDVOLUME-1),DDVOLUME                  DASD
          LA    R1,DDVOLUME         POINT TO CONSTRUCT AREA        DASD
          LA    R2,5                LETS STOP AFTER 5              DASD
E05LMSG   MVC   0(6,R1),4(R15)      MOVE IN NEXT VOLUME SERIAL     DASD
          LA    R1,6(R1)            BUMP DDVOLUME BY 6             DASD
          LA    R15,12(R15)         BUMP CAMLST BY 12              DASD
          SH    R14,=H'1'           BACKOFF VOL COUNT BY 1         DASD
          BZ    E05LMSGD            IF ALL DONE GET OUT EARLY      DASD
          BCT   R2,E05LMSG          RETURN FOR THE REST            DASD
E05LMSGD  EQU    *                                                 DASD
          STH   R14,E05#VOLS        SAVE # OF VOLS LEFT            DASD
          ST    R15,E05START        STORE NEXT AREA ADDRESS        DASD
          BAL   R14,E00FXVOL        MOVE TO #VOL,VOL EDITTED       DASD
          B     E05SUCE2            GO PRINT THE  MESSAGE          DASD
E05GOODR EQU     *                                                 DASD
          JOLRETN
E05ERR     LR  R2,R15
           B   E05UNSUC
           SPACE 3
E05PRNTE   EQU *
           B  E05RETNC(R2)
E05RETNC   B   E05SUCES
           B   E05RET4
           B   E05RET8
           B   E05RET12
           B   E05RET16
           B   E05RET20
           B   E05RET24
           B   E05RET28
           B   E05RET32
           B   E05RET36
E05RET4    JOLERR 203,'CATALOG VOLUME NOT MOUNTED'
           B  E05RETN0
         FIX  'NOTE R0=0 IF C AND ALREADY CATLGD'           FIX-X 76200
         FIX  'NOTE R0=60 IF U/D AND YSAM'                  FIX-X 76200
E05RET8    JOLERR 204,'DATA SET NAME FOUND AT LOWER LEVEL'
           B  E05RETN0
E05RET12   EQU *
           JOLERR 205,'CATLG RETN''D 12'
           B  E05RETN0
E05RET16   JOLERR 206,'NO INDEX LEVEL FOR DATA SET'
           B  E05RETN0
E05RET20   JOLERR 407,'CATALOG DATA SET IS FULL'
           B  E05RETN0
E05RET24   JOLERR 208,'INVALID GENERATION NAME'
           B  E05RETN0
E05RET28   JOLERR 409,'PERMANENT I/O ERROR ON CATALOG DATA SET'
           B  E05RETN0
E05RET32   JOLERR 210,'KEEP FAILED FOR DATA SET'
           B  E05RETN0
E05RET36   JOLERR 211,'NO VOLUMES WERE SUPPLIED'
E05RETN0   JOLRETN
E05CAT     CAMLST CAT,0,,E05VOLS
          LTORG                                                    DASD
           DC   S(*),S(*),S(*),S(*)                                DASD
           DC   S(*),S(*),S(*),S(*)                                DASD
           DC   S(*),S(*),S(*),S(*)                                DASD
           DC   S(*),S(*),S(*),S(*)                                DASD
           DC   S(*),S(*),S(*),S(*)                                DASD
           DC   S(*),S(*),S(*),S(*)                                DASD
           DC   S(*),S(*),S(*),S(*)                                DASD
           DC   S(*),S(*),S(*),S(*)                                DASD
           DC   S(*),S(*),S(*),S(*)                                DASD
           DC   S(*),S(*),S(*),S(*)                                DASD
           DC   S(*),S(*),S(*),S(*)                                DASD
           DC   S(*),S(*),S(*),S(*)                                DASD
           DC   S(*),S(*),S(*),S(*)                                DASD
           DC   S(*),S(*),S(*),S(*)                                DASD
           DC   S(*),S(*),S(*),S(*)                                DASD
           DC   S(*),S(*),S(*),S(*)                                DASD
           DC   S(*),S(*),S(*),S(*)                                DASD
           DC   S(*),S(*),S(*),S(*)                                DASD
           DC   S(*),S(*),S(*),S(*)                                DASD
           DC   S(*),S(*),S(*),S(*)                                DASD
JFCXDECB  DC       F'0'                                            DASD
          LA       R1,JFCBXTTR                                     DASD
          SPACE 3                                                  DASD
          EYEBALL  JFCX                                            DASD
          IEFJFCBX                                                 DASD
JFCBETTR  DC       F'0' JFCB EXTENSION POINTER                     DASD
E05START  DC       F'0' AREA ADDRESS WORK AREA                     DASD
          ENTRY E05VOLS                                            DASD
E05VOLS    DS 0D
E05#VOLS   DS H
E05UNIT    DS CL4
E05VOLX    DS CL6
E05LABEL   DS CL2
          DS    254CL12             EXTENDED WORK AREA FOR 255 VOLUDASD
E05ETBL   EQU   E05VOLS+100                                        DASD
*RECAT B'0001'
*CAT   B'0010'
*UNACT B'00001000'
*BLD   B'0100'
*DELETE INDEXES B'00001100'
********* ALL THE ABOVE APPLY TO BYTE 0
*  +2  (3RD) B'00000001'=VSAM
           TITLE 'UJE06UNC:UNCATALOG DATA SET'
           JOLSAVE CSECT=UJE06UNC
           LA R1,DSNAME
           ST R1,E06REMUV+4
           ST  R1,E06REMDT+4   REMOVE INDEXES,TOO
****************************************************************   DASD
* NEW 8-1-77 "UNCATLG GDGALL"   NO JCL NEED   ITS ALL DONE HERE*   DASD
****************************************************************   DASD
           CLI DDCATLGS,104    UNCAT GDG ALL ?                     DASD
           BE  E06GDGAL        GO DO IT                            DASD
* NEW CODE FOR UNCAT GDGALL AND NOCAT. TEST THE CATALOG TO SEE IF
*  GDGALL, AND UNCATLOG IT THERE IN A LOOP IF IT IS.
* TEST IF GDG-ALL, AND LOOP AROUND SCRATCHING EVERYTHING WE CAN FIND
           CALL UJE66TST TEST GDGALL, AND SCRATCH THE LOT
           LTR  R15,R15         WAS IT GDG- ALL?
           BZ   E06RETN
           CLI DDMBR,C'+'      GDG ?
           BE  E06NODLT        YES,DON'T DELETE INDEX
           CLI DDMBR,C'('      GDG ?
           BE  E06NODLT        YES,DON'T DELETE INDEX
           CATALOG E06REMDT    DO THE UNCATALOG AND REMOVE INDEXES
           LTR R15,R15         ERROR ?
           BNZ E06FAIL         YES,PRINT ERROR MESSAGES
           B   E06SUCES
E06NODLT   EQU *
          CATALOG E06REMUV
          LTR R15,R15
          BNZ E06FAIL
E06SUCES   EQU *
           JOLERR 101,'DSID ''',DDDSID,''' DSNAME ''',                 *
               #DSNAME,''' UNCATALOGED'
          JOLRETN
E06FAIL   EQU *
           LR  R2,R15          SAVE UNCATLG RETURN CODE
           JOLERR 202,                                                 *
               'UNCATLG FOR DSID ''',DDDSID,                           *
               ''' NAME ''',#DSNAME,''' FAILED BECAUSE:-'
           CALL UJE05CAT       LET IT PRINT WHY
E06RETN    JOLRETN   RC=0                                          DASD
E06GDGAL L     R15,=V(E05VOLS)         LOAD CAMLIST ADDRESS        DASD
         ST    R15,E06LOCAT+12         POINT TO LOCATE AREA        DASD
         MVC   #DSNAME(2),=H'44'       SET DSNAME TO THE BIGGIE    DASD
         LA    R6,300(R15)             GO UP A FEW AND SAVE POINTERDASD
         LA    R1,DSNAME               POINT TO DSNAME             DASD
         LA    R15,43(R1)              POINT TO END OF DSNAME      DASD
         LA    R14,1                   INCR BY 1                   DASD
E06FIND  CLI   0(R1),C' '              END OF DSNAME YET           DASD
         BE    *+8                     YEP LETS MOVE               DASD
         BXLE  R1,R14,E06FIND          RETURN                      DASD
         MVC   0(3,R1),=C'(0)'         LOOK FOR RELATIVE GDG 0     DASD
         MVC   0(44,R6),DSNAME         MOVE TO LOCATE AREA         DASD
E06LOOK  MVC   DSNAME,0(R6)            MOVE DSNAME IN              DASD
         LOCATE E06LOCAT                                           DASD
         LTR   R15,R15                 DID LOCATE FIND ANYTHING ?? DASD
         BNZ   E06RETN                 NOPE THAT ALL               DASD
         FIX   'CHECK CATALOG VOLUME BEFORE SCRATCHING'           84150
         CATALOG E06REMUV                                          DASD
         LTR   R15,R15                 DID THIS WORK OK            DASD
         BNZ   E06RETN                 NOPE SOMETHINGS WRONG       DASD
         JOLERR 103,'DSID ''',DDDSID,''' DSNAME ''',                   *
               #DSNAME,''' GDGALL UNCATALOGED'                     DASD
         B     E06LOOK                 RETURN TO LOOK FOR MORE GDGADASD
E06LOCAT CAMLST NAME,DSNAME,,0                                     DASD
E06REMUV   CAMLST UNCAT,0
E06REMDT   CAMLST UCATDX,0     UNCATLG,REMOVE INDEXES
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           TITLE 'UJE07KEE:KEEP DATA SET'
           JOLSAVE CSECT=UJE07KEE
* A KEEP INSTRUCTION IS TO BE EXECUTED.
* THE KEEP IS A PRETTY EASY INSTRUCTION TO DO,AS IT BASICALLY
*    MEANS THAT THE PDQ MUST BE FOOLED INTO THINKING THAT THE
*    DATA SET WAS ORIGINALLY OLD.
* THE ONLY COMPLICATION THAT CAN ARISE IS THAT WE WOULD (ON OCCASIONS)
*    LIKE THE VOLUME TO BE UNLOADED(OR SET INTO AN UN-LOADABLE
*    STATUS
* PERMANENT,RETAINED,'JOL PREFERRED' ETC VOLUMES DO NOT HAVE TO
*    HAVE THEIR STATUS SET SO THEY MAY BE UNLOADED AND THIS IS
*    LEFT TO THE OPERATORS DISCRETION.
* IF IT IS A TAPE OR A NON-PREFERRED,(PRIVATE IN OTHER WORDS)
*    VOLUME AND IT IS NOT RETAINED,IT SHOULD BE DISMOUNTED.
          CLC DDDSNAME,=C'*DUMMY  '
          BNE  E07NOTDM                           74365
          JOLERR 206,'DSID ''',DDDSID,''' DSNAME ''',#DSN,             *
               ''' NOT KEPT:- DUMMY DATA SET'                    75003
          JOLRETN RC=16
E07NOTDM   EQU *
           CALL UJE81PDQ
           LTR R15,R15
           BZ  E07INPDQ
           CLI ICOMMAND,C'K'   KEEP ?
           BE  E07ERR1         YES,FLAG IT AS AN ERROR THEN
           CLC =C'*.',DDVOLUME VOLUME REFERENCE SPECIFIED,BUT DATA SET
* NOT CREATED ? THIS CAN OCCUR IF THE CREATING STEP WAS BYPASSED
           BE  E07ERR1         GO FLAG AS AN ERROR
           CLI DDVOLUME,C' '   VOL SPECIFIED ?
           BE  E07RETNF        NO,SO ERROR
           CLI DDUNITYP,C' '   UNIT SPECIFIED ?
           BE  E07RETNF        NO,ERROR TOO
* WELL A UNIT AND VOLUME WERE SPECIFIED,SO WE SHALL CONVERT
*     THE UNIT TO AN IBM TYPE OF NAME AND GENTLY RETURN
* (THE USER CODED 'CATLG DSN X UNIT Y VOL Z')
          SPACE
E07FIXU    EQU  *
           NI DDUNITYP,B'10011111' TURN OFF PERM BIT
* SPECIAL CODE FOR MVS                                            76200
         CLI   VS,C' '  IS IT A VS SYSTEM OF ANY SORT?            76200
         BE    E07NVS9                                             DASD
* OK, SPECIAL FOR VS AND 3330-1                                   76200
         CLC   =C'3330-1',DDUNIT                                  76200
         BNE   E07NVS9                                            76200
         LA    R1,MVS3330                                         76200
         B     E07GOTU                                            76200
         SPACE 2                                                  76200
E07NVS9  EQU   *                                                  76200
         L    R1,HEXUNITS
         LM   R14,R15,HEXUNITS+4
E07FINDU CLC DDUNITYP,4(R1)
         BE    E07GOTU
         BXLE R1,R14,E07FINDU
         CALL    UJEDEVNM  WELL HOW ABOUT THE DEVICE NAME TABLE    DASD
         LTR     R15,R15                                           DASD
         BZ      E07GOTU+6  GREAT                                  DASD
         JOLERR 403,'INVALID UNIT FOUND IN KEEP'
         B     E07RETNF
E07GOTU  MVC SCTUTYPE,0(R1)
* SET UP NUMBER NUMBER OF VOLUMES IN JFCB,AND VOLUMES
         MVC JFCBVOLS,DDVOLUME
         MVI JFCBNVOL,1
         CLI DDVOLUME+06,C' '
         BE E07RETN0
         MVI JFCBNVOL,2
         CLI DDVOLUME+12,C' '
         BE E07RETN0
         MVI JFCBNVOL,3
         CLI DDVOLUME+18,C' '
         BE E07RETN0
         MVI JFCBNVOL,4
         CLI DDVOLUME+24,C' '
         BE E07RETN0
         MVI JFCBNVOL,5
         B    E07RETN0
E07ERR1  EQU    *
         JOLERR 204,'DSID ''',DDDSID,''' DSNAME ''',#DSN,              *
               '''',                                                   *
               ' NOT YET CREATED:-KEEP IGNORED'
E07RETNF EQU    *
         JOLRETN RC=16
         SPACE 3
E07INPDQ EQU *
* NOW JUST BECAUSE THE NAME APPEARS IN THE PDQ DOESN'T MEAN FOR
*  1 SECOND THAT IT HASN'T :-
*        1.    BEEN SCRATCHED
*        2.    BEEN ALREADY KEPT
         LH    R1,PDQDSNNO     1ST,2ND OR 3RD NAME IN PDQ ?
         CLI VS,C'2'     IS IT AN MVS SYSTEM?
         BNE E07NMV1S  NO                                          DASD
* OK, MVS HAS DIFFERENT TYPE OF PASSED DATA SET Q
         MH  R1,=AL2(PDILEN)
         LA R14,PDITERM1(R1)
         B  E07NMVS1
E07NMV1S MH    R1,=AL2(PDQBLKLN)                                   DASD
         LA    R14,PDQTERM(R1)
E07NMVS1 EQU       *
         TM    0(R14),X'C0'    OLD,DELETE ?
         B     *+8             ****************
         BO    E07DELET
         SPACE 3
*** LAST BYTE OF JFCB TTR =0 IN SIOT
         GETJOBQ JFCBDECB,SCTPJFCB    GET THE JFCB
         CLI JFCBVOLS,X'FF'    UNOPENED SCRATCH VOLUME ?
         BNE E07NOTFF          GO WRITE BACK JFCB,SIOT
         JOLERR 205,'DSID ''',DDDSID,''' DSNAME ''',#DSNAME,           *
               ''' NOT KEPT:UNOPENED SCRATCH VOLUME'
         B     E07RETNF
E07NOTFF EQU *
         NI JFCBIND2,B'00011111' TELL OS AN OLD DATA SET            J60
         OI JFCBIND2,B'01000000'
         PUTJOBQ JFCBDECB
         MVC CALLAREA,SIOT
         MVI CALLAREA+3,0
         GETJOBQ SIOTDECB,CALLAREA
*                                                           FIX-X 76200
* THE NEXT FEW LINES ARE NEW IN 3.1 AND ARE CODED IN        FIX-X 76200
*  THE HOPE THAT WE CAN HAVE THE OPERATING SYSTEM UNLOAD    FIX-X 76200
*  THE VOLUME FOR US AT STEP TERM.                          FIX-X 76200
* IN ADDITION, THE DSNAME SHOULD BE TAKEN OFF THE PASSED    FIX-X 76200
*  DATA SET QUEUE. CURRENTLY, AT JOB TERMINATION, A NUMBER  FIX-X 76200
*  OF UNNECESSARY MESSAGES ARE DISPLAYED INDICATING THAT    FIX-X 76200
*  DATA SETS HAVE BEEN KEPT. THESE SHOULD NO LONGER OCCUR.  FIX-X 76200
*                                                           FIX-X 76200
*                                                           FIX-X 76200
         CLI   DDDISP+1,C'L'  LAST USE OF DATA SET ?        FIX-X 76200
*                             IF WE CAN LET OS UNLOAD ?     FIX-X 76200
         BNE   E07NLAST       NOT LAST USE                  FIX-X 76200
* MARK SIOT AND LET IT THINK WE HAVE FINISHED WITH          FIX-X 76200
*  THE DATASET (WHICH WE HAVE, OF COURSE).                  FIX-X 76200
*        NI    SCTSDISP,X'FF'-SIOTRETN-S3400DSP-PRIVATE     FIX-X 76200
         NI    SCTSDISP,B'11100000'                                 j60
         OI    SCTSDISP,8     TURN KEEP ON                  FIX-X 76200
         OI    SCTSBYT2,SCTRECVD MARK RECIEVED              FIX-X 76200
         B     E07MAKOL       MAKE IT OLD, RE-WRITE SIOT    FIX-X 76200
E07NLAST EQU   *                                            FIX-X 76200
         OI    SCTSDISP,B'00001000'   SIOT = KEEP
E07MAKOL OI    SCTSBYT4,1     MARK OLD                      FIX-X 76200
         PUTJOBQ SIOTDECB
         SPACE 3
         MVC   DDVOLUME,JFCBVOLS
         BAL   R14,E00FXVOL    SET UP VOLUME(S) IN #VOL           74365
* NOW TO MARK THE PDQ
* TEST IF MVS, DIFFERENT...
* MVS SIOT CONTAINS THE UCB POINTER, MVT THE PDG DOES
* MVS/XA USES A 3 BYTE ADDRESS UCB FIELD, JUST TO CONFUSE THINGS MORE!
         CLI   VS,C'2'       MVS?
         BNE   E07NMVS2      NOPE ->
* CHECK IF XA, IF SO GET UCB ADDRESS FROM OFFSET 'B9', NOT SCTUTYPE
         L     R14,16        GET CVT ADDRESS POINTER
*        L     R14,0(R14)    GET CVT ADDRESS
         TM    116(R14),X'80' XA?
         BNO   E07NXA        NO -> OUT
         MVI   CALLAREA,0
         MVC   CALLAREA+1(3),SIOT+X'B9'
         L     R14,CALLAREA
         B     E07TUNIT
E07NXA   LH    R14,SCTUTYPE
         B     E07TUNIT
E07NMVS2 EQU   *
         MVC   CALLAREA,PDQABLK
         MVI   CALLAREA+3,0
         GETJOBQ PDQDECB,CALLAREA
         LH    R1,PDQDSNNO
         MH    R1,=AL2(PDQBLKLN)
         L     R14,PDQUCBS(R1) GET UCB POINTER FOR DEVICE TYPE    74365
         MVC   SCTUTYPE,16(R14) MOVE IN UCB DEVICE TYPE
E07TUNIT EQU   *
*
* THIS FIXES A PROBLEM WHEN A TAPE IS WRITTEN ON A DUAL     FIX-X 76200
*  DENSITY DRIVE, AND A CATALOG IS PERFORMED.               FIX-X 76200
* WE SHALL (AS OS DOES), MAKE THE UNIT IN THE CATALOG ONE   FIX-X 76200
*  WHICH WILL ALLOW THE TAPE TO BE MOUNTED ON A NON-DUAL    FIX-X 76200
*  DENSITY DRIVE IF THE TAPE WAS WRITTEN IF HIGH DENSITY    FIX-X 76200
*  MODE.                                                    FIX-X 76200
         CLI   SCTUTYPE+2,UCB3TAPE TAPE DEVICE ?            FIX-X 76200
         BNE   E07DA          NO->                          FIX-X 76200
* TAPE DEVICE HERE.                                         FIX-X 76200
         TM    SCTUTYPE+1,UCBDUDN1+UCBDUDN2 DUAL DENSITY?   FIX-X 76200
         BZ    E07UOK         UNIT IS OK, LEAVE IT.         FIX-X 76200
* THE UCB THAT THE DATA SET IS ON IS A DUAL DENSITY UCB,    FIX-X 76200
*  BUT NOW WE MUST CHECK THE DENSITY OF THE DATA SET.       FIX-X 76200
*
*  FOR 800 BPI, WE WANT TO SET UP UNIT AS 34,20,80,XX
*  FOR 1600 BPI, WE WANT TO SET UP UNIT AS 34,21,80,XX
*  FOR 6250 BPI, WE WANT TO SET UP UNIT AS 32,00,80,XX
         CLI   JFCDEN,JFC800  IS IT 800 BPI ?               CVC   81220
         BNE   E07T1600       TEST IF 1600 BPI.             CVC   81220
         MVC   SCTUTYPE(2),=X'3420'     SET 800 BPI NOW     CVC   81220
         B     E07UOK                                       CVC   81220
         SPACE 2
E07T1600 CLI   JFCDEN,JFC1600 IS IT 1600 BPI ?              CVC   81220
         BNE   E07T6250       TEST IF 6250 BPI.             CVC   81220
         MVC   SCTUTYPE(2),=X'3210'   SET 1600 BPI NOW      CVC   81220
         B     E07UOK                                       CVC   81220
         SPACE 2
E07T6250 CLI   JFCDEN,JFC6250 IS IT 6250 BPI ?              CVC   81220
         BNE   E07UOK         LEAVE IT, DON'T KNOW WHAT IT ISVC   81220
         MVC   SCTUTYPE(2),=X'3200'   SET 6250 BPI NOW      CVC   81220
         B     E07UOK                                       CVC   81220
         SPACE 2
E07DA    NI    SCTUTYPE+1,X'FF'-UCBRR TURN OFF 'SHARE'      FIX-X 76200
         SPACE 2
E07UOK   EQU   *
         FIX 'FOR 7 TRACK TAPE NEXT LINE'                         82300
         NI    SCTUTYPE+1,X'FF'-X'80' (UCBOPT0)  TURN OFF HIGH BIT82300
         CLI  VS,C'2'  MVS AGAIN?
         BNE   E07NMVS3
         LH    R1,PDQDSNNO
         MH    R1,=AL2(PDILEN)
         LA    R14,PDITERM1(R1)
         B     E07MARK9
E07NMVS3 EQU   *
         LA    R14,PDQTERM(R1)
E07MARK9 EQU   *
         NI    0(R14),X'0F'     TURN OFF TOP 4 BITS
         CLI   DDDISP+1,C'L'   LAST USE,IE OLD,KEEP ?
         BNE   E07PASS
         OI    0(R14),B'01000000' OLD,KEEP
         NI    0(R14),B'11000000'  INDICATE RECIEVED        FIX-X 76200
         MVI   0(R14),B'00000000'  INDICATE RECIEVED               j60
         B     E07MARKD
E07PASS  OI    0(R14),B'11100000' OLD,PASS
         MVI   0(R14),B'00000000'  INDICATE RECIEVED               j60
E07MARKD EQU   *
         CLI   VS,C'2'    MVS AGAIN?????
         B     E07NMVS4  ****  WAS BE ** ERR ** CVC BYPASS        85197
         SH    R14,=H'44'         BACKUP TO DSNAME              DASD
         MVI   0(R14),C' '        WIPE OUT THE NAME IN PDQ      DASD
E07NMVS4 EQU  *
         PUTJOBQ  PDQDECB2
         B     E07RETN0
         PUTJOBQ PDQDECB
         SPACE 3
E07RETN0 EQU *
         CLI ICOMMAND,C'K'     IS THIS A KEEP INSTRUCTION?        74365
         BNE E07RETNO W        NO,SO NO MESSAGE,JUST RETURN       74365
         JOLERR 101,'DSID ''',DDDSID,''' DSNAME ''',#DSN,              *
               ''' KEPT ON VOL(S) ',#VOL                          74365
E07RETNO TM     JFCDSRG1,JFCORGIS  IS THIS A ISAM FILE             DASD
         BNO    E07RTN        NOPE LETS LEAVE      FIX CVC JUL 17, 85
         $CALL UJEISPDQ    GO SAVE THE DUPLICATE PDQ DSNS          DASD
E07RTN   JOLRETN RC=0                                              DASD
* E07RETNO   JOLRETN RC=0                                          DASD
         SPACE 3
**** THESE NEXT FEW INSTRUCTIONS NEVER GET EXECUTED ********
E07TRETN EQU *
* TEST NOW IF'RETAIN' AND IF NOT,STEP ON TO UNLOAD THE VOLUME.
         CLI DDDISP+1,C'P'
         BE    E07MARK
*        CLI DDRETAIN,C' '
         B    E07MARK   ********************************
         BE    E07LETOS
E07MARK  DC H'0'               ABEND IF IT GETS HERE
         B     E07MARK
E07LETOS EQU *
         JOLRETN RC=4
         SPACE 3
E07DELET EQU    *
         JOLERR 202,'DSID ''',DDDSID,''' DSNAME ',                     *
               ''' PREVIOUSLY DELETED :- KEEP IGNORED'
           JOLRETN RC=16
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           TITLE 'UJE08SCR:SCRATCH DATA SET'
           JOLSAVE CSECT=UJE08SCR
* SCRATCH INSTRUCTION IS TO BE EXECUTED.
*    NOW IF IT IS A DISC,WE ISSUE A SCRATCH.
*          IF THE VOLUME IS NOT MOUNTED,WE GO AND FIND THE STEP
*          WHICH WE WANT TO EXECUTE (IT HAS A DD-CARD WHICH MOUNTS
*          THE VOLUME).
           SPACE
*    IF IT IS A TAPE,AND IT CAN BE FREED NOW (NOT RETAINED)
*          IT MUST BE GIVEN A DISPOSITION OF DELETE
*          THIS MUST BE DONE BY JCL AT THE MOMENT
*    IF IT IS RETAINED,THE PDQ IS MARKED DELETE,UNLESS WE HAVE
*          TIOT ENTRY,IN WHICH CASE IT IS MARKED DELETE,AND OS WILL
*          PROBABLY REMOVE THE VOLUME.
*    IF IT IS NOT RETAINED,WE MUST STEP DOWN TO THE CORRECT
*          STEP AND HAVE IT REMOVED FROM THE SYSTEM FOR US.
           SPACE 3
* PUT INTO LOGICAL TERMS,THE CODE COES LIKE THIS:-
*
*          IF INPDQ
*          THEN DO;
* ERROR2:      IF ¬STILL_IN_PDQ,ERROR AND RETURN; /*ALREADY GONE*/
*              IF ALLOCATED_TO_THIS_STEP
*              THEN DO;
*                  TURN ON DELETE_BITS IN SIOT;
*                  REWRITE SIOT;
*                  RETURN;
*              END;
*              GO TO E08_NOT_IN_THIS_STEP_MAYBE;
*          END;
*  /* NOT IN PDQ */
*
*          IF VOL & UNIT ¬=''
*          THEN DO;
*              SET UP DSNAME,VOL,UNIT;
*              GO TO E08_NOT_IN_THIS_STEP_MAYBE;
*          END;
*          GO TO ERROR2;
* NOT_HERE?:
*
*
*          IF IS MAG TAPE THEN GO TO E08MAGTP
* /* DISC HERE */
*          SCRATCH;
*          VOL_NOT_MOUNTED,GO TO LETOS;
*          RETURN;
* LETOS:   SET UP STEP NAME TO SKIP TO FOR OS STEP
*          RETURN(4);
* E08MAGTP:
*          MARK DELETE; /* IF OLD,MARK NEW,DELETE*/
*          IF VOLUME TO BE RETAINED
*          THEN RETURN;
*          GO TO LETOS;        /*UNLESS IN THIS STEP*/
*
*
* THE SITUATION THEN BASICALLY MEANS THAT IF A SCRATCH IS ISSUED
*    FOR A DISC,AND THE DISC/IS NOT MOUNTED,A NEW OS STEP OCCURRS
*
* IF A TAPE IS TO BE SCRATCHED,AND IT CAN BE UNLOADED (IE OTHER
*    DATA SETS ARE STILL BEING USED ON IT) NO REAL ACTION OCCURRS
*    BUT IF IT CAN BE UNLOADED A NEW OS STEP IS INITIATED.
********** UNTIL I CAN FOOL OS ***********
           SPACE 3
* NOW IF THE NAME IS A TEMPORARY DSNAME,WE MUST FIDDLE AROUND UNTIL WE
*    HAVE THE PART OF THE NAME THAT OS PUT IN FRONT OF OURS,AND PUT
*    OURS AT THE BACK. THIS THEN GIVES US A REAL DSNAME WHICH SHOULD
*    BE IN THE PASSED DATA SET QUEUE.
*                                                        JOL30112 76200
* DELETE GDGALL PROCESSING IS HANDLED BY OS.             JOL30112 76200
* IF THE CATLG INDICATOR HAS 104,IT MEANS THAT THE       JOL30112 76200
* COMPILER FOUND GDGALL. ALL WE HAVE TO DO IS            JOL30112 76200
* RETURN A 4, AND THAT WILL EXECUTE THE SCRATCH STEP     JOL30112 76200
*                                                        JOL30112 76200
         CLI   DDCATLGS,104   GDGALL ?                   JOL30112 76200
         BNE   E08TTEMP       NO,TEST TEMPORARY THEN     JOL30112 76200
           JOLERR 112,'DSID ''',DDDSID,''' DSNAME ''',#DSN,            *
               ''' IS GDGALL, THE OPERATING SYSTEM WILL DELETE IT'
         JOLRETN RC=4                                    JOL30112 76200
E08TTEMP CLI   DDDSNAME,C'&&' TEMPORARY ?                JOL30112 76200
           BNE E08NTEMP        NO,SO FORGET THIS BIT OF PROCESSING
*                                                        JOL30116 76200
* NOW READ THE JFCB OF THE $$INST FILE AND               JOL30116 76200
* FIND OUT WHAT DSN HAS BEEN GIVEN TO                    JOL30116 76200
* TEMPORARY DATA SETS                                    JOL30116 76200
*                                                        JOL30116 76200
         RDJFCB TEMPDCB       GET DSNAME                 JOL30116 76200
* NOW FIND LAST DOT,AND SHIFT IN OUR TEMP NAME (&&WORK000I FOR EXAMPLE)
         LA    R15,JFCBDSNM+43 GET END OF DSNAME         JOL30116 76200
E08FSTOP   CLI 0(R15),C'.'     GOT THE LAST '.' ?
           BE  E08GOTST        YES
           BCT R15,E08FSTOP    FIND STOP LOOP
           JOLERR 508,'INTERNAL ERROR:NO ''.'' IN TEMP DSN'
           SPACE
E08GOTST CLI   DDDSNAME+1,C'&&' DOUBLE & CODED ?         JOL30116 76200
         BNE   E08ONEA                                   JOL30116 76200
         MVC   DDDSNAME+1(8),DDDSNAME+2 DROP 2ND         JOL30116 76200
E08ONEA  MVC   1(8,R15),DDDSNAME+1 SET UP REAL DSNAME    JOL30116 76200
         MVC   DDDSNAME,JFCBDSNM   SHIFT BACK            JOL30116 76200
E08NTEMP   EQU *
           CALL UJE81PDQ       SEE IF NAME IN PDQ
*                              NOTE,IT ALSO READS IN SIOT AND JFCB
           LTR R15,R15
           BNZ E08NOTHR        NOT IN PDQ
* NOW IT WAS IN THE PDQ HERE.
* A QUICK CHECK TO SEE IF IT HAS ALREADY BEEN DELETED
*************** FAILURE HERE,JUST ATTEMPT TO SCRATCH
         LH    R1,PDQDSNNO     1ST,2ND,3RD DSNAME IN PDQ ?
         CLI   VS,C'2'   MVS???
         BNE   E08NMVS1
         MH    R1,=AL2(PDILEN)
         LA    R14,PDITERM1(R1)
         B     E08TDEL
E08NMVS1 EQU *
         MH    R1,=Y(PDQBLKLN)
         LA    R14,PDQTERM(R1)
E08TDEL  DS    0H
         TM    0(R14),X'C0'    HAS IT BEEN (OLD,DELETED) ?
         B     E08TSTP
         BO    E08ERR2            ALREADY GONE MY FRIEND
* OK,IT IS STILL PASSED SUCCESSFULLY APPARENTLY
*  HOWEVER,NOW WE MUST SEE IF THE DATA SET IS BEING USED BY
*  THIS STEP,IF SO,MERELY MARK THE SIOT DELETE AND THAT'S THAT
E08TSTP  EQU    *
         CLI   VS,C'2'
         BNE   E08MARKD
         LA    R14,PDQCSTEP(R1) CURRENT STEP NUMBER ADDRESS IN PDQ
         CLC 0(1,R14),JCTSNUMB CURRENT STEPS EQUAL
         BNE E08RJFCB          READ THE JFCB
* NOW MARK THE SIOT TO DELETE AND OUTPUT A MESSAGE SAYING
*  WILL BE SCRATCHED.
E08MARKD EQU    *
         MVC CALLAREA,SIOT
         MVI CALLAREA+3,0
         GETJOBQ SIOTDECB,CALLAREA
         OI    SCTSDISP,B'00000100' TURN ON DELETE BIT
         OI    SIOTALTD,B'00000100' TURN ON DELETE BIT IN CONDITION
*                                 DISPOSITION PROCESSING
         PUTJOBQ SIOTDECB
E08RJFCB DS 0H
E08TEST  EQU    *
         GETJOBQ JFCBDECB,SCTPJFCB GET CORRESPONDING JFCB
         LH    R1,PDQDSNNO     DATA SET NUMBER IN PDQ
         MH    R1,=AL2(PDQBLKLN)
         L     R14,PDQUCBS(R1) GET UCB ADDRESS FOR DEVICE TYPE    74365
         CLI     VS,C'2'   MVS AGAIN??
         BNE    E08NMVS2
* CHECK IF XA, IF SO GET UCB ADDRESS FROM OFFSET 'B9', NOT SCTUTYPE
         L     R14,16        GET CVT ADDRESS POINTER
*        L     R14,0(R14)    GET CVT ADDRESS
         TM    116(R14),X'80' XA?
         BNO   E08NXA        NO -> OUT
         MVI   CALLAREA,0
         MVC   CALLAREA+1(3),SIOT+X'B9'
         L     R14,CALLAREA
         B     E08NOSTP
* THE SIOT IN MVS CONTAINS THE UCB POINTER, NOT THE PDQ
E08NXA   LH    R14,SCTUTYPE
         B     E08NOSTP
E08NMVS2 EQU   *
         MVC   SCTUTYPE,16(R14) MOVE IN UCB UNIT TYPE
         B     E08NOSTP         DO THE SCRATCH
         SPACE 3
E08NOTHR EQU *               NOT IN PDQ
* THE DATA SET WAS NOT IN THE PASS QUEUE,AND THEREFORE IT SHOULD
*    (MUST?) HAVE A VOL & UNIT,AND WILL HAVE A DDCARD SOMEWHERE
*    FOR IT TO BE MOUNTED IF ITS NOT NOW.
           CLI DDVOLUME,C' '   VOL SPECIFIED ?
           BE  E08NOPDQ        NOPE
           CLI DDUNITYP,C' '   UNIT GIVEN ?
           BE  E08NOPDQ        NOPE
* OK,NOW SET UP THE JFCBDSN,AND THE VOLUME & UNIT AND
*    GO TO THE SCRATCH ROUTINES.
           MVC JFCBDSNM,DDDSNAME
           MVC JFCBVOLS,DDVOLUME
         NI    DDUNITYP,B'10011111' DROP PERM BIT
           MVI JFCBNVOL,1
           CLI DDVOLUME+06,C' '
           BE  E08FIXUN
           MVI JFCBNVOL,2
           CLI DDVOLUME+12,C' '
           BE  E08FIXUN
           MVI JFCBNVOL,3
           CLI DDVOLUME+18,C' '
           BE  E08FIXUN
           MVI JFCBNVOL,4
           CLI DDVOLUME+24,C' '
           BE  E08FIXUN
           MVI JFCBNVOL,5
           BE  E08FIXUN
E08FIXUN   EQU  *
           NI DDUNITYP,B'10011111'
* SPECIAL CODE FOR MVS,VS1                                        76200
         CLI   VS,C' ' IS IT A VS SYSTEM OF SOME SORT?            76200
         BE    E08NVS9                                             DASD
* OK SPECIAL FOR VS AND 3330-1                                    76200
         CLC   =C'3330-1',DDUNIT                                  76200
         BNE   E08NVS9                                            76200
         LA    R7,MVS3330                                         76200
         B     E08GOTUN                                           76200
E08NVS9  EQU   *                                                  76200
         L     R1,=A(HEXUNITS)
         LM    R7,R9,0(R1)
E08FHEXU CLC DDUNITYP,4(R7)    UNIT WE WANT ?
         BE    E08GOTUN
         BXLE R7,R8,E08FHEXU
         CALL UJEDEVNM     HOW ABOUT THE DEVICE NAME TABLE         DASD
         LTR    R15,R15                                            DASD
         BZ     E08NOSTP   SUPER   SAVED AGAIN                     DASD
         JOLERR 402,'SCRATCH REQUIRES UNIT ''',DDUNIT,''' UNKNOWN TO JOL
               '
         B     E08RETNF
         SPACE 3
E08GOTUN MVC SCTUTYPE,0(R7)    SHIFT IN IBM UNIT TYPE
         B     E08NOSTP        DO THE SCRATCH ETC
E08ERR2  EQU *                 NOT IN PDQ AND NO VOL/UNIT SPECIFIED
         JOLERR 209,'DSID ''',DDDSID,''' DSNAME ''',#DSN,''' ALREADY SCR
               RATCHED'
         JOLRETN RC=16
         SPACE 3
E08NOSTP EQU *                 NOT USED IN THIS STEP
* NOW THIS SITUATION IS JUST A FRACTION MORE DIFFICULT THAN THE
*  OTHERS.
* IF THE DATA SET IS ON DISK,ISSUE A SCRATCH
         CLI SCTUTYPE+2,X'80' MAG TAPE ?
         BE    E08MAGTP
* DISK,LETS ISSUE THE SCRATCH AFTER SETTING THINGS UP
         CLC JFCBNVOL,=AL1(L'JFCBVOLS/6)
         BH    E08LETOS        HELP,TOO MANY VOLUMES,LET
*                            OS DO ALL THE SCRATCHING IT LIKES
*                            THANKS
         XC E08NOVOL(E08SCREN-E08NOVOL),E08NOVOL
         MVC E08NOVOL+1(1),JFCBNVOL
           MVI E08NOVOL,0
           MVC E08UNIT+(0*(L'E08UNIT+L'E08VOL+L'E08SEQ)),SCTUTYPE
           MVC E08UNIT+(1*(L'E08UNIT+L'E08VOL+L'E08SEQ)),SCTUTYPE
           MVC E08UNIT+(2*(L'E08UNIT+L'E08VOL+L'E08SEQ)),SCTUTYPE
           MVC E08UNIT+(3*(L'E08UNIT+L'E08VOL+L'E08SEQ)),SCTUTYPE
           MVC E08UNIT+(4*(L'E08UNIT+L'E08VOL+L'E08SEQ)),SCTUTYPE
           MVC  E08VOL+(0*(L'E08UNIT+L'E08VOL+L'E08SEQ)),JFCBVOLS+0
           MVC  E08VOL+(1*(L'E08UNIT+L'E08VOL+L'E08SEQ)),JFCBVOLS+6
           MVC  E08VOL+(2*(L'E08UNIT+L'E08VOL+L'E08SEQ)),JFCBVOLS+12
           MVC  E08VOL+(3*(L'E08UNIT+L'E08VOL+L'E08SEQ)),JFCBVOLS+18
           MVC  E08VOL+(4*(L'E08UNIT+L'E08VOL+L'E08SEQ)),JFCBVOLS+24
           CLEAR DDVOLUME                                         74365
           MVC DDVOLUME(L'JFCBVOLS),JFCBVOLS                      74365
           BAL R14,E00FXVOL    SET UP VOLUME LIST IN #VOL         74365
           SR  R0,R0
           MVI   E08SCRA+2,X'40'  RESET SCRATCH (LAST ALWAYS?)
           IFNULL DDLABTYP,E08NALWA
* ALWAYS
           MVI   E08SCRA+2,X'50'  OVER-RIDE PURGE DATE
E08NALWA   EQU  *
           SCRATCH E08SCRA
           LTR R15,R15
           BNZ E08WHAT
           JOLERR 101,'DSID ''',DDDSID,''' DSNAME ''',#DSN,            *
               ''' SCRATCHED FROM ',#VOL                          74365
E08MAGTP   EQU  *
           CLI ISINPDQ,C' '    WELL,IS IT?
           BNE E08INPDQ
           JOLRETN
E08INPDQ   EQU  *
* THE NAME IN THE PDQ MUST BE SET TO OLD,DELETED SO THAT OS
*   WON'T BOTHER DELETING  THE THING AGAIN AT JOB TERMINATION
         CLI  VS,C'2'   VS2
         BE    E08MVS5
         MVC CALLAREA,PDQABLK
         MVI CALLAREA+3,0
         GETJOBQ PDQDECB,CALLAREA
E08MVS5  EQU    *
         LH R1,PDQDSNNO
         CLI    VS,C'2'
         BNE    E08NMVS4
         MH     R1,=AL2(PDILEN)
         LA     R14,PDITERM1(R1)
         MVI      0(R14),0           OLD,DELETE FLAGS              DASD
         SH       R14,=H'44'         BACKUP TO DSNAME              DASD
         MVI      0(R14),C' '        WIPE OUT THE NAME IN PDQ      DASD
         PUTJOBQ PDQDECB2     OP PDI BLOCK
         CALL  UJE81PDQ                                          PDQDEL
         B     E08MAGTP                                          PDQDEL
*        JOLRETN     RC=0                                        PDQDEL
E08NMVS4 EQU   *
         MH R1,=AL2(PDQBLKLN)
         LA R14,PDQTERM(R1)
         OI 0(R14),B'10100000'    OLD,DELETE FLAGS
         PUTJOBQ PDQDECB
         CALL UJE81PDQ                                            87150
         B     E08MAGTP                                           87150
         JOLRETN
         SPACE 3
E08WHAT  EQU *
* SCRATCH FAILED
* WHY ??
         CH   R15,=H'8'  DID WE BUILD A BAD CAMLIST ENTRY ??       DASD
         BH   E08BADCM   BETTER TELL SOMEONE ABOUT THIS            DASD
         JOLERR 215,'SCRATCH FOR ',                              84150 *
               'DSID ''',DDDSID,''' DSNAME ''',#DSN,             84150 *
               ''' VOL(S):-',#VOL,' MAY BE PARTIALLY SUCCESSFUL, BUT A *
               FAILURE OCCURED BECAUSE:-'
         SPACE 2
* IF FAILURE OCCURRED BECAUSE THE VOLUMES WEREN'T MOUNTED,
*    I KNOW THAT THERE IS A JCL STEP BELOW WHICH WILL MOUNT
*    THE VOLUMES AND PERFORM THE SCRATCHES,SO LETS GO.
         LA    R1,E08SEQ+1+(0*(L'E08UNIT+L'E08VOL+L'E08SEQ))
         MVC   E08TMPVL,JFCBVOLS       SHIFT VOLUME IN            84150
         BAL R2,E08ERR
         LA    R1,E08SEQ+1+(1*(L'E08UNIT+L'E08VOL+L'E08SEQ))
         MVC   E08TMPVL,JFCBVOLS+6     SHIFT VOLUME IN            84150
         BAL R2,E08ERR
         LA    R1,E08SEQ+1+(2*(L'E08UNIT+L'E08VOL+L'E08SEQ))
         MVC   E08TMPVL,JFCBVOLS+12    SHIFT VOLUME IN            84150
         BAL R2,E08ERR
         LA    R1,E08SEQ+1+(3*(L'E08UNIT+L'E08VOL+L'E08SEQ))
         MVC   E08TMPVL,JFCBVOLS+18    SHIFT VOLUME IN            84150
         BAL R2,E08ERR
         LA    R1,E08SEQ+1+(4*(L'E08UNIT+L'E08VOL+L'E08SEQ))
         MVC   E08TMPVL,JFCBVOLS+24    SHIFT VOLUME IN            84150
         BAL R2,E08ERR
         B     E08RETNF
E08ERR   EQU *
* CALLED BECAUSE WE HAVE TO ANALYSE THE REASON WHY A SCRATCH FAILED
         CLI 0(R1),0           IS THIS ONE A ZERO ?
         BE    0(R2)           YES,SO JUST RETURN TO CALLER.
         CLI 0(R1),5           UNABLE TO MOUNT COS NO DEVICE ?
         BE    E08NPACK        LET OS DO SCRATCH (STEP DOWN TO RIGHDASD
*                            STEP)
         CLI 0(R1),6           DIDN'T OPERATOR WANT TO MOUNT VOL ?
         BE    E08NPACK                                            DASD
         CLI 0(R1),1           NOT IN VTOC ?
         BNE   E08TRET2                                     FIX-X 76200
         JOLERR 204,'    IT WAS NOT FOUND ON VOLUME ''',E08TMPVL
         BR    R2
E08TRET2 CLI   0(R1),2                                      FIX-X 76200
         BNE   E08TRET3                                     FIX-X 76200
         JOLERR 410,'    IT IS A VSAM DATA SPACE, OR '            84150*
               'AN INCORRECT PASSWORD WAS SUPPLIED'               84150
         BR    R2                                           FIX-X 76200
E08TRET3 CLI 0(R1),3           RETENTION PERIOD ?
         BNE E08TRET4
         JOLERR 205,'  IT CONTAINED A RETENTION DATE'             84150
         BR    R2                                           FIX-X 76200
E08TRET4 CLI 0(R1),4           I/O ERROR ?
         BNE   E08TRET7                                     FIX-X 76200
         JOLERR 406,'   AN I/O ERROR WAS DETECTED ON VOLUME ',    84150*
               E08TMPVL                                           84150
         BR    R2                                           FIX-X 76200
E08TRET7 CLI   0(R1),7                                      FIX-X 76200
         BNE   E08ERRXY                                     FIX-X 76200
         JOLERR 411,'DSNAME ''',#DSN,                       FIX-X 84150*
               ''' IS BEING USED BY SOMEONE ELSE:-'         FIX-X 76200*
               'TRY AGAIN LATER'                            FIX-X 76200
         BR    R2                                           FIX-X 76200
E08ERRXY SR    R2,R2                                        FIX-X 76200
         IC    R2,0(R1)                                     FIX-X 76200
         JOLERR 507,'SCRATCH RETURNED INVALID CODE;SEE REG 2'   X 76200
E08BADCM EQU *                                                     DASD
         JOLERR 213,'   THE CATLOG SPECIFIED AN INCORRECT UNIT ''',    *
               DDUNIT,''''                                        84150
         B   E08LETOS                                              DASD
E08NPACK  EQU  *                                                   DASD
         JOLERR 214,'   VOLUME ''',E08TMPVL,''' ON UNIT ''',      84150*
               DDUNIT,''' WAS NOT MOUNTED'
           SPACE 3
E08LETOS   EQU *
* IT HAS BEEN DECIDED THAT,FOR NO DOUBT AN EXTERMELY GOOD REASON,
*    WE MUST STEP DOWN TO THE STEP THAT SHOULD BE THERE TO
*    HAVE THE VOLUME MOUNTED SO THE SCRATCH MAY BE PERFORMED.
           JOLRETN RC=4
E08RETNF EQU   *   JOLRETN RC=16                                   DASD
*******************************************************            DASD
*    PDQ RECORDS NOT DELETED IF SCRATCH FAILS         *            DASD
*******************************************************            DASD
* WHEN A PROGRAMMER SAYS TO DELETE A DATASET BEFORE   *            DASD
* THE FIRST STEP OF THE JOB,  JOL WILL GENERATE A STEP*            DASD
* WITH A DDCARD REFERENCE TO THE DATASET TO BE DELETED*            DASD
* IF THE DATASET IS CATALOGED BUT NOT ON THE PACK THE *            DASD
* THIS SCRATCH ROUTINE WILL RETURN WITHOUT REMOVING   *            DASD
* THE PDQ RECORD.     ANY REFERENCE TO THIS DATASET   *            DASD
* LATER ON WILL ADD NEW PDQ RECORDS BUT WILL POINT    *            DASD
* TO THE FIRST ENTRY RESULTING IN ABEND=213           *            DASD
*******************************************************            DASD
         CLI   ISINPDQ,C' '    IS BAD GUY IN PDQ                   DASD
         BE    E08NFRPQ        NOPE  BETTER GO NOW                 DASD
* THE NAME IN THE PDQ MUST BE SET TO OLD,DELETED SO THAT OS        DASD
*   WON'T BOTHER DELETING  THE THING AGAIN AT JOB TERMINATION      DASD
         MVC CALLAREA,SIOT                                         DASD
         MVI CALLAREA+3,0                                          DASD
         GETJOBQ SIOTDECB,CALLAREA                                 DASD
         OI    SCTSDISP,B'00000100' TURN ON DELETE BIT             DASD
         OI    SIOTALTD,B'00000100' TURN ON DELETE BIT IN CONDITIONDASD
*                                   DISPOSITION PROCESSING         DASD
         PUTJOBQ SIOTDECB                                          DASD
         CLI   VS,C'2'   VS2                                       DASD
         BE    E08MVS6                                             DASD
         MVC   CALLAREA,PDQABLK                                    DASD
         MVI   CALLAREA+3,0                                        DASD
         GETJOBQ PDQDECB,CALLAREA                                  DASD
E08MVS6  EQU   *                                                   DASD
         LH    R1,PDQDSNNO                                         DASD
         CLI   VS,C'2'                                             DASD
         BNE   E08NMVS5                                            DASD
         MH    R1,=AL2(PDILEN)                                     DASD
         LA    R14,PDITERM1(R1)                                    DASD
         MVI   0(R14),0           OLD,DELETE FLAGS                 DASD
         SH    R14,=H'44'         BACKUP TO DSNAME                 DASD
         MVI   0(R14),C' '        WIPE OUT THE NAME IN PDQ         DASD
         PUTJOBQ PDQDECB2  OP PDI BLOCK                            DASD
         B     E08NFRPQ                                            DASD
E08NMVS5 EQU   *                                                   DASD
         MH    R1,=AL2(PDQBLKLN)                                   DASD
         LA    R14,PDQTERM(R1)                                     DASD
         MVI   0(R14),B'10100000'  OLD,DELETE FLAGS                DASD
         PUTJOBQ PDQDECB                                           DASD
E08NFRPQ JOLRETN RC=16                                             DASD
****************************************************************   DASD
* IF DOING A DELETE CHECK THE CATALOG TO SEE IF THE DATASET    *   DASD
* IS CATALOGED AND IF SO REUTRN TO THE SCRATCH                 *   DASD
*                                                              *   DASD
* THE FOLLOWING MESSSAGE IS ONLY ISSUED WHEN THE DATASET       *   DASD
* IS NOT ON THE PDQ                                            *   DASD
*                                                              *   DASD
* HERE AT STANDARD OIL A MODIFICATION EXSITS WHERE IF THE      *   DASD
* SCRATCH FAILED THE UNCATLG WILL STILL RUNS                   *   DASD
****************************************************************   DASD
E08NOPDQ NOP   E08PDQMG    TURN THIS ON TO SHUT OFF THIS CODE      DASD
         CLI   ICOMMAND,C'D'     DELETE STMT ?                     DASD
         BNE   E08PDQMG          NO---ISSUE THE MESSAGE            DASD
         $CALL UJELOCAT          CALL LOCATE MODULE                DASD
         LTR   R15,R15           ARE WE IN LUCK ?                  DASD
         BNZ   E08PDQMG          NOPE NOT TODAY                    DASD
         MVC   JFCBDSNM,DSNAME  COPY DATA SET NAME TO JFCB         DASD
         L     R15,=V(E05VOLS)  POINT TO CAMLST                    DASD
         USING VOLINFO,R15       GET SOME ADDDRESSILITY            DASD
         MVC   JFCBNVOL,NOVOLS+1 # VOLUMES                         DASD
         MVC   SCTUTYPE,CATDEV   UNIT TYPE                         DASD
         LH    R1,NOVOLS         # VOLUMES AGAIN                   DASD
         CH    R1,=H'5'          MORE THAN WE CAN HANDLE ?         DASD
         BNH   *+8               NO                                DASD
         LA    R1,5              ADJUST # VOLUMES FOR US           DASD
         LA    R14,JFCBVOLS      MOVE TO HERE                      DASD
         MVI   JFCBVOLS,C' '                                       DASD
         MVC   JFCBVOLS+1(L'JFCBVOLS-1),JFCBVOLS   CLEAR JFCB      DASD
E08LPVOL EQU   *                                                   DASD
         MVC   0(6,R14),CATVOL   MOVE VOL SER                      DASD
         LA    R15,12(R15)       POINT TO NEW CAMLST ENTRY         DASD
         LA    R14,6(R14)        UP TO NEXTBUCKET IN JFCB          DASD
         BCT   R1,E08LPVOL       GET ALL OF THE VOLUMES            DASD
         B     E08NOSTP          LETS DO THE SCRATCH AGAIN         DASD
         DROP  R15                                                 DASD
E08PDQMG   JOLERR 203,'DSID ''',DDDSID,''' DSNAME ''',#DSN,            *
               ''' NOT YET CREATED:-SCRATCH IGNORED'
           B  E08RETNF
           SPACE 3
E08TMPVL DS  CL6
           SPACE 3
E08SCRA    CAMLST SCRATCH,JFCBDSNM,,E08NOVOL
E08NOVOL   DS  H
E08UNIT    DS  CL4
E08VOL     DS  CL6
E08SEQ     DS  H
           DS  ((L'JFCBVOLS/6)*12)C
E08SCREN   EQU *
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           LTORG
          TITLE 'UJE66TST:TEST IF DATA SET IS GDG-ALL'
           JOLSAVE CSECT=UJE66TST
* WE WILL ONLY CAN THE CATLG SEARCH ROUTINE IF THE 'DSIDTYPE'     85196
*    INDICATES A REAL DSNAME (THIS COULD THEN BE A GDGALL)        85196
         CLI   DDTYPE,DDREALDS         REAL TYPE OF DATA SET?     85196
         BNE   U66RETN4                NO, SO BACK NOW            85196
         CLC   #E66DSN(2),=AL2(44-9)   CHECK IF NAME TOO LONG     85196
         BH    U66RETN4                CAN'T POSSIBLY BE GDGALL   85196
         LA    R1,DSNAME
         ST    R1,E66REMUV+4
         L     R15,=V(E05VOLS)         LOAD CAMLIST ADDRESS        DASD
         ST    R15,E66LOCAT+12         POINT TO LOCATE AREA        DASD
         MVC   #E66DSN(46),#DSNAME     MOVE TO A SAFE SAVE AREA
         LH    R15,#DSNAME             ADD 9 TO #DSN FOR MSSGES   85196
         LA    R15,9(R15)              ADD THE NINE               85196
         STH   R15,#DSNAME             STORE IT BACK              85196
         LA    R1,DSNAME               POINT TO DSNAME             DASD
         LA    R15,43(R1)              POINT TO END OF DSNAME      DASD
         LA    R14,1                   INCR BY 1                   DASD
E66FIND  CLI   0(R1),C' '              END OF DSNAME YET           DASD
         BE    *+8                     YEP LETS MOVE               DASD
         BXLE  R1,R14,E66FIND          RETURN                      DASD
         MVC   0(3,R1),=C'(0)'         LOOK FOR RELATIVE GDG 0     DASD
         MVC   #E66DSN2(46),#DSNAME    MOVE TO A SAFE SAVE AREA
         LOCATE E66LOCAT                                           DASD
         LTR   R15,R15                 DID LOCATE FIND ANYTHING ?? DASD
         BZ    E66DOIT                 YES, SO NOW CALL SCRATCH, UNCAT
         MVC   #DSNAME(46),#E66DSN     RESET DSNAME FOR ERROR MESSAGES
U66RETN4 JOLRETN RC=4                  NO, RETN A 4, LET OTHERS
*                                      GIVE ERROR MESSAGES
*                                      YES, SCRATCH THE DATA SET(MAYBE)
E66DOIT  CLI ICOMMAND,C'U'             UNCATALOG CALLING ME TO UNCAT
*                                      ONLY ?
         BE    E66DOUN                 YES, UNCAT ONLY
         CALL UJE08SCR                 YES, SCRATCH THE DATA SET
E66DOUN  CATALOG E66REMUV              NOW UNCATLG IT
         LTR   R15,R15                 DID THIS WORK OK            DASD
         BNZ   E66ERR1                 NOPE SOMETHINGS WRONG       DASD
         JOLERR 101,'DSID ''',DDDSID,''' DSNAME ''',                   *
               #DSNAME,''' UNCATALOGED'
E66LOOK  MVC   DSNAME,E66DSN2          MOVE DSNAME IN (2ND ETC TIMES)
         CLEAR  DDVOLUME
         LOCATE E66LOCAT                                           DASD
         LTR   R15,R15                 DID LOCATE FIND ANYTHING ?? DASD
         BNZ   E66RETN                 NOPE THAT ALL               DASD
         BZ    E66DOIT                 SCRATCH, LOOK FOR NEXT      CVC
E66RETN  JOLRETN
E66ERR1  JOLERR 302,'DSID ''',DDDSID,''' DSNAME ''',                   *
               #DSNAME,''' COULD NOT BE UNCATALOGED'
         JOLRETN
#E66DSN  DS   H                     LENGTH OF DSNAME TOO
E66DSN   DS   CL44
#E66DSN2 DS   H                     LENGTH OF DSNAME TOO
E66DSN2  DS   CL44
E66LOCAT CAMLST NAME,DSNAME,,0                                     DASD
E66REMUV   CAMLST UNCAT,0
         LTORG
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
           DC S(*),S(*),S(*),S(*)
JSCBOFFS   EQU 180
CVT        EQU 16
JCTTTRA    EQU 261
          TITLE 'UJE09DEL:DELETE DATA SET'
           JOLSAVE CSECT=UJE09DEL
* NEW CODE FOR DELETE GDGALL. BEFORE ATTEMPTING TO SCRATCH THE DATA-
*  SET, WE WILL SEE IF IT IS GDGALL. IF SO, WE WILL CALL THE SCRATCH
*  MODULE IN A LOOP.
           CLI  DDCATLGS,104   GDGALL AND CATALOG LOOKUP ALLOWED?
           BE   E09GDGA1       YES, GO SCRATCH, THEN UNCATLG
* TEST IF GDG-ALL, AND LOOP AROUND SCRATCHING EVERYTHING WE CAN FIND
           CALL UJE66TST TEST GDGALL, AND SCRATCH THE LOT
           LTR  R15,R15         WAS IT GDG- ALL?
           BZ   E09RETN0
E09GDGA1   CALL UJE08SCR
           LTR  R15,R15
           BZ   E09UNCAT  O.K. GUYS THE SCRATCH WORKED KEEP GOING  DASD
* STANDARD OIL REQUESTED THIS MOD                                  DASD
* THEY WANTED THE UNCATLG TO ALWAYS RUN EVEN IF THE SCRATCH FAILED DASD
           CLI  DDCATLGS,104   GDGALL ?                            DASD
           BNE  E09UNCAT   LET THE UNCATLG RUN THEN                DASD
           JOLRETN RC=(15)
E09UNCAT CLI   #DSN+2,C'&&'   TEMPORARY DATA SET ?                76200
         BE    E09RETN0                                           76200
         CALL  UJE06UNC                                           76200
E09RETN0 JOLRETN RC=0                                             76200
          TITLE 'UJE10TYP:TYPE A MESSAGE'
           JOLSAVE CSECT=UJE10TYP
* THIS REOUTINE DOES THE TYPING
           L   R7,=A(#TKN)
           USING #TKN,R7
           JOLERR 301,#TKN
           JOLRETN
           LTORG
          TITLE 'UJE11DIS:DISPLAY A MESSAGE'
           JOLSAVE CSECT=UJE11DIS
           L   R7,=A(#TKN)
           USING #TKN,R7
* DISPLAY HANDLER
           JOLERR 101,#TKN
           JOLRETN
           LTORG
          TITLE 'UJE12SIG:SIGNAL AN ERROR MESSAGE'
           JOLSAVE CSECT=UJE12SIG
* SIGNAL ERROR ROUTINE
           L   R7,=A(#TKN)
           USING #TKN,R7
           SR R2,R2
         NI    TKN,X'0F'        DROP 'F' FROM SEVERITY NUMBER
           IC R2,TKN           AND SAVE SEVERITY NUMBER
           GETTKN 3            GET MESSAGE TEXT
           CH R2,=H'3'
           BL  SIGONLY                         ONLY WARNINGS
           BE  SIGWTOR                         WTOR
* HERE A TERMINAL ERROR TO BE RASIED
           JOLERR 407,'TERMINAL ERROR ',#TKN,' SIGNALLED'
SIG4000    MVC TASKRETN,=F'4000'
           MVI  GOBACK,C'1'
SIGTERM    JOLERR 406,'JOB TERMINATING'
           JOLRETN RC=4000
           SPACE 3
SIGONLY    EQU *
           CH R2,=H'2'
           BL SIGERR1
         JOLERR 202,'SEVERE ERROR ',#TKN,'SIGNALLED'        FIX-X 76200
           B  SIGRETN
SIGERR1  JOLERR 101,'MINOR ERROR ',#TKN,' SIGNALLED'        FIX-X 76200
SIGRETN    JOLRETN
           SPACE 3
SIGWTOR    EQU *
*          JOLERR 403,'MAJOR ERROR ',#TKN,' SIGNALLED'
SIGRETRY   CLEAR SIGREPLY
         CLC   #TKN,=H'55'   IS THE MESSAGE TOO LONG?             84021
         BNH   E12WTOR1      NO                                   84021
         MVC   #TKN,=H'55'   YES, RESET IT                        84021
E12WTOR1 EQU   *                                                  84021
         JOLERR 403,#TKN,': REPLY GO OR STOP'                     84021
* JOLERR SETS UP JOBNAME ETC IN #S23LREC READY FOR WTOR           84021
         LA    R1,#S23LREC-8                                      84021
         MVI   0(R1),4       SET UP LENGTH OF REPLY               84021
         MVC   1(3,R1),=AL3(SIGREPLY) ADDRESS OF REPLY AREA       84021
         MVC   4(4,R1),=A(SIGECB) ADDRESS OF ECB TO WAIT ON       84021
           XC  SIGECB,SIGECB
ERE1204    EQU *
*     WTOR 'JOLE12-04 REPLY GO OR STOP',SIGREPLY,4,SIGECB,DESC=(2)
         LA    R1,#S23LREC-8                                      84021
         SVC   35          ISSUE WTOR                             84021
           WAIT ECB=SIGECB
           CLC =C'GO  ',SIGREPLY
           BE  SIGCONT
           CLC =C'STOP',SIGREPLY
           B  SIGTERM
           B   SIGRETRY
           SPACE 3
SIGECB     DS  F
SIGREPLY   DS CL4
           SPACE 3
SIGCONT    EQU *
           JOLERR 405,'JOB CONTINUING'
           B   SIGRETN
          LTORG
          TITLE 'UJE13STP:STOP HANDLER'
           JOLSAVE CSECT=UJE13STP
* STOP EXECUTER
           L   R7,=A(#TKN)
           USING #TKN,R7
           JOLERR 401,'STOP ''',#TKN,''' EXECUTED'
STPRETN    MVI GOBACK,C'1'
           MVC TASKRETN,=F'4000'
           JOLRETN RC=4000
           SPACE 3
           LTORG
          TITLE 'UJ20RUN:PERFORM A RUN INSTRUCTION'
           JOLSAVE CSECT=UJE20RUN
* HANDLE RUN STATEMENT
           MVI ISRUN,C'1'
           MVC RUNNAME,PGM
           MVC TASKNAME,PGM
           MVC TASKLABL,PGMLABEL
* NOW LETS SEE IF WE EXECUTE IN THIS STEP,OR IN THE NEXT,
*     AND IF A PARM IS USED IN THIS RUN
* NOW BEFORE XCTL TO THE USER PROGRAM,WE MUST DETERMINE WHETHER
*     OR NOT THERE ARE ANY DD-CARDS REFERRING TO THIS PROGRAM
*     OR IF THERE IS A PARM FIELD OR NOT.
* IF THERE ARE NO DD-CARDS,WE MAY XCTL NOW,OTHERWISE WE
*     MUST CHECK THAT THIS IS THE CORRECT OS STEP OR NOT
           L  R2,TTR$INST      SAVE TTR OF NEXT INSTRUCTION
*                              BECAUSE IF WE DECIDE NOT TO DO
*                              THE USERS PROGRAM HERE WE WILL
*                              HAVE TO RESET THE TTR SO THE
*                              NEXT OS STEP THAT IS EXECUTED
*                              WILL START AT THE CORRECT STEP
           CLC PGMNODDS,=A(0)    ARE THERE ANY DDCARDS?           75128
           BNE E20AREDD        YES
           CALL UJE50RD        READ NEXT STATEMENT
           LTR  R15,R15        EOF PERHAPS ?
           BZ E50TPARM
* NO DD'S  AND NO PARM,RETURN A 0,SO WE WILL XCTL TO
*     PROBLEM PROGRAM.
           MVI TTR$INST+3,0    SO WE RE-READ THE LAST STATEMENT
E20RETNO   EQU *
E20RETN0   EQU *
           BLDL 0,RUNBLDL
           B   RUNBLD(R15)
RUNBLD     B   RUNBLD0
           B   RUNBLD4
           B   RUNBLD8
RUNBLD4    EQU *
*UNBLD4    JOLERR 401,'PROGRAM ''',RUNNAME,''' ABSENT:- TRYING LPALIB'
           MVC  TASKSSI,=X'00000000'         CLEAR THE SSI INFO
           B   E20NTIOT     *************************             75002
RUNBLD8    JOLERR 402,'PERM I/O ERR FINDING ',RUNNAME
E20806     EQU  *
           MVI ISRUN,C' '
           JOLRETN RC=4000
           SPACE 3
RUNBLD0  LA    R15,RUNNAME                                        85199
         USING PDS2,R15                                           85199
         LA    R9,PDSBCEND+1           END OF BASIC SECTION       85199
         TM    PDS2FTB1,PDS2SSI        IS THERE AN SSI FIELD?     85199
         BNO   E20NOSSI                NO, MAKE IT ZEROS          85199
         TM    PDS2ATR1,PDS2SCTR       SKIP SCATTER FIELD?        85199
         BNO   E20NSCAT                YES                        85199
         LA    R9,PDSS01LN(R9)         ADD TO AVOID WRONG FIELD   85199
E20NSCAT TM    PDS2INDC,PDS2ALIS       ALIAS FIELD?               85199
         BNO   E20NALIA                YES                        85199
         LA    R9,PDSS02LN-1(R9)       ADD TO AVOID WRONG FIELD   85199
E20NALIA MVC TASKSSI,0(R9)                                        85199
           B   E20NTIOT     *************************             75002
E20NOSSI   MVC  TASKSSI,=X'00000000'         CLEAR THE SSI INFO
           B   E20NTIOT     *************************             75002
RUNBLDXX   SR  R8,R8
           IC  R8,RUNC1
           LA  R9,X'1F'
           NR  R8,R9
           SLL R8,1
           LA  R9,RUNUSDTA-6
           AR  R9,R8
           MVC TASKSSI,0(R9)
           B   E20NTIOT     *************************             75002
*  NOW SET PROGRAM NAME UP IN TIOT.
           LA  R1,TASKNAME       LOAD THE ADRESS OF PGM NAME      75002
           ST  R1,INST           STORE IN WORK AREA               75002
           MVI INST,8       SET LENGTH OF PARM TO 8               75002
           LA  R1,INST      LOAD A(PARM)                          75002
           L   R0,ATIOT    -> TIOT                                75002
           AH  R0,=H'16'    ->PGM NAME SPOT                       75002
           SVC 255          POP PGM NAME IN TIOT                  75002
E20NTIOT   EQU *                                                  75002
           JOLRETN
E50TPARM   EQU  *
           CLC =C'PARM ',ICOMMAND
           BE  E20ISPM
* AGAIN NO DD'S AND NO PARM
           MVI TTR$INST+3,0    SO WE RE-READ THE LAST STATEMENT
           B   E20RETN0        TO XCTL
           SPACE 3
* FIX UP USERS PARM FIELD
E20ISPM    EQU *
           L  R1,ATASKPRM
           L  R15,=A(#TKNSTRG)
           USING  #TKNSTRG,R15
*          MVC 0(100,R1),#TKNSTRG     ************** U102 ?****** 76200
           MVC 0(256,R1),#TKNSTRG     WAs 100, now 256 characters   J60
* Test if there is a 2nd Parm record.  We will allow up to          J60
* 2500 characters Nov 23, 2010                                      J60
E20PARM2   DS  0H                                                   J60
           CALL UJE50RD        READ NEXT STATEMENT                  J60
           LTR  R15,R15        EOF PERHAPS ?                        J60
           BNZ E20RETN0        Go back                              J60
           CLC =C'PARM ',ICOMMAND Is it 2nd or more Parm            J60
           BE  E20ISPM2        Yes                                  J60
* Only 1 Parm, or ended getting multiple ones.                      J60
           MVI TTR$INST+3,0    SO WE RE-READ THE LAST STATEMENT     J60
           B   E20RETN0        Return to Monitor, Attach Prob Prog  J60
E20ISPM2   L  R1,ATASKPRM      Get address of current parm          J60
           LR  R14,R1                                               J60
           AH  R14,0(R1)       Get address of end of string         J60
           L  R15,=A(#TKNSTRG)                                      J60
           MVC 2(256,R14),#TKNSTRG+2  Just move 256 characters      J60
           LH  R14,0(R1)       Get current length                   J60
           AH  R14,#TKNSTRG    Add New length                       J60
           STH R14,0(R1)       Store new length                     J60
           B   E20PARM2        Get next record, for up Parm         J60
         DROP  R15
           SPACE  3
E20AREDD   EQU *
* THE USERS PROGRAM HAS DD-CARDS AND WE MUST DILIGENTLY
*     CHECK WHETHER OR NOT WE ARE IN THE CORRECT OS JOB-STEP
*     (I.E DO WE HAVE THE DD-CARDS NECESSARY FOR THIS PROGRAM)
           CLC  SCTSNAME(8),PGMSTEP RIGHT OS JOB STEP ?           75311
           BE  E20TPM2         TEST IF THIS HAS A PARM NOW
           BH  E20TOOHI        ERROR,GONE TOO FAR
* RIGHTO,MUST CHANGE OS STEPS OLD BOY.
E20CHNG    ST R2,TTR$INST
           MVI TTR$INST+3,0    RESET 'Z' IN TTR
           B  *+4
           B  *+4
           B  *+4
           JOLRETN RC=4        TELL US TO GO TO ANOTHER OS STEP
E20TPM2    EQU *
           CALL UJE50RD
           LTR R15,R15
           BNZ E20RETN0
           B   E50TPARM
E20TOOHI CLC   =C'$$',PGMSTEP                                     75311
         B     E20CHNG  **********************LET MAIN FIX IT *** 75311
         BNE   E20CHNG                                            75311
           JOLERR 503,'CANNOT FIND STEP FOR ',PGMESTMT
           LTORG
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           IHAPDS
           TITLE 'UJE23RET: HANDLE RETURN INSTRUCTION'
           JOLSAVE CSECT=UJE23RET                                 74365
           L   R7,=A(#TKN)
           USING #TKN,R7
         JOLERR 101,'RETURN ',#TKN,' EXECUTED'              FIX-X 76200
           L R14,=A(RETURN)                                       74365
           JOLRETN (15,12),RC=0                                   74365
           DC S(*,*,*,*)
           DC S(*,*,*,*)
           DC S(*,*,*,*)
           DC S(*,*,*,*)
           DC S(*,*,*,*)
           SPACE 3                                                75311
           JOLSAVE CSECT=UJE31OPT                                 75311
           MVI JOLSVC,X'0A'    SVC INSTRUCTION CODE               75311
           MVC JOLSVC+1(1),ITEXT+2 SVC NUMBER                     75311
           JOLRETN  RC=0                                          75311
           TITLE 'UJE50RD:READ A STATEMENT FROM JOL INSTRUCT FILE'
           JOLSAVE CSECT=UJE50RD
* THIS CSECT IS CALLED WHEN A NEW INSTRUCTION HAS TO BE
*    READ FROM THE INSTRUCT FILE.
           MVC #VOL,=H'0'     STOP SPURIOUS 0C4                  75311
           CLC TTR$INST,=A(0)  FIRST TIME IN,I.E. WE HAVEN'T
*                              EVEN REALLY STARTED YET ?
           BNE E50NOTF
           MVC RUNNAME,=CL8'$$INST'
           BLDL INSTRUCT,RUNBLDL
           B   E5002R(R15)
E5002R     B   E50GOTIT
           B   E5002R4
           B   E5002R8
E5002R4    JOLERR 501,'MEMBER $$INST ABSENT'
E5002R8    JOLERR 502,'I/O ERROR READING DIRECTORY'
           DS 0D
E50GOTIT   EQU *
           MVC TTR$INST,RUNTTRK
           MVI TTR$INST+3,0     SET Z=0 FIRST
E50NOTF    POINT INSTRUCT,TTR$INST
E50RD      EQU *
           MVC INSTRUCT+33(3),=AL3(EOF)
           L  R15,=A(#TKNSTRG)
           USING  #TKNSTRG,R15
           CLEAR TKNSTRG
         DROP  R15
           L  R2,=A(INSTRDA)
           USING    INSTRDA,R2
           READ E50DECB,SF,INSTRUCT,(2)
           CHECK E50DECB
* IF EOF WOULD HAVE GONE ELSE-WHERE
*******************************************************************DASD
*   THIS CALL TO MODULE $$JOLBUG WILL PRINT THE INSTRUCTION        DASD
*   JUST READ TO DDNAME '$JOL$BUG$' IF IT'S PRESENT                DASD
*   -----MAYBE A GOOD TRACE FACILITY----                           DASD
*   YOU MIGHT DO A JOLOPT CARD1='//$JOL$BUG DD SYSOUT=A'           DASD
*   IN THE COMPILE TO GET THIS DD IN EVERY STEP                    DASD
****************************************************02-23-78*******DASD
      CALL   $$JOLBUG,((2))     CALL PRINT MODULE                  DASD
         DROP  R2
           SPACE 3
           L   R7,=A(#TKN)
           USING #TKN,R7
           NOTE INSTRUCT
           ST  R1,TTR$INST
           MVI TTR$INST+3,1    SET Z TO 1 SO NEXT READ GETS NEW BLK
           MVC INST(IBODY),INSTRDA
           MVC DDDSNDET(DDLEN),INSTRDA
           MVC STMT,ISTMT
           MVC GOTOLAB,=CL8'$$'
           CLI DDDD1,C'E'      EXEC PGM ?
           BNE E50TDD
           MVC ICOMMAND,=CL8'RUN'
           MVC STMT,PGMESTMT
           MVC GOTOLAB,PGMSTEP SHIFT STEPNAME FOR 'REAL' STEPNAME 75311
           JOLRETN
E50TDD     EQU  *
           CLI DDDD1,C'D'      DD-CARD TYPE ENTRY?
           BNE ISALABEL
* NOW FOR DD-CARD TYPE ENTRIES,WE DON'T SPLIT INTO TOKENS.
* SET UP SHORT DSNAME FOR ERROR MESSAGES
           MVC DSNAME,DDDSNAME
           LA  R15,L'DDDSNAME-1
E50TEDSN   EQU *
           LA  R14,DDDSNAME(R15)
           CLI 0(R14),C' '
           BNE E50DSNOK
           BCT R15,E50TEDSN
E50DSNOK   EQU  *
           LA  R15,1(R15)
           STH R15,#DSN
           MVC STMT,DDDDNAME+2
           MVC GOTOLAB(2),=C'$$'
           MVC GOTOLAB+2(6),DDDDNAME+2
           MVC #TKN,=H'8'
           MVC TKN(8),BLANKS
           MVC TKN(1),DDDDNAME+1
           MVC ICOMMAND,TKN
           JOLRETN
ISALABEL   EQU *
           CLC INST,=AL2(IBODY+1)
           BH  E50SPLIT
           L  R15,=A(#TKNSTRG)
           USING  #TKNSTRG,R15
           XC #TKNSTRG,#TKNSTRG
         DROP  R15
E50SPLIT   EQU  *
* THE DOUBLE QUOTE ROUTINE IN THE COMPILER NOW REMOVES            76200
* ALL QUOTES FROM THE STRING, AND THEREFORE IF                    76200
* SOMEONE HAS QUOTES IN A STRING FOR A PARM, THERE                76200
* WILL NOW ONLY BE ONE. THIS CAUSES ALL SORTS OF                  76200
* PROBLEMS WHEN THE TOKEN SPLITTER GETS IT.                       76200
         CLC   ICOMMAND,=CL8'PARM' PARM?                          76200
         BNE   E50SPL2                                            76200
         JOLRETN RC=0                                             76200
E50SPL2  EQU   *                                                  76200
           CALL UJCTKN,TKNX
*           B *+4                                                  DASD
*           B *+4                                                  DASD
*           LTR R15,R15                                            DASD
*           BZ  GOTINSTR                                           DASD
            B  *+4(R15)                                            DASD
            B  GOTINSTR  SUPER INSTRUCTION IS CLEAN                DASD
            B  E50BINST  STMT > 1000 BYTES   CANN"T HANDLE THIS    DASD
            B  GOTINSTR  TOO MANY TOKENS > 150                     DASD
            B  GOTINSTR  TOKEN > 120 BYTES                         DASD
            B  GOTINSTR  NO ENDING QUOTE                           DASD
E50BINST   JOLERR 503,'ERROR IN INSTRUCTION'                       DASD
GOTINSTR   EQU *
           GETTKN 1
           JOLRETN
EOF        JOLRETN RC=4
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
          LTORG
         EJECT
           TITLE 'UJE81PDQ:READ PASSED DATA SET QUEUE'
           JOLSAVE CSECT=UJE81PDQ
* THIS CSECT MUST FIND THE PDQ ENTRY THAT REFERS TO THE DSNAME
*    IN THE DSNAME FIELD. A 4 IS RETURNED IF IT CAN'T
*
******
* CHECK IF JCTPDIP = 0 (MAY BE IF RUNNING UNDER
*                       TSO).
******
           MVI ISINPDQ,C' '                                        DASD
         SPACE 1                                                  76200
         CLC   JCTPDIP,=F'0'                                      76200
         BNE   E81GO                                              76200
         JOLRETN RC=4                                             76200
E81GO    EQU   *                                                  76200
           GETJOBQ PDQDECB2,JCTPDIP
           B  E81GOTRD
E81READ1   GETJOBQ PDQDECB2,CALLAREA
E81GOTRD EQU    *
         CLI    VS,C'2'   MVS?
         BNE   E81NMVS1
E81MVDS1 CLC   DDDSNAME,PDIDSN1
         BE    E81PASS1
         CLC   DDDSNAME,PDIDSN2
         BE    E81PASS2
         CLC  DDDSNAME,PDIDSN3
         BE     E81PASS3
* NOT IN PDI, GET NEXT
         CLC  =AL3(0),PDINPDIP  IS THIS THE LAST BLOCK?
         BE   E81RETN4    YES, NOT FOUND THEN
         GETJOBQ  PDQDECB2,PDINPDIP
         B    E81MVDS1
E81NMVS1 EQU  *
         CLC DDDSNAME,PDQDSN1
         BE    E81PASS1
         CLC DDDSNAME,PDQDSN2
         BE    E81PASS2
         CLC DDDSNAME,PDQDSN3
         BE    E81PASS3
* NOT IN THAT BLOCK,GET THE NEXT
         CLC =AL3(0),PDQNPDQ LAST BLOCK IN PDQ ?
         BE    E81RETN4        YES,THERE-FORE COULDN'T FIND DSET
         MVC CALLAREA,PDQNPDQ
         MVI CALLAREA+3,0
*
         B     E81READ1
E81PASS1 MVC PDQDSNNO,=H'0'
         B     E81PDQB
E81PASS2 MVC PDQDSNNO,=H'1'
         B     E81PDQB
E81PASS3 MVC PDQDSNNO,=H'2'
E81PDQB  EQU *
* THERE USED TO BE A NOTE FOR JOBQ HERE, NOT NEC NOW              75128
         ST R1,APDQDIR         AND SAVE IT
         CLI    VS,C'2'     MVS
         BNE     E81NMVS2
* GET SIOT FOR MVS SYSTEMS
         LH   R1,PDQDSNNO
         MH   R1,=AL2(PDILEN)
         LA   R14,PDISIOT1(R1)   GET SIOT ADDRESS LOCN
         MVC   CALLAREA,0(R14)
         B    E81GETSI         GO GET THE SIOT
E81NMVS2 EQU       *
         MVC CALLAREA,PDQABLK
         MVI CALLAREA+3,0
         GETJOBQ PDQDECB,CALLAREA
* NOW GET THE SIOT AS WELL
         LH    R1,PDQDSNNO     DATA SET NUMBER
         MH    R1,=AL2(PDQBLKLN) LENGTH OF BLOCK
         LA    R1,PDQASIOT(R1)   ABSOLUTE ADDRESS
         MVC CALLAREA(3),0(R1) SIOT TTR
         MVI CALLAREA+3,0
E81GETSI EQU    *
         GETJOBQ SIOTDECB,CALLAREA
         MVI ISINPDQ,C'1'
         JOLRETN
E81RETN4 EQU    *
           JOLRETN RC=4
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           TITLE 'UJE98INI:INITIALISATION ROUTINES'
           JOLSAVE CSECT=UJE98INI
* THIS CSECT IS CALLED IMMEDIATELY AFTER THE JOL SCHEDULER GETS CONTROL
*    AND IT  OPENS THE FILES ETC
* SECOND DETERMINE WHETHER WE ARE RUNNING UNDER 'HASP' OR 'OS'
*    IF THERE IS A DD-CARD FOR '$$PRINT' THEN THE SYSOUT FILE
*    ASSOCIATED WITH THAT FILE WILL BE USED SIMILIARLY TO THE
*    'HASP' SYSTEM LOG,I.E ALL COMMENTS WILL GO OUT TO IT.
           SPACE 3
* NOTE *** UNDER VS, WE ATTACH RATHER THAN XCTL TO THE USER PROGRAM
*     AS WE SAVE TIME THEN BY NOT CLOSING AND RE-OPENING OUR FILES.
*     SO, LET'S SEE IF THEY ARE OPEN, AS TO OPEN AGAIN WOULD DEFEAT
*     THE WHOLE EXERCISE, WOULDN'T IT?
         SPACE 1
         TM    INSTRUCT+48,X'10'                                  74365
         BO    SCHEDGO                                            74365
         SPACE 1
         MVC   STMT,=CL4'   1'
         L     R6,AMSGS                                           J50
         USING MSGSECT,R6                                         J50
         B     CHK080                                             J60
         CPUCHK                                                        .
               SDATE=RUNDATE,    TODAY'S DATE                          .
               ERRET=CHK010,     UNLICENCED PROCESSOR                  .
               DEMO=CHK020,      THIS IS A DEMO VERSION                .
               EXPIRED=CHK030,   EXPIRED LICENCE                  J50  .
               NOTABLE=CHK040,   THE TABLE'S MISSING                   .
               CKSERR=CHK050,    THE TABLE IS CORRUPT                  .
               NRETURN=CHK090,   IT'S OK                          J50  .
               FLAG=CHKFLG,      SET THIS FLAG IF IT'S CHECKED OK      .
               PCCA=PCCA                                          J50
         SPACE
CHK010   DS    0H                                                 J50
         WTO   MF=(E,E999A01)
         B     CHK080                                             J50
CHK020   DS    0H                                                 J50
         WTO   MF=(E,E999A02)
         B     CHK080                                             J50
CHK030   DS    0H                                                 J50
         CH    R0,=H'30'                                          J50
         BH    CHK060                                             J50
         WTO   MF=(E,E999A03)
         B     CHK080                                             J50
CHK040   DS    0H                                                 J50
         WTO   MF=(E,E999A04)
         B     CHK080                                             J50
CHK050   DS    0H                                                 J50
         WTO   MF=(E,E999A05)
         B     CHK080                                             J50
CHK060   DS    0H                                                 J50
         WTO   MF=(E,E999A06)
         B     CHK080                                             J50
CHK080   DS    0H                                                 J50
CHK090   DS    0H                                                 J50
         CALL  UJE70OPN,(AQMRAW,IBMRTN,INSTRUCT,PRINT,RETN,JOBQ,  ******
               JCTTTR,VS,ATCB),MF=(E,CALLAREA)                    *****
*** ABOVE OPENS REQUIRED FILES, AND :-                            *****
*    1. SETS 'JCTTTR' TO CORE ADDRESS, OR TTR ON JOBQ.            *****
*    2. LOADS (MAYBE) AN IBM ROUTINE TO ACCESS JOBQ.              *****
*    3. OPENS 'INSTRUCT'                                          *****
*    4. OPENS 'PRINT' IF $$PRNT DD CARD PRESENT                   *****
*    5. OPENS 'JOBQ'  IF $$JOBQ DD CARD PRESENT AND ¬MFT ÝMVTÝMVS *****
*    6. SETS 'VS' TO ' ' Ý '1' Ý '2' Ý 'M'                        *****
*    7. SETS 'ATCB' = A(OUR TCB)                                  *****
         SPACE 3                                                  *****
*        L     R15,=A(CHKFLG)                                     J50
*        CLI   0(R15),12                                          J50
         B     UJEF010                                            J60
         CLI   CHKFLG,12                                          J50
         BE    UJEF010                                            J50
         MVI   0(13),10                                           J50
         MVI   1(13),13                                           J50
         LM    R14,R12,=15A(X'00FFF000')                          J50
         B     0(R13)                                             J50
UJEF010  DS    0H                                                 J50
SCHEDGO  EQU   *
         L     R1,ATASKPRM      CLEAR USER'S PARM
         MVC   0(2,R1),=H'0'
         SPACE
* NOW CHECK THAT THE INSTRUCT AND RETNCODE FILES ARE OPEN
           SR  R8,R8
           TM  INSTRUCT+48,X'10'
           BO  FILE1OK
           LA  R8,1
           JOLERR 501,'NO DD CARD FOR $$INST'
FILE1OK  EQU   *                                                  75128
           FIND INSTRUCT,MBRRETN,D
           B   E99INITR(R15)
E99INITR   B   E99GOTMB
           B   E99FIND4
           B   E99FIND8
MBRRETN    DC  CL8'$$RETN'
           SPACE 3
E99FIND8   JOLERR 504,'I/O ERROR READING DIRECTORY'
           SPACE 3
E99FIND4   EQU *
* THE $$RETN MEMBER HASN'T BEEN SET UP APPARENTLY
           JOLERR   109,'JOL UNIVERSAL COMMAND LANGUAGE VERSION &VERSION
               N CREATED ON DAY &SYSDATE AT &SYSTIME'
         LA    R1,READAREA
         USING READAREA,R1
         CLEAR READAREA    ****** FOR TESTS ONLY ?????
         DROP  R1
         XC    TTR$RETN(100),TTR$RETN                             75311
         MVI   COND,C' ' CLEAR   COND TO BLANKS                    DASD
         MVC   COND+1(L'COND-1),COND                               DASD
         WRITE E99DEC9,SF,RETN,READAREA,'S'
         CHECK E99DEC9
         NOTE  RETN
         ST    R1,TTR$RETN
         STOW RETN,STOWBLK,A
         LTR R15,R15
         BZ    E99RDJCT
         JOLERR 503
E99GOTMB EQU *
* WE HAVE NOW FOUND THE $$RETN MEMBER OF THE DATA SET
         LH R2,INSTRUCT+X'3E'
         MVC INSTRUCT+X'3E',=AL2(2560)                             DASD
         READ E99DECBX,SF,INSTRUCT,RETNAREA
         CHECK E99DECBX
         STH R2,INSTRUCT+X'3E'
         NOTE INSTRUCT
         ST    R1,TTR$RETN     FOR REWRITING
* FIND OUT HOW MUCH DATA WE READ (ALSO USED FOR REWRITING)
         L    R1,E99DECBX+16   IOB ADDRESS
         LH R14,INSTRUCT+X'3E'    BLOCKSIZE
         SH R14,14(R1)    MINUS RESIDUAL COUNT
         STH R14,RETNBLKS      LENGTH OF RETN BLOCK
         SPACE 3
         MVC STMT,DBL
E99RDJCT EQU    *
         SPACE 3
* BETTER SET UP THE JOBNAME ETC
         LA    R4,CALLAREA
         EXTRACT (4),'S',FIELDS=(TIOT)
         L     R1,CALLAREA
         ST    R1,ATIOT        SAVE ADDRESS OF TIOT
* NOW READ IN JCT AND SCT
         GETJOBQ JCTDECB,JCTTTR                                   *****
         MVC CALLAREA(3),JCTSSTR    POINT TO CURRENT SCT
E80RDSCT EQU    *
         MVI CALLAREA+3,0
         GETJOBQ SCTDECB,CALLAREA
*****************************************************************
* NOW BECAUSE OS DOES NOT UPDATE THE CURRENT JCT
*     SCT POINTER AFTER A STEP HAS BEEN BYPASSED,I MUST
*     CHECK THAT THE SCT I'VE JUST READ IN IS THE RIGHT ONE
*     FOR THIS OS STEP.
*     IF ITS NOT,I STEP ON TO THE CORRECT ONE.
* ALSO THE CURRENT OS STEP COUNTER MUST BE UPDATED COS I USE
*     IT IN THE SCRATCH ROUTINE
******************************************************************
* WE'LL USE THE TIOT STEP NUMBER,COS THAT MUST BE RIGHT ?????
           SPACE
           ST R1,CALLAREA
           MVC  JCTSSTR(3),CALLAREA
* NOW CHECK THAT THE STEPS ARE RIGHT
           L R1,ATIOT          GET TIOT ADDTRESS
           CLC SCTSNAME,8(R1)   RIGHT STEP ?
           BE E98T1ST          TEST IF 1ST TIME IN THIS OS STEP
* OK THEN,STEP ON TO READ NEXT SCT,AND ADD 1 TO CURRENT
*     JCT STEP COUNTER
           SR R1,R1
           IC R1,JCTSNUMB
           LA R1,1(R1)
           STC R1,JCTSNUMB
           MVC CALLAREA(4),SCTANSCT  NEXT SCT ADDRESS
           B  E80RDSCT
E98T1ST    EQU  *
           SPACE 3
           SPACE 3
           CLI TASKIND,C' '    IS THIS THE FIRST TIME I'VE BEEN CALLED
*                              THIS OS STEP ?
           BE  E99RETNO        YES,SO NOW FILES ETC INITIALISED,GO BACK
*                              TO THE MAIN-LINE LIKE A GOOD BOY.
           SPACE 3
* THE SCHEDULER HAS BEEN RE-ATTACHED AFTER AN XCTL TO A PROBLEM
*    PROGRAM. THEREFORE WE MUST DO NICE THINGS LIKE PRINT OUT
*    THE RETURN CODES ETC,
* WE HAD BETTER STORE ITS RETURN CODE IN THE TABLE ANYWAY
           LH R1,NOIDS
           MH R1,=H'18'
           LA R1,IDSTART(R1)
           USING IDOVLY,R1
           MVC IDRETN,TASKRETN
           MVI IDRETN,0        TURN OFF HIGH ORDER BITS FOR COMPARISONS
*                              IN THE 'IF' STATEMENT LATER
******* MORE FOR  MAXCC,LASTCC   SEPT 75
         TM    TASKRETN,X'80'   DID AN ABEND OCCUR?      CHG26028 76200
         BO    E98LMAX        YES, SO LEAVE LASTCC AND MACHG26028 76200
            MVC  LASTCC,IDRETN   LASTCC DONE
            CLC  MAXCC,LASTCC
            BH   E98LMAX
            MVC  MAXCC,LASTCC   MAXCC DONE
         DROP  R1
E98LMAX     L   R1,TASKSSI                                        75128
           SR  R0,R0
           SLDL R0,4
           AH R1,=H'15'        X'F'
           STM R0,R1,CALLAREA
           UNPK ENDMSSI,CALLAREA+3(5)
           OI  ENDMSSI+7,X'F0'
* NOW SEE IF TASK ABENDED OR RETURNED PROPERLY.
           TM  TASKRETN,128                    ABEND ?
           BZ  NOTABND
         MVI   ERRORIND,1     TURN ON ABEND INDICATOR    CHG26028 76200
* WAS IT A USER ABEND OR A SYSTEM ABEND ?
           L   R1,TASKRETN
           N   R1,=X'00FFF000'
           BZ  USERABND
           SRL R1,8
           ST  R1,DBL
         UNPK  ENDMRETC,DBL+1(3)                                  75311
         OI    ENDMRETC+3,C'0'                                    75311
           TR  ENDMRETC,HEX                                       75311
         MVI   ENDMRETC,C'S'                                      75311
           JOLERR 307,'STEP ',TASKLABL,' LM ',TASKNAME,           74365*
               ' SYSTEM ABEND ',ENDRETC,' (SSI=',ENDSSI,')'       74365
E99CLRAB CLEAR TASKRETN    CLEAR ABEND                   CHG26028 76200
*        B     E20R16       TAKE BRANCH TO COND CODE TERMINATE   C DASD
         B     E99RETN0                                          A DASD
           SPACE 3
NOTABND    XC TASKRETN(2),TASKRETN
USERABND   EQU *
           L   R0,=X'0000FFFF'  IF NEGATIVE NUMBER LETS SHOW IT    DASD
           N   R0,TASKRETN
           CVD R0,DBL
*          OI  DBL,15                                              DASD
           UNPK ENDRETB,DBL                                        DASD
           OI   ENDRETB+4,X'F0'                                    DASD
           CLI ENDRETB,C'0'                                        DASD
           BNE ENDMSSOK  ITS A BIG ONE                             DASD
           MVI ENDRETB,C' '  PRINT AS BEFORE (4 BYTE RETN CODE)    DASD
ENDMSSOK   EQU *
           TM  TASKRETN,X'80'  ABEND ?
           BO  E99TYPER
           JOLERR 105,'STEP ',TASKLABL,' LM ',TASKNAME,           87150*
               ' RETURNED ',ENDRETB,' (SSI=',ENDSSI,')'           87150
*                                                                 76200
* TO HANDLE THE STOP WHEN, WE MUST EXAMINE THE JCT JOB TERMINATION76200
* INDICATORS, AND COMPARE THIS RETURN CODE AND IF NECESSARY,      76200
* TERMINATE THE RUN.                                              76200
*                                                                 76200
         CALL  UJE98TCN      TEST JOB CONDITION CODES.            86212
         LTR   R15,R15       DO WE HAVE TO STOP THE JOB ?         86212
         BZ    E99RETN0      NO, SO -> RETURN                     86212
         JOLRETN RC=4000     STOP THEN ....                       86212
E99TYPER   JOLERR 306,'STEP ',TASKLABL,' LM ',TASKNAME,           87150*
               ' USER ABEND ',ENDRETB,' (SSI=',ENDSSI,')'         87150
         B     E99CLRAB                                  CHG26028 76200
E99RETN0   EQU *
E99RETNO   EQU *
           MVI TASKIND,C'1'
           JOLRETN
STOWBLK    DC  CL8'$$RETN'
STOWTTR    DC  XL3'00'
STOWC      DC  X'00'
           DS CL50
ENDSSI     DS 0CL8
ENDMSSI    DS  CL8
ENDRETB    DS 0CL5            FOR MINUS RETURN CODES               DASD
ENDRETC    DS 0CL4
ENDMRETC   DS  CL4
           DS CL1                                                  DASD
HEX        EQU *-240                                              75311
           DC  C'0123456789ABCDEF'                                75311
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
           DC   S(*),S(*),S(*),S(*)
         LTORG
         JOLSAVE CSECT=UJE98TCN
* THIS CSECT CHECKS THE JOB CONDITION CODES, AND ABORTS IF
*      NECESSARY.
* TO HANDLE THE STOP WHEN, WE MUST EXAMINE THE JCT JOB TERMINATION76200
* INDICATORS, AND COMPARE THIS RETURN CODE AND IF NECESSARY,      76200
* TERMINATE THE RUN.                                              76200
*                                                                 76200
* WE HAVE RESERVED TO US 1 JOB COND OF 'EQ,4000', AND SO WE CAN   76200
* FLUSH THE JOB BY SETTING 4000 ANY TIME WE WISH.                 76200
*                                                                 76200
*                                                                 76200
         MVC   LASTCC,TASKRETN    SET LASTCC
         CLC   MAXCC,LASTCC
         BH    E98TJCT
         MVC   MAXCC,LASTCC       MAXCC DONE
E98TJCT  LA    R1,JCTJDPCD                                        76200
         LA    R15,JCTJDPCD+4+28-1 END LOOP INDIC                 76200
         LA    R14,4               LENGTH OF TABLE                76200
E99DEPL  CLI   2(R1),0       ANY COND (END LOOP)                  76200
         BE    E99RETNZ            END -> RETURN                  86211
         IC    R6,2(R1)            GET DEPENDENCY CODE AND        76200
*                                  GET REDY FOR EXECUTE           76200
         CLC   0(2,R1),TASKRETN+2 COMPARE                         76200
         EX    R6,E99GO40          BRANCH IF TRUE                 76200
         BXLE  R1,R14,E99DEPL      LOOP THEN ...                  76200
         B     E99RETNZ                                           86211
E99R16     EQU  *
*E20R16     EQU  *
* DUE TO USING MVS MACRO, MUST MOVE JOBNAME BEFORE 'JOLERRINR'
            MVC  TASKLABL,JCTJNAME
           JOLERR 408,'JOB ',TASKLABL,                                 *
               ' TERMINATED DUE TO CONDITION CODES'
           XC TASKRETN(2),TASKRETN
* THE NEXT MVC WILL STOP MVS FROM RUNNING AFTER A ABEND            DASD
* THIS PROBLEM IS BEING WORKED ON AS OF 4/1/77                     DASD
* SORRY ABOUT THE "IF ERROR LOGIC"                                 DASD
*        MVC   TASKRETN(4),=F'4000'                                DASD
* THIS PROBLEM IS NOW FIXED IN THE MONTOR AS OF 7/10/77            DASD
         MVI   TASKIND,C'1'
         JOLRETN RC=4000
E99RETNZ JOLRETN RC=0
E99GO40  BC    0,E99R16       EXECUTED  *****                     76200
         LTORG
           TITLE 'UJS23ER:WTP,WTO ERROR MESSAGES'
UJS23ER    CSECT
           USING *,R15
           STM R14,R12,12(R13)
           LA  R0,SAVEAREA
           ST  R0,8(R13)
           ST  R13,SAVEAREA+4
           BAL R13,STARTERR
SAVEAREA   DS  18F
STARTERR   EQU *
         DROP  R15
           USING SAVEAREA,R13
* R14 IS THE RETURN ADDRESS BUT IT ALSO POINTS TO A LIST OF INSTRUCTION
*    S WHICH ARE TO BE EXECUTED
* THEY CAN BE :-
*    MVC   CONSTANT
*    LA    VARYING STRING
           CLEAR S23MSSG       CLEAR MESSAGE AREA
* NEW, END DEC 1974. IF AN ERROR MESSAGE IS BEING ISSUED, THEN OFFSET
*    THE MESSAGE AND PUT '***' IN IT.
           LA  R1,S23MSSG                                         74365
         CLC   =C'DISPLAY ',ICOMMAND                     CHG30062 76200
         BE    S23OFF10                                  CHG30062 76200
         CLC   =C'TYPE ',ICOMMAND                        CHG30062 76200
         BE    S23OFF10                                  CHG30062 76200
         CLC   =C'RETURN ',ICOMMAND                      CHG30062 76200
         BE    S23OFF10       PUT 10 BLANKS IN START     CHG30062 76200
         B     S23TSEV                                   CHG30062 76200
S23OFF10 MVC   0(10,R1),BLANKS OFFSET MESSAGE BY 10      CHG30062 76200
         LA    R1,10(R1)      SKIP BLANKS                CHG30062 76200
         B     S23START       GO FORM UP MESSAGE         CHG30062 76200
S23TSEV  CLI   S23SEV,2                                  CHG30062 76200
         BNL   S23REALE       REAL ERROR, PUT JOB NAME   CHG30062 76200
         MVC   0(5,R1),BLANKS                            CHG30062 76200
         LA    R1,5(R1)                                  CHG30062 76200
         B     S23START                                  CHG30062 76200
S23REALE MVC   0(4,R1),=C'***('  PUT '***('              CHG30062 76200
         MVC   4(8,R1),JCTJNAME  + JOBNAME               CHG30062 76200
         MVI   12(R1),C')'       + ')'                   CHG30062 76200
         LA    R1,13(R1)         SKIP ABOVE              CHG30062 76200
S23START   MVC 0(3,R1),=C'JOL' SHIFT IN 'JOL'                     74365
           LA  R1,3(R1)        SKIP OVER IT SO WE WON'T OVER-WRITE IT
S23LUP1    EQU *
           CLI 0(R14),X'D2'    MOVE ?
           BE  S23MUV1
           CLI 0(R14),X'41'    LA ?
           BE  S23LA1
           B   S23END1         SHOULD BE '00'
           SPACE
S23MUV1    EX  0,0(R14)        EXECUTE THE MOVE
           SR  0,0
           IC  R0,1(R14)       LENGTH MOVED
           AR  R1,R0           ADD TO OUTPUT POSN
           LA  R1,1(R1)        COS ASSMBLR REMOVED 1
           LA  R14,6(R14)      SKIP MVC
           B   S23LUP1
           SPACE
S23LA1     EQU *
           EX  0,0(R14)        EXECUTE THE LA R15,VARYING STRING
           ST  R14,0(R13)      SAVE REGISTER 14 IN SAVE AREA
           LH  R14,0(R15)      LOAD LENGTH OF THE STRING
           LTR  R14,R14        SEE IF STRING LENGTH = 0
           BZ  RESET14         NO DATA TO MOVE
           BCTR R14,0
           EX  R14,ERRMUV
           LA  R1,1(R14,R1)    STEP 1 SO NEXT MOVE GOES ONTO RIGHT
*                              SPOT IN BUFFER
RESET14    EQU  *
           L   R14,0(R13)      RELOAD R14
           LA  R14,4(R14)      STEP OVER THE LA
           B   S23LUP1
OOPS       WTO 'JOLE00-99 CANNOT ALLOCATE ERROR AREA'
           ABEND 16,DUMP,STEP
ERRMUV     MVC 0(*-*,R1),2(R15) **** EXECUTED
           SPACE
S23END1    EQU *
           LA  R14,2(R14)      BRANCH AROUND '0' AT END OF LIST
           L  R15,4(R13)       LOAD OLD SAVE ADDRESS
         ST    R14,12(R15)     RESET OLD RETURN ADDRESS
         MVC   0(3,R1),=C' AT'  SHIFT IN 'AT'
         MVC   4(4,R1),S23STMT                                    75003
         CLI   S23STMT,X'00'
         BNE   S23SETL
         MVC   4(4,R1),STMT                                       75003
S23SETL  LA    R14,S23MSSG-12 THE -8 IS FOR THE 'AT STMT'         75128
S23TEST0 CLI   4(R1),C'0'     LEADING ZERO?                      75003
         BNE   S23SR          -> NO                              75003
         MVC   4(4,R1),5(R1)  DROP ZERO                          75003
         BCT   R1,S23TEST0                                       75003
S23SR    EQU   *                                                 75003
           SR  R1,R14
         XC    #S23LNE2,#S23LNE2   CLEAR LENGTH                   76200
         CH    R1,#S23MAX          CHECK FOR A BIG MESSAGE        76200
         BNH   S23SHORT            ITS OK, KEEP GOING             76200
* NOW WE HAVE A MESSAGE THATS GREATER THAN 96 BYTES AND IF        76200
* WE DONT MAKE TWO LINES OUT OF IT, THE OS WRITER OR HASP...ECT   76200
* WILL CHOP IT OFF                                                76200
* SO WE ARE NOW GOING TO TAKE A LOOK AT THE MESSAGE FORM +96 BACK
* AND WHEN WE FIND A COMMA OR A BLANK THAT WILL END LINE 1 AND
* START LINE 2
         STH   R1,#S23LNE2         SAVE OLD LENGTH FOR LATER      76200
         LA    R15,S23MSSG         POINT TO THE START OF THE MSG  76200
         AH    R15,#S23MAX         GET TO +96                     76200
         LA    R1,30               STOP LOOKING AFTER 30 BYTES    76200
S23LOOK  EQU   *                                                  76200
         CLI   0(R15),C' '         IS IT A BLANK                  76200
         BE    S23ENDLK                                           76200
         CLI   0(R15),C','         HOW ABOUT A COMMA              76200
         BE    S23ENDLK                                           76200
         BCTR  R15,0               BACKUP,1 BYTE                  76200
         BCT   R1,S23LOOK          RETURN                         76200
S23ENDLK EQU   *                                                  76200
         LR    R1,R15              R1 = NEW END FOR LINE 1        76200
         LA    R14,#S23LREC   POINT TO START OF MESSAGE           76200
         SR    R1,R14              CALC NEW LENGTH FOR LINE 1     76200
         AH    R14,#S23LNE2        POINT R14 TO END OF MESSAGE    76200
         SR    R14,R15             CALC LENGTH FOR LINE 2         76200
         LA    R14,19(R14) LEAVE SOME BLANKS ON CONT LINE         76200
         STH   R14,#S23LNE2        SAVE IT FOR LATER              76200
         CLEAR S23LNE2                                            76200
         MVC   S23LNE2+15(L'S23LNE2-16),1(R15)      SAVE LINE 2   76200
S23SHORT EQU   *                                                  76200
         XC    #S23BLKS(8),#S23BLKS CLEAR VB DESCRIPTOR ETC       76200
           STH R1,#S23LREC
           LA  R1,4(R1)
           STH R1,#S23BLKS
           XC S23STMT,S23STMT
* GREAT,NOW WHERE ARE WE GOING TO PUT THIS FANTASTIC PIECE OF
*    INFORMATION ?
           TM  PRINT+48,X'10'
           BZ  S23WTO
           WRITE S23DECB,SF,PRINT,#S23BLKS
           CHECK S23DECB
S23WTO     EQU *
* NOW IF THE SEVERITY IS >=12 THE MESSAGE IS TYPED ON THE CONSOLE,
*    OTHERWISE A WTO WITH ROUTCDE=11 IS QUITE SATISFACTORY,UNLESS
*    WE HAVE A PRINT DD CARD,IF WHICH CASE WE CAN RETURN NOW
           CLI S23SEV,3
           BL  S23TPRNT
* HERE A REAL WTO IS REQUIRED,SO SET UP ROUTE-CODES 2 & 11
           MVC #S23MSSG,=XL2'8000'
           LH  R15,#S23LREC
           LA  R15,#S23LREC(R15)
         MVC 0(4,R15),=X'04004020' DESC 6 RTE 11,2                75311
         CLI    VS,C'2'    MVS ?                                   DASD
         BNE    S23TNMVS   NOPE                                    DASD
         MVC 0(4,R15),=X'04004004' DESC 6 RTE 2,14 JESMSG          DASD
S23TNMVS EQU *                                                     DASD
         LA    R1,#S23LREC
         SVC SVC35
         B    S23GOBAK
         SPACE 3
S23TPRNT EQU *                                                    75311
         TM    PRINT+48,X'10' DID WE PUT MESSAGE ON PRINTER FIX-X 76200
         BO    S23GOBAK       YES, DON'T FILL WTP ON JCL LOGFIX-X 76200
* SET UP A WTO WITH ROUTCDE=11
         MVC #S23MSSG,=XL2'8000'
         LH    R15,#S23LREC
         LA    R15,#S23LREC(R15)
         MVC 0(4,R15),=X'00000020' ROUTCODE     11                75128
         CLI    VS,C'2'   MVS ??                                   DASD
         BNE    S23NMVS   NOPE                                     DASD
         MVC 0(4,R15),=X'00000004' ROUTCODE 14 FOR JESMSG          DASD
S23NMVS  EQU *                                                     DASD
         LA    R1,#S23LREC
         SVC SVC35
S23GOBAK EQU     *
         CLC   #S23LNE2,=X'0000'   DO WE HAVE A SECOND LINE       76200
         BE    S23GOBK2            NOPE                           76200
         LH    R1,#S23LNE2         LOAD LENGTH OF LINE2           76200
         XC    #S23LNE2,#S23LNE2   CLEAR                          76200
         MVC   S23MSSG,S23LNE2     OVERLAY OLD WITH NEW           76200
         CLI S23LNE2,C' '  CHECK FOR BLANK SECOND LINE             DASD
         BNE S23SHORT                                              DASD
         LR  R15,R1        LOAD LENGTH OF MESSAGE                  DASD
         BCTR R15,0        SUBTRACT 1 FOR EXECUTE INST             DASD
         EX  R15,S23CLCBL                                          DASD
         BE  S23GOBK2      ITS BLANK  LETS NOT PRINT IT            DASD
         B     S23SHORT            RETURN AND WRITE LINE2         76200
S23CLCBL CLC   S23LNE2+1(*-*),S23LNE2                              DASD
S23GOBK2 EQU   *                                                  76200
         CLI S23SEV,5             JOL TERMINAL ERROR ?
         BNE    S23LMRET
         CLOSE (INSTRUCT,,PRINT,,RETN,,JOBQ)                      76200
         ABEND 1,DUMP,STEP
         XC    S23STMT,S23STMT
S23LMRET EQU    *
         JOLRETN
         LTORG
           DC  40S(*)
         TITLE 'UJEISPDQ:KEEP EXTRA PDQ ISAM ENTRYS'               DASD
* THIS LITTLE CSECT WILL KEEP THE 2ND AND 3RD ENTRIES       *      DASD
* WHICH ARE IN THE PDQ FROM A ISAM DATASET                  *      DASD
*                                                           *      DASD
* NOW ALL A J.O.L. PROGRAMMER HAS TO DO IS SAY              *      DASD
* CATLG ON ANY 1 OF THE 3 DCLS WHICH DEFINE                 *      DASD
* INDEX, PRIME OR OVFLOW                                    *      DASD
*                                                           *      DASD
* AND THE KEEP MODULE WILL CALL THIS GUY AND                *      DASD
* HE WILL SEARCH THE PDQ FOR MORE ENTRIES AND               *      DASD
* HANDLE THEM THE SAME WAY                                  *      DASD
*                                                           *      DASD
* ALSO THE JFCB VOL COUNT WILL BE UPDATED TO A MAX OF 3     *      DASD
* SO WHEN THE CATALOG MODULE GETS CONTROL THE VOL COUNT     *      DASD
* AND VOLUMES ARE IN GOOD SHAPE                             *      DASD
*                                                           *      DASD
*                                                           *      DASD
* SO CLEM IF YOUR READING THESE COMMENTS ALL I DID          *      DASD
* WAS COPY YOUR WORK IN THE UJE81PDQ MODULE                 *      DASD
* AND ADDED A FEW THINGS HERE AND THERE                     *      DASD
*                                                           *      DASD
* J.O.L. IS NOW BETTER THAN JCL WHEN IT COMES TO ISAM       *      DASD
*                                                           *      DASD
         LTORG
         JOLSAVE CSECT=UJEISPDQ                                    DASD
* THIS CSECT MUST FIND THE PDQ ENTRY THAT REFERS TO THE DSNAME     DASD
*    IN THE DSNAME FIELD. A 4 IS RETURNED IF IT CAN'T              DASD
*                                                                  DASD
******                                                             DASD
* CHECK IF JCTPDIP = 0 (MAY BE IF RUNNING UNDER                    DASD
*                       TSO).                                      DASD
******                                                             DASD
         SPACE 1                                                   DASD
         CLC   JCTPDIP,=F'0'                                       DASD
         BE    EISRTN                                              DASD
         MVI   EISDSN,0      SET DSN SERCH ARG TO ZERO             DASD
         MVI   ISINPDQ,2     SET SERCH NO. TO 2                    DASD
         CLI   VS,C'2'       MVS                                   DASD
         BNE   EISGO         NO START LOOKING FOR SECOND CONCAT    DASD
         MVI   ISINPDQ,1     SET SERCH NO. TO 1                    DASD
*REMEMBER THAT THE KEEP GOT RID OF THE 1ST ENTRY ALREADY--MVS ONLY-DASD
EISGO    EQU   *                                                   DASD
         GETJOBQ PDQDECB2,JCTPDIP                                  DASD
         B     EISGOTRD                                            DASD
EISREAD1 GETJOBQ PDQDECB2,CALLAREA                                 DASD
EISGOTRD EQU   *                                                   DASD
         CLI   VS,C'2'   MVS?                                      DASD
         BNE   EISNMVS1                                            DASD
EISMVDS1 LA    R14,*+4       POINT TO MVS CLC AREA                 DASD
         CLC   DDDSNAME,PDIDSN1                                    DASD
         BE    EISPASS1                                            DASD
         CLC   DDDSNAME,PDIDSN2                                    DASD
         BE    EISPASS2                                            DASD
         CLC   DDDSNAME,PDIDSN3                                    DASD
         BE    EISPASS3                                            DASD
* NOT IN PDI, GET NEXT                                             DASD
         CLC   =AL3(0),PDINPDIP  IS THIS THE LAST BLOCK?           DASD
         BE    EISRTN    YES, NOT FOUND THEN                       DASD
         GETJOBQ  PDQDECB2,PDINPDIP                                DASD
         B     EISMVDS1                                            DASD
EISNMVS1 EQU   *                                                   DASD
         LA     R14,*+4         POINT TO NEXT CLC                  DASD
         CLC   DDDSNAME,PDQDSN1                                    DASD
         BE    EISPASS1                                            DASD
         CLC   DDDSNAME,PDQDSN2                                    DASD
         BE    EISPASS2                                            DASD
         CLC   DDDSNAME,PDQDSN3                                    DASD
         BE    EISPASS3                                            DASD
* NOT IN THAT BLOCK,GET THE NEXT                                   DASD
         CLC   =AL3(0),PDQNPDQ LAST BLOCK IN PDQ ?                 DASD
         BE    EISRTN        YES,THERE-FORE COULDN'T FIND DSET     DASD
         MVC   CALLAREA,PDQNPDQ                                    DASD
         MVI   CALLAREA+3,0                                        DASD
*                                                                  DASD
         B     EISREAD1                                            DASD
EISPASS1 MVC   PDQDSNNO,=H'0'                                      DASD
         B     EISPDQB                                             DASD
EISPASS2 MVC   PDQDSNNO,=H'1'                                      DASD
         B     EISPDQB                                             DASD
EISPASS3 MVC   PDQDSNNO,=H'2'                                      DASD
EISPDQB  EQU   *                                                   DASD
* THERE USED TO BE A NOTE FOR JOBQ HERE, NOT NEC NOW               DASD
         ST    R1,APDQDIR       AND SAVE IT                        DASD
         ST    R14,EISR14       SAVE RETURN POINTER                DASD
         SR    R1,R1            CLEAN UP R1                        DASD
         IC    R1,EISDSN        LOAD SEARCH ARG                    DASD
         LA    R1,1(R1)         UP IT BY 1                         DASD
         STC   R1,EISDSN        PUT THE BUGGER BACK                DASD
         CLC   EISDSN,ISINPDQ   DO WE HAVE A HIT                   DASD
         BE    EISGOOD          ...YEP                             DASD
EISTRYA  EQU   *                                                   DASD
         L     R14,EISR14       RELOAD R14 WITH GOOOOD STUFF       DASD
* NOW RETURN TO THE NEXT COMPARE INSTRUCTION  HOPEFULLY            DASD
         CLC   PDQDSNNO,=H'0'                                      DASD
         BE    10(R14)                                             DASD
         CLC   PDQDSNNO,=H'1'                                      DASD
         BE    20(R14)                                             DASD
*        CLC   PDQDSNNO,=H'2'                                      DASD
         B     30(R14)                                             DASD
EISGOOD  EQU   *                                                   DASD
         CLI   VS,C'2'     MVS                                     DASD
         BNE   EISNMVS2                                            DASD
* GET SIOT FOR MVS SYSTEMS                                         DASD
         LH    R1,PDQDSNNO                                         DASD
         MH    R1,=AL2(PDILEN)                                     DASD
         LA    R14,PDISIOT1(R1)   GET SIOT ADDRESS LOCN            DASD
         MVC   CALLAREA,0(R14)                                     DASD
         B     EISGETSI         GO GET THE SIOT                    DASD
EISNMVS2 EQU   *                                                   DASD
         MVC   CALLAREA,PDQABLK                                    DASD
         MVI   CALLAREA+3,0                                        DASD
         GETJOBQ PDQDECB,CALLAREA                                  DASD
* NOW GET THE SIOT AS WELL                                         DASD
         LH    R1,PDQDSNNO     DATA SET NUMBER                     DASD
         MH    R1,=AL2(PDQBLKLN) LENGTH OF BLOCK                   DASD
         LA    R1,PDQASIOT(R1)   ABSOLUTE ADDRESS                  DASD
         MVC   CALLAREA(3),0(R1) SIOT TTR                          DASD
         MVI   CALLAREA+3,0                                        DASD
EISGETSI EQU   *                                                   DASD
         GETJOBQ SIOTDECB,CALLAREA                                 DASD
EISINPDQ EQU *                                                     DASD
* NOW JUST BECAUSE THE NAME APPEARS IN THE PDQ DOESN'T MEAN FOR    DASD
*    1 SECOND THAT IT HASN'T :-                                    DASD
*          1.  BEEN SCRATCHED                                      DASD
*          2.  BEEN ALREADY KEPT                                   DASD
         LH    R1,PDQDSNNO     1ST,2ND OR 3RD NAME IN PDQ ?        DASD
         CLI   VS,C'2'    IS IT AN MVS SYSTEM?                     DASD
         BNE   EISNMV3S  NO                                        DASD
* OK, MVS HAS DIFFERENT TYPE OF PASSED DATA SET Q                  DASD
         MH    R1,=AL2(PDILEN)                                     DASD
         LA    R14,PDITERM1(R1)                                    DASD
         B     EISNMVS3                                            DASD
EISNMV3S MH    R1,=AL2(PDQBLKLN)                                   DASD
         LA    R14,PDQTERM(R1)                                     DASD
EISNMVS3 EQU   *                                                   DASD
         TM    0(R14),X'C0'    OLD,DELETE ?                        DASD
         B     *+8             ****************                    DASD
         BO    EISAGN                                              DASD
         SPACE 3                                                   DASD
*** LAST BYTE OF JFCB TTR =0 IN SIOT                               DASD
         GETJOBQ JFCBDECB,SCTPJFCB  GET THE JFCB                   DASD
         CLI   JFCBVOLS,X'FF'  UNOPENED SCRATCH VOLUME ?           DASD
         BNE   EISNOTFF        GO WRITE BACK JFCB,SIOT             DASD
*          JOLERR 205,'DSID ''',DDDSID,''' DSNAME ''',#DSNAME,     DASD
*              ''' NOT KEPT:UNOPENED SCRATCH VOLUME'               DASD
         B     EISAGN                                              DASD
EISNOTFF EQU *                                                     DASD
         NI JFCBIND2,B'00011111' TELL OS AN OLD DATA SET            J60
*        NI    JFCBIND2,B'01111111' TELL OS AN OLD DATA SET        DASD
         OI    JFCBIND2,B'01000000'                                DASD
         PUTJOBQ JFCBDECB                                          DASD
         MVC   CALLAREA,SIOT                                       DASD
         MVI   CALLAREA+3,0                                        DASD
         GETJOBQ SIOTDECB,CALLAREA                                 DASD
         CLI   DDDISP+1,C'L'  LAST USE OF DATA SET ?               DASD
*                             IF WE CAN LET OS UNLOAD ?            DASD
         BNE   EISNLAST       NOT LAST USE                         DASD
* MARK SIOT AND LET IT THINK WE HAVE FINISHED WITH                 DASD
*  THE DATASET (WHICH WE HAVE, OF COURSE).                         DASD
*        NI    SCTSDISP,X'FF'-SIOTRETN-S3400DSP-PRIVATE            DASD
         NI    SCTSDISP,B'11100000'                                 j60
         OI    SCTSDISP,8     TURN KEEP ON                         DASD
         OI    SCTSBYT2,SCTRECVD MARK RECIEVED                     DASD
         B     EISMAKOL       MAKE IT OLD, RE-WRITE SIOT           DASD
EISNLAST EQU   *                                                   DASD
         OI    SCTSDISP,B'00001000'   SIOT = KEEP                  DASD
EISMAKOL OI    SCTSBYT4,1     MARK OLD                             DASD
         PUTJOBQ SIOTDECB                                          DASD
         SPACE 3                                                   DASD
* NOW PUT THE VOLSERS INTO DDVOLUME    NO DUPS OFCOURCE            DASD
         SR    R14,R14        CLEAR REG14                          DASD
         IC    R14,JFCBNVOL   INSERT JFCB VOLUME COUNT             DASD
         LA    R1,JFCBVOLS    POINT TO JFCB VOLSERS                DASD
EISLOADV LA    R15,DDVOLUME   POINT TO JOL VOLSER AREA             DASD
         CLC   0(6,R15),0(R1) EQUAL VOLUMES ?                      DASD
         BE    EISNMOVE       YEP DONT BOTHER TO ADD IT            DASD
EISLUP   CLC   0(6,R15),BLANKS BUCKET EMPTY FOR NEW GUY ?          DASD
         BE    EISMOVE        YEP GO DO IT                         DASD
         LA    R15,6(R15)     BUMP TO NEXT ENTRY                   DASD
         C     R15,=A(DDVOLUME+30) HOPE WE DONT HAVE TO MANY       DASD
         BNH   EISLUP         NOPE                                 DASD
         B     EISCVOL        ERROR HERE BETTER TELL SOMEONE       DASD
EISMOVE  MVC   0(6,R15),0(R1) INSERT NEW VOLSER                    DASD
EISNMOVE LA    R1,6(R1)       UP TO NEXT JFCB VOLSER               DASD
         BCT   R14,EISLOADV   RETURN TO LOOK                       DASD
EISCVOL  LA    R15,DDVOLUME   POINT TO JOL VOLSER AREA AGAIN       DASD
         LA    R14,5          STOP AFTER FIVE                      DASD
         SR    R1,R1          CLEAR COUNTER                        DASD
EISJFVOL CLC   0(6,R15),BLANKS END OF VOLSER LIST ?                DASD
         BE    EISTJFCB       YES SIR                              DASD
         LA    R1,1(R1)       UP COUNTER                           DASD
         LA    R15,6(R15)     UP POINTER                           DASD
         BCT   R14,EISJFVOL    RETURN                              DASD
EISTJFCB STC   R1,JFCBNVOL    STORE NEW VOLCOUNT IN JFCB VOL COUNT DASD
         ORG   *-4            +++++++++++ ************** ++++++++ 86211
         B     EISDVOL        ALLOW > 5 VOLS TO BE CATALOGUED     86211
         ORG
EISDVOL  EQU   *                                                   DASD
         BAL   R14,E00FXVOL    SET UP VOLUME(S) IN #VOL            DASD
* NOW TO MARK THE PDQ                                              DASD
* TEST IF MVS, DIFFERENT...                                        DASD
         CLI   VS,C'2'   MVS?                                      DASD
         BNE   EISNMVS4  NOPE ->                                   DASD
* MVS SIOT CONTAINS THE UCB POINTER, MVT THE PDQ DOES              DASD
* CHECK IF XA, IF SO GET UCB ADDRESS FROM OFFSET 'B9', NOT SCTUTYPE
         L     R14,16        GET CVT ADDRESS POINTER
*        L     R14,0(R14)    GET CVT ADDRESS
         TM    116(R14),X'80' XA?
         BNO   EISNXA        NO -> OUT
         MVI   CALLAREA,0
         MVC   CALLAREA+1(3),SIOT+X'B9'
         L     R14,CALLAREA
         B     EISTUNIT                                            DASD
* THE SIOT IN MVS CONTAINS THE UCB POINTER, NOT THE PDQ
EISNXA   LH    R14,SCTUTYPE                                        DASD
         B     EISTUNIT                                            DASD
EISNMVS4 EQU   *                                                   DASD
         MVC   CALLAREA,PDQABLK                                    DASD
         MVI   CALLAREA+3,0                                        DASD
         GETJOBQ PDQDECB,CALLAREA                                  DASD
         LH    R1,PDQDSNNO                                         DASD
         MH    R1,=AL2(PDQBLKLN)                                   DASD
         L     R14,PDQUCBS(R1) GET UCB POINTER FOR DEVICE TYPE     DASD
         MVC   SCTUTYPE,16(R14) MOVE IN UCB DEVICE TYPE            DASD
EISTUNIT EQU   *                                                   DASD
EISDA    NI    SCTUTYPE+1,X'FF'-UCBRR TURN OFF 'SHARE'             DASD
EISNOTDU EQU   *                                                   DASD
         SPACE 2                                                   DASD
         CLI   VS,C'2'  MVS AGAIN?                                 DASD
         BNE   EISNMVS5                                            DASD
         LH    R1,PDQDSNNO                                         DASD
         MH    R1,=AL2(PDILEN)                                     DASD
         LA    R14,PDITERM1(R1)                                    DASD
         B     EISMARK9                                            DASD
EISNMVS5 EQU   *                                                   DASD
         LA    R14,PDQTERM(R1)                                     DASD
EISMARK9 EQU   *                                                   DASD
         NI    0(R14),X'0F'     TURN OFF TOP 4 BITS                DASD
         CLI   DDDISP+1,C'L'   LAST USE,IE OLD,KEEP ?              DASD
         BNE   EISPASS                                             DASD
         OI    0(R14),B'01000000' OLD,KEEP                         DASD
         NI    0(R14),B'11000000'  INDICATE RECIEVED               DASD
         B     EISMARKD                                            DASD
EISPASS  OI    0(R14),B'11100000' OLD,PASS                         DASD
EISMARKD EQU   *                                                   DASD
         CLI   VS,C'2'    MVS AGAIN?????                           DASD
*        B     EISNMVS6     *** CVC JUL 17, 1985
         BNE   EISNMVS6     *** CVC JUL 17, 1985   REQD FOR F4 ABEND050
         SH    R14,=H'44'            BACKUP TO DSNAME              DASD
         MVI   0(R14),C' '           WIPE OUT THE NAME IN PDQ      DASD
         PUTJOBQ  PDQDECB2                                         DASD
         B     EISRETN0                                            DASD
EISNMVS6 EQU  *                                                    DASD
         PUTJOBQ PDQDECB                                           DASD
         SPACE 3                                                   DASD
EISRETN0 EQU *                                                     DASD
         CLI   ICOMMAND,C'K'   IS THIS A KEEP INSTRUCTION?         DASD
         BNE   EISAGN       NO,SO NO MESSAGE,JUST RETURN           DASD
         JOLERR 101,'DSID ''',DDDSID,''' DSNAME ''',#DSN,            * :
               ''' KEPT ON VOL(S) ',#VOL                           DASD
EISAGN   CLI   VS,C'2'        MVS                                  DASD
         BE    EISAGNVS       YES                                  DASD
         CLI   ISINPDQ,3        ARE WE ALL DONE HERE ?             DASD
         BE    EISRTN           .....YES, OUT                      DASD
         MVI   ISINPDQ,3        SET SEARCH TO DSN #3               DASD
         B     EISTRYA        GO BACK TO GET IT                    DASD
EISAGNVS CLI   ISINPDQ,2        ARE WE ALL DONE HERE               DASD
         BE    EISRTN           .....YES, OUT                      DASD
         MVI   ISINPDQ,2        SET SEARCH TO DSN #2               DASD
         B     EISTRYA        GO BACK TO GET IT                    DASD
EISRTN   MVI   ISINPDQ,C'1'     SET THIS BACK TO A ONE             DASD
         JOLRETN RC=0                                              DASD
EISR14   DS    F                                                   DASD
EISDSN   DS    1C                                                  DASD
         LTORG                                                     DASD
     TITLE 'UJEDEVNM:SEARCH DEVNAMET'                              DASD
          JOLSAVE CSECT=UJEDEVNM                                   DASD
*******************************************************************DASD
*  SEARCH THE SYSTEMS DEVICE NAME TABLE TO OBTAIN THE             *DASD
*  THE DEVICE TYPE NEEDED FOR A CAMLST FOR A SCRATCH              *DASD
*  OR  KEEP                                                       *DASD
*                                                                 *DASD
*  SEARCH ARGUMENT = DDUNIT IN INSTRUCT FILE                      *DASD
*  DEVNAMET FORMAT                                                *DASD
*  EACH ENTRY IS 12 BYTES                                         *DASD
*  BYTES 1-8 = UNIT NAME  ECT '3330-1' OR 'TAPE'                  *DASD
*  BYTES 9-12 = CODE    X'3070200D'                               *DASD
*                                                                 *DASD
*******************************************************************DASD
*                                                                 *DASD
* CHECK IF XA, IF SO USE THE XA ROUTINES INSTEAD OF DEVNAMET
         L     R14,16        GET CVT ADDRESS POINTER
*        L     R14,0(R14)    GET CVT ADDRESS
         TM    116(R14),X'80' XA?
         BNO   EDVNXA        NO -> OUT
*
* XA HERE ....
*
**********************************************************
*                                                        *
*                                                        *
*         X A   SUPPORT                                  *
*                                                        *
*                                                        *
**********************************************************
         SPACE 3
         MVC   DEVUNIT,DDUNIT   COPY INTO GOTTEN STORAGE
         MVC   ADEVATTR,=A(0)   SET UP NO RETURN OF ATTRIBUTES
* PREPARE TO SET UP MAIN PARAMETER ADDRESSES
         LA    R14,DEVUNIT
         LA    R15,DEVFLAGS
         STM   R14,R15,DEV4UVP  STORE ADDRESSES FOR IEFAB4UV
         LA    R1,DEV4UVP       GET ADDRESS OF PARAMETERS
         LINK  EP=IEFEB4UV      LINK TO THE ROUTINE
         LTR   R15,R15          IS IT A UNIT NAME?
         BNZ   EDVDEAD          NO, RETURN AN ERROR CODE
         MVC   SCTUTYPE,DEVTYPE MOVE IN THE DEVICE TYPE
         JOLRETN RC=0
DEVFLAGS DC    B'0000001000000000' FLAGS FOR IEFAB4UV (FUNCTION 6)
*
* VS1 OR MVS AT THIS POINT
*
EDVNXA    LOAD EP=DEVNAMET   LOAD THE KNOW IT ALL                  DASD
          LTR  R1,R0         GET ADDRESS OF HIM                    DASD
          BZ   EDVDEAD       SORRY                                 DASD
          L    R15,0(R1)     LOAD NUMBER OF ENTRIES IN TABLE       DASD
          MH   R15,=H'12'    MULT BY TABLE ENTRRY SIZE             DASD
          LA   R1,4(R1)      ADD 4 TO START ADDRESS OF TABLE       DASD
          AR   R15,R1        CALC ENDD OF TABLE                    DASD
          LA   R14,12        INCREMENT                             DASD
          CLC  DDUNIT,0(R1)  HOPE ITS HERE                         DASD
          BE   EDVALIVE      GO DO THE SCRATCH NOW                 DASD
          BXLE R1,R14,*-10   ROUND ROBIN                           DASD
EDVDEAD   JOLRETN RC=4                                             DASD
EDVALIVE  EQU  *                                                   DASD
          MVC  SCTUTYPE,8(R1) MOVE IN THE DEVICE TYPE              DASD
          JOLRETN RC=0                                             DASD
* THE FOLLOWING AREAS ARE USED AS PARAMETERS TO IEFAB4UV
DEV4UVP  DS    A               MUST POINT TO UNIT PARAMETER BLOCK
ADEVFLG  DS    A               MUST POINT TO FLAGS HALFWORD
         SPACE 3
DEVUNIT  DS    CL8             UNIT NAME MOVED HERE
DEVTYPE  DS    F               SET TO DEVTYPE BY IEFEB4UV
ADEVATTR DS    A               ADDRESS OF ATTRIB AREA (SET TO 0)
         LTORG                                                     DASD
MSGSECT  DS    0D                                                 J50
E999A01  WTO   'UJE999A JOL IS NOT LICENSED TO BE USED ON THIS PROCESSOR
               R',ROUTCDE=(1,2,11),DESC=11,MF=L                   J50
E999A02  WTO   'UJE999I JOL DEMONSTRATION VERSION',                    .
               ROUTCDE=(1,2,11),MF=L DESC=11                      J50
E999A03  WTO   'UJE999A YOUR JOL LICENSE FOR THIS PROCESSOR HAS EXPIRED.
               ',ROUTCDE=(1,2,11),MF=L DESC=11                    J50
E999A04  WTO   'UJE999A CANNOT VERIFY YOUR JOL LICENSE FOR THIS PROCESSO
               R',ROUTCDE=(1,2,11),MF=L DESC=11                   J50
E999A05  WTO   'UJE999A INVALID JOL LICENSE DETAILS',                  .
               ROUTCDE=(1,2,11),MF=L DESC=11                      J50
E999A06  WTO   'UJE999A YOUR JOL LICENSE FOR THIS PROCESSOR EXPIRED MORE
                E THAN 30 DAYS AGO',ROUTCDE=(1,2,11),MF=L DESC=11 J50
*HKFLG   DC    P'0'                                               J50
       TITLE 'UJELOCAT:LOCATE CATALOG DATASET'                     DASD
         JOLSAVE CSECT=UJELOCAT                                    DASD
         L     R15,=V(E05VOLS)         LOAD CAMLIST ADDRESS        DASD
         USING VOLINFO,R15                                         DASD
         ST    R15,ELOLOCAT+12         POINT TO LOCATE AREA        DASD
         LA    R6,300(R15)             GO UP A FEW AND SAVE POINTERDASD
         MVC   0(44,R6),DSNAME         MOVE TO LOCATE AREA         DASD
         MVC   DSNAME,0(R6)            MOVE DSNAME IN              DASD
         LOCATE ELOLOCAT                                           DASD
         LTR   R15,R15                 DID LOACTE FIND ANYTHING ?? DASD
         BNZ   ELORETN4                NOPE                        DASD
         JOLRETN RC=0  WE FOUND OUR STIFF LETS LEAVE               DASD
ELORETN4 EQU *                                                     DASD
         MVC  DSNAME,0(R6)            MOVE BACK ORGINAL DATA SET NADASD
         JOLRETN RC=4                 TELL THE CALLER WE FAILED    DASD
ELOLOCAT CAMLST NAME,DSNAME,,0                                     DASD
         LTORG                                                     DASD
         DC C'COMPILE DATE=&SYSDATE.,TIME=&SYSTIME.'               DASD
         END   UJE00SH
